/* The following code was generated by JFlex 1.6.1 */

/*--------- 1ra Area: Codigo de Usuario---------*/
//-----> Paquetes, importaciones
package dash;
import java_cup.runtime.*;
import java.util.LinkedList;

/*--------- 2da Area: Opciones y Declaraciones---------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/dash/A_Lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner{

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  2, 54,  3,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    29, 36, 50, 52, 52, 52, 33, 49, 37, 38,  5, 31, 30, 32, 43,  4, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 42, 41, 35, 24, 25, 52, 
    52, 14, 18, 12, 46, 44, 26, 23, 13,  9,  6, 48, 20, 28, 10, 19, 
    51,  6, 15, 22, 11, 27, 53, 45,  6,  6,  6, 16,  0, 17, 52, 52, 
     0, 14, 18, 12, 46, 44, 26, 23, 13,  9,  6, 48, 20, 28, 10, 19, 
    51,  6, 15, 22, 11, 27, 53, 45,  6,  6,  6, 39, 34, 40,  0,  0, 
     0,  0,  0,  0,  0, 54,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 52,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 52,  0,  0,  0, 
    52,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 52, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\1"+
    "\4\5\1\7\1\10\1\5\1\1\1\5\1\11\1\12"+
    "\2\5\1\13\1\14\1\15\1\1\1\16\1\17\1\16"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\3\5"+
    "\1\27\1\30\1\16\1\0\1\31\1\0\1\32\1\5"+
    "\1\32\6\5\2\0\2\5\1\33\1\34\1\35\3\5"+
    "\1\0\3\5\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\2\5\1\0\2\5\1\45\1\5\1\0\2\46"+
    "\1\5\1\0\2\5\1\47\2\5\2\0\3\5\1\50"+
    "\1\5\1\0\1\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\2\5\1\51\1\0\1\52"+
    "\2\53\2\5\1\54\2\0\2\5\1\0\1\55\1\0"+
    "\1\5\2\56\1\5\2\57\1\0\1\5\1\0\1\5"+
    "\1\0\2\5\3\0\1\5\2\60\3\0\2\5\1\61"+
    "\1\0\2\5\2\62\1\0\1\5\1\0\1\5\1\63"+
    "\2\0\1\5\1\0\1\64\1\65\1\64\1\65\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\2\0\1\5\1\66"+
    "\1\0\1\67\1\0\1\5\1\0\1\5\1\0\1\70"+
    "\1\0\1\71\2\0\1\5\3\0\1\72\2\0\1\73"+
    "\2\0\1\74\1\75\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\67\0\245\0\334\0\u0113\0\u014a"+
    "\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\67\0\67\0\u0294"+
    "\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\67\0\u0415"+
    "\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\67\0\67\0\67"+
    "\0\67\0\67\0\67\0\67\0\u055f\0\u0596\0\u05cd\0\67"+
    "\0\u0604\0\67\0\u063b\0\67\0\u0672\0\67\0\u06a9\0\u0113"+
    "\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861"+
    "\0\u0898\0\u08cf\0\67\0\67\0\67\0\u0906\0\u093d\0\u0974"+
    "\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\67\0\67\0\67\0\67"+
    "\0\67\0\67\0\67\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63"+
    "\0\u0113\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4"+
    "\0\u0d1b\0\u0113\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65"+
    "\0\u0e9c\0\u0113\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6"+
    "\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e"+
    "\0\u11d5\0\67\0\u120c\0\u1243\0\67\0\u0113\0\u127a\0\u12b1"+
    "\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u0113\0\u1432"+
    "\0\u1469\0\67\0\u0113\0\u14a0\0\67\0\u0113\0\u14d7\0\u150e"+
    "\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6"+
    "\0\u16fd\0\67\0\u0113\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810"+
    "\0\67\0\u1847\0\u187e\0\u18b5\0\67\0\u0113\0\u18ec\0\u1923"+
    "\0\u195a\0\u1991\0\67\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\67"+
    "\0\67\0\u0113\0\u0113\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80"+
    "\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\67\0\u1c93\0\67\0\u1cca"+
    "\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\67\0\u1ddd\0\u0113\0\u1e14"+
    "\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\67\0\u1f5e\0\u1f95"+
    "\0\67\0\u1fcc\0\u2003\0\67\0\67\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\2\7\1\13\1\7\1\14\1\15\1\16\1\17"+
    "\1\20\2\7\1\21\1\22\1\7\1\23\1\24\1\25"+
    "\1\7\1\26\1\4\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\2\1\7\1\50\1\51"+
    "\1\7\1\52\1\7\72\0\1\4\70\0\1\53\67\0"+
    "\1\54\67\0\2\7\1\0\7\7\2\0\3\7\1\0"+
    "\2\7\2\0\3\7\17\0\3\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\10\0\1\10\71\0\1\55\17\0"+
    "\1\56\42\0\2\7\1\0\1\7\1\57\5\7\2\0"+
    "\3\7\1\0\2\7\2\0\1\60\2\7\17\0\3\7"+
    "\1\0\1\7\2\0\1\7\1\0\1\7\7\0\2\7"+
    "\1\0\4\7\1\61\1\62\1\7\2\0\3\7\1\0"+
    "\2\7\2\0\3\7\17\0\3\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\7\0\2\7\1\0\7\7\2\0"+
    "\3\7\1\0\2\7\2\0\3\7\17\0\2\7\1\63"+
    "\1\0\1\7\2\0\1\7\1\0\1\7\7\0\2\7"+
    "\1\0\7\7\2\0\3\7\1\0\2\7\2\0\3\7"+
    "\17\0\1\64\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\1\7\7\0\2\7\1\0\6\7\1\65\2\0\1\7"+
    "\1\66\1\7\1\0\2\7\2\0\3\7\17\0\3\7"+
    "\1\0\1\7\2\0\1\7\1\0\1\7\14\0\1\67"+
    "\41\0\1\70\17\0\2\7\1\0\2\7\1\71\4\7"+
    "\2\0\3\7\1\0\2\7\2\0\3\7\17\0\1\7"+
    "\1\72\1\7\1\0\1\7\2\0\1\7\1\0\1\7"+
    "\31\0\1\73\1\74\65\0\1\75\44\0\2\7\1\0"+
    "\5\7\1\76\1\7\2\0\1\7\1\77\1\7\1\0"+
    "\2\7\2\0\1\7\1\100\1\7\17\0\3\7\1\0"+
    "\1\7\2\0\1\7\1\0\1\7\7\0\2\7\1\101"+
    "\1\102\4\7\1\103\1\7\2\0\3\7\1\0\2\7"+
    "\2\0\1\7\1\104\1\7\17\0\3\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\40\0\1\105\30\0\2\106"+
    "\35\0\1\107\1\0\1\106\65\0\1\110\67\0\1\111"+
    "\54\0\1\112\66\0\1\113\44\0\2\7\1\0\7\7"+
    "\2\0\2\7\1\114\1\0\2\7\2\0\3\7\17\0"+
    "\3\7\1\0\1\7\2\0\1\7\1\0\1\7\7\0"+
    "\2\7\1\0\4\7\1\115\2\7\2\0\3\7\1\0"+
    "\2\7\2\0\3\7\17\0\3\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\7\0\2\7\1\116\1\117\4\7"+
    "\1\120\1\7\2\0\1\7\1\121\1\7\1\0\2\7"+
    "\2\0\3\7\17\0\1\122\2\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\7\0\2\123\1\0\7\123\2\0"+
    "\3\123\1\0\2\123\2\0\5\123\3\0\1\123\1\0"+
    "\1\123\3\0\1\123\1\0\1\123\1\0\3\123\1\0"+
    "\1\123\2\0\3\123\1\0\2\53\1\4\64\53\13\0"+
    "\1\124\61\0\2\7\1\0\2\7\1\125\4\7\2\0"+
    "\3\7\1\0\2\7\2\0\3\7\17\0\3\7\1\0"+
    "\1\7\2\0\1\7\1\0\1\7\7\0\2\7\1\0"+
    "\5\7\1\126\1\7\2\0\3\7\1\0\2\7\2\0"+
    "\3\7\17\0\3\7\1\0\1\7\2\0\1\7\1\0"+
    "\1\7\7\0\2\7\1\0\7\7\2\0\3\7\1\127"+
    "\1\130\1\7\2\0\3\7\17\0\3\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\7\0\2\7\1\0\7\7"+
    "\2\0\3\7\1\0\2\7\2\0\3\7\17\0\2\7"+
    "\1\131\1\0\1\7\2\0\1\7\1\0\1\7\7\0"+
    "\2\7\1\0\2\7\1\132\4\7\2\0\3\7\1\0"+
    "\2\7\2\0\3\7\17\0\3\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\7\0\2\7\1\0\7\7\2\0"+
    "\3\7\1\0\2\7\2\0\3\7\17\0\1\133\2\7"+
    "\1\0\1\7\2\0\1\7\1\0\1\7\7\0\2\7"+
    "\1\0\7\7\2\0\1\7\1\134\1\7\1\0\2\7"+
    "\2\0\3\7\17\0\3\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\7\20\0\1\135\57\0\2\136\63\0\2\7"+
    "\1\0\6\7\1\137\2\0\3\7\1\0\2\7\2\0"+
    "\3\7\17\0\3\7\1\0\1\7\2\0\1\7\1\0"+
    "\1\7\7\0\2\7\1\136\1\140\6\7\2\0\3\7"+
    "\1\0\2\7\2\0\3\7\17\0\3\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\7\0\2\7\1\0\7\7"+
    "\2\0\2\7\1\141\1\0\2\7\2\0\3\7\17\0"+
    "\3\7\1\0\1\7\2\0\1\7\1\0\1\7\7\0"+
    "\2\7\1\0\6\7\1\142\2\0\3\7\1\0\2\7"+
    "\2\0\3\7\17\0\3\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\7\7\0\2\7\1\0\1\7\1\143\5\7"+
    "\2\0\3\7\1\0\2\7\2\0\3\7\17\0\3\7"+
    "\1\0\1\7\2\0\1\7\1\0\1\7\13\0\1\144"+
    "\62\0\2\7\1\0\1\7\1\145\5\7\2\0\3\7"+
    "\1\0\2\7\2\0\3\7\17\0\3\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\7\0\2\7\1\146\1\147"+
    "\6\7\2\0\3\7\1\0\2\7\2\0\3\7\17\0"+
    "\3\7\1\0\1\7\2\0\1\7\1\0\1\7\7\0"+
    "\2\7\1\0\7\7\2\0\2\7\1\150\1\0\2\7"+
    "\2\0\3\7\17\0\3\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\7\7\0\2\7\1\0\7\7\2\0\3\7"+
    "\1\151\1\152\1\7\2\0\3\7\17\0\3\7\1\0"+
    "\1\7\2\0\1\7\1\0\1\7\7\0\2\7\1\153"+
    "\1\154\6\7\2\0\3\7\1\0\2\7\2\0\3\7"+
    "\17\0\3\7\1\0\1\7\2\0\1\7\1\0\1\7"+
    "\66\0\1\155\7\0\2\7\1\0\7\7\2\0\3\7"+
    "\1\0\2\7\2\0\3\7\17\0\3\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\156\7\0\2\7\1\0\7\7"+
    "\2\0\3\7\1\157\1\160\1\7\2\0\3\7\17\0"+
    "\3\7\1\0\1\7\2\0\1\7\1\0\1\7\7\0"+
    "\2\7\1\0\7\7\2\0\3\7\1\0\2\7\2\0"+
    "\1\161\2\7\17\0\3\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\7\7\0\2\123\1\0\7\123\2\0\3\123"+
    "\1\0\2\123\2\0\5\123\3\0\1\123\1\0\1\123"+
    "\3\0\1\123\1\0\1\123\1\0\3\123\1\0\1\123"+
    "\1\0\1\162\3\123\21\0\1\163\54\0\2\7\1\0"+
    "\7\7\1\163\1\0\3\7\1\0\2\7\2\0\3\7"+
    "\17\0\3\7\1\0\1\7\2\0\1\7\1\0\1\7"+
    "\7\0\2\7\1\0\6\7\1\164\2\0\3\7\1\0"+
    "\2\7\2\0\3\7\17\0\3\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\55\0\1\165\20\0\2\7\1\0"+
    "\7\7\2\0\3\7\1\0\2\7\2\0\3\7\17\0"+
    "\1\166\2\7\1\0\1\7\2\0\1\7\1\0\1\7"+
    "\7\0\2\7\1\0\5\7\1\167\1\7\2\0\3\7"+
    "\1\0\2\7\2\0\3\7\17\0\3\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\7\0\2\7\1\0\5\7"+
    "\1\170\1\7\2\0\3\7\1\0\2\7\2\0\3\7"+
    "\17\0\3\7\1\0\1\7\2\0\1\7\1\0\1\7"+
    "\7\0\2\7\1\0\7\7\2\0\2\7\1\171\1\0"+
    "\2\7\2\0\3\7\17\0\3\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\11\0\2\172\70\0\1\173\61\0"+
    "\2\7\1\172\1\174\6\7\2\0\3\7\1\0\2\7"+
    "\2\0\3\7\17\0\3\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\7\7\0\2\7\1\0\2\7\1\175\4\7"+
    "\2\0\3\7\1\0\2\7\2\0\3\7\17\0\3\7"+
    "\1\0\1\7\2\0\1\7\1\0\1\7\7\0\2\7"+
    "\1\0\7\7\2\0\3\7\1\176\2\7\2\0\3\7"+
    "\17\0\3\7\1\0\1\7\2\0\1\7\1\0\1\7"+
    "\7\0\2\7\1\0\3\7\1\177\3\7\2\0\3\7"+
    "\1\0\2\7\2\0\3\7\17\0\3\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\34\0\1\200\41\0\2\7"+
    "\1\0\7\7\2\0\3\7\1\0\2\7\2\0\1\7"+
    "\1\201\1\7\17\0\3\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\7\13\0\1\202\62\0\2\7\1\0\1\7"+
    "\1\203\5\7\2\0\3\7\1\0\2\7\2\0\3\7"+
    "\17\0\3\7\1\0\1\7\2\0\1\7\1\0\1\7"+
    "\7\0\2\7\1\0\2\7\1\204\4\7\2\0\3\7"+
    "\1\0\2\7\2\0\3\7\17\0\3\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\55\0\1\205\20\0\2\7"+
    "\1\0\7\7\2\0\3\7\1\0\2\7\2\0\3\7"+
    "\17\0\1\206\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\1\7\25\0\1\207\50\0\2\7\1\0\7\7\2\0"+
    "\2\7\1\210\1\0\2\7\2\0\3\7\17\0\3\7"+
    "\1\0\1\7\2\0\1\7\1\0\1\7\17\0\1\211"+
    "\56\0\2\7\1\0\5\7\1\212\1\7\2\0\3\7"+
    "\1\0\2\7\2\0\3\7\17\0\3\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\16\0\1\213\57\0\2\7"+
    "\1\0\4\7\1\214\2\7\2\0\3\7\1\0\2\7"+
    "\2\0\3\7\17\0\3\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\7\7\0\2\7\1\0\5\7\1\215\1\7"+
    "\2\0\3\7\1\0\2\7\2\0\3\7\17\0\3\7"+
    "\1\0\1\7\2\0\1\7\1\0\1\7\10\0\1\216"+
    "\65\0\2\7\1\0\7\7\1\217\1\0\3\7\1\0"+
    "\2\7\2\0\3\7\17\0\3\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\7\0\2\7\1\0\7\7\2\0"+
    "\3\7\1\220\1\221\1\7\2\0\3\7\17\0\3\7"+
    "\1\0\1\7\2\0\1\7\1\0\1\7\7\0\2\7"+
    "\1\0\7\7\2\0\3\7\1\0\2\7\2\0\3\7"+
    "\17\0\3\7\1\222\1\223\2\0\1\7\1\0\1\7"+
    "\7\0\2\7\1\0\7\7\1\224\1\0\3\7\1\0"+
    "\2\7\2\0\3\7\17\0\3\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\13\0\1\225\70\0\1\226\60\0"+
    "\2\7\1\0\1\7\1\227\5\7\2\0\3\7\1\0"+
    "\2\7\2\0\3\7\17\0\3\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\7\0\2\7\1\0\3\7\1\230"+
    "\3\7\2\0\3\7\1\0\2\7\2\0\3\7\17\0"+
    "\3\7\1\0\1\7\2\0\1\7\1\0\1\7\55\0"+
    "\1\231\37\0\2\232\46\0\2\7\1\0\7\7\2\0"+
    "\3\7\1\232\1\233\1\7\2\0\3\7\17\0\3\7"+
    "\1\0\1\7\2\0\1\7\1\0\1\7\7\0\2\7"+
    "\1\0\5\7\1\234\1\7\2\0\3\7\1\0\2\7"+
    "\2\0\3\7\17\0\3\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\7\55\0\1\235\20\0\2\7\1\0\7\7"+
    "\2\0\3\7\1\0\2\7\2\0\3\7\17\0\1\236"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\1\7\26\0"+
    "\2\237\46\0\2\7\1\0\7\7\2\0\3\7\1\237"+
    "\1\240\1\7\2\0\3\7\17\0\3\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\54\0\1\241\21\0\2\7"+
    "\1\0\7\7\2\0\3\7\1\0\2\7\2\0\3\7"+
    "\16\0\1\241\3\7\1\0\1\7\2\0\1\7\1\0"+
    "\1\7\7\0\2\7\1\0\7\7\2\0\3\7\1\0"+
    "\2\7\2\0\1\7\1\242\1\7\17\0\3\7\1\0"+
    "\1\7\2\0\1\7\1\0\1\7\10\0\1\216\11\0"+
    "\1\243\54\0\1\244\104\0\2\245\46\0\2\7\1\0"+
    "\7\7\2\0\3\7\1\245\1\246\1\7\2\0\3\7"+
    "\17\0\3\7\1\0\1\7\2\0\1\7\1\0\1\7"+
    "\10\0\1\247\106\0\1\250\54\0\1\251\57\0\2\7"+
    "\1\0\7\7\2\0\3\7\1\0\1\7\1\252\2\0"+
    "\3\7\17\0\3\7\1\0\1\7\2\0\1\7\1\0"+
    "\1\7\7\0\2\7\1\0\4\7\1\253\2\7\2\0"+
    "\3\7\1\0\2\7\2\0\3\7\17\0\3\7\1\0"+
    "\1\7\2\0\1\7\1\0\1\7\17\0\1\254\56\0"+
    "\2\7\1\0\5\7\1\255\1\7\2\0\3\7\1\0"+
    "\2\7\2\0\3\7\17\0\3\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\7\0\2\7\1\0\7\7\2\0"+
    "\3\7\1\256\1\257\1\7\2\0\3\7\17\0\3\7"+
    "\1\0\1\7\2\0\1\7\1\0\1\7\26\0\2\260"+
    "\46\0\2\7\1\0\7\7\2\0\3\7\1\260\1\261"+
    "\1\7\2\0\3\7\17\0\3\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\11\0\2\262\51\0\1\263\11\0"+
    "\2\7\1\0\7\7\2\0\2\7\1\264\1\0\2\7"+
    "\2\0\3\7\17\0\3\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\7\10\0\1\244\11\0\1\265\55\0\2\266"+
    "\63\0\2\7\1\266\7\7\2\0\3\7\1\0\2\7"+
    "\2\0\3\7\17\0\3\7\1\0\1\7\2\0\1\7"+
    "\1\0\1\7\10\0\1\247\11\0\1\267\72\0\2\270"+
    "\46\0\2\7\1\0\7\7\2\0\3\7\1\270\1\271"+
    "\1\7\2\0\3\7\17\0\3\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\26\0\2\272\46\0\2\7\1\0"+
    "\7\7\2\0\3\7\1\272\1\273\1\7\2\0\3\7"+
    "\17\0\3\7\1\0\1\7\2\0\1\7\1\0\1\7"+
    "\11\0\2\274\63\0\2\7\1\274\7\7\2\0\3\7"+
    "\1\0\2\7\2\0\3\7\17\0\3\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\13\0\1\275\73\0\1\276"+
    "\55\0\2\7\1\0\2\7\1\277\4\7\2\0\3\7"+
    "\1\0\2\7\2\0\3\7\17\0\3\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\7\30\0\1\300\64\0\2\301"+
    "\46\0\2\7\1\0\7\7\2\0\3\7\1\301\1\302"+
    "\1\7\2\0\3\7\17\0\3\7\1\0\1\7\2\0"+
    "\1\7\1\0\1\7\11\0\2\303\63\0\2\7\1\303"+
    "\7\7\2\0\3\7\1\0\2\7\2\0\3\7\17\0"+
    "\3\7\1\0\1\7\2\0\1\7\1\0\1\7\30\0"+
    "\1\304\47\0\2\305\67\0\1\306\64\0\2\307\63\0"+
    "\2\7\1\307\7\7\2\0\3\7\1\0\2\7\2\0"+
    "\3\7\17\0\3\7\1\0\1\7\2\0\1\7\1\0"+
    "\1\7\30\0\1\310\51\0\1\311\66\0\1\312\103\0"+
    "\1\313\51\0\1\314\67\0\1\315\65\0\1\316\54\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8250];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\11\1\2\11\7\1\1\11"+
    "\6\1\7\11\3\1\1\11\1\1\1\11\1\0\1\11"+
    "\1\0\1\11\10\1\2\0\2\1\3\11\3\1\1\0"+
    "\3\1\7\11\2\1\1\0\4\1\1\0\3\1\1\0"+
    "\5\1\2\0\5\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\2\1\1\11"+
    "\1\0\1\1\1\11\4\1\2\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\11\2\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\3\0\1\1\1\11\1\1"+
    "\3\0\2\1\1\11\1\0\2\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\2\0\1\1\1\0\2\11"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\1\11\1\0\1\11\1\0\1\1\1\0\1\1"+
    "\1\0\1\11\1\0\1\1\2\0\1\1\3\0\1\11"+
    "\2\0\1\11\2\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //-----> Codigo en java
    //----->Variables, estrucutras de datos
    public static LinkedList<MyError> listaErrorLexicos = new LinkedList<MyError>();
    public String texto ="";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico "+yytext()+" Linea: "+yyline+", Columna: "+yycolumn);
                                MyError datos = new MyError(yytext(), yyline, yycolumn, "Error Lexico", "Simbolo no existe en el lenguaje");
                                listaErrorLexicos.add(datos);
            }
          case 63: break;
          case 2: 
            { 
            }
          case 64: break;
          case 3: 
            { //System.out.println("<div_operator> " + yytext());
                                return new Symbol(Simbolos.DIV_OP, yycolumn, yyline, yytext());
            }
          case 65: break;
          case 4: 
            { //System.out.println("<mult_operator> " + yytext());
                                return new Symbol(Simbolos.MULT_OP, yycolumn, yyline, yytext());
            }
          case 66: break;
          case 5: 
            { //System.out.println("<id> " + yytext());
                                return new Symbol(Simbolos.ID, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 6: 
            { //System.out.println("<number> " + yytext());
                                return new Symbol(Simbolos.INTEGER, yycolumn, yyline, yytext());
            }
          case 68: break;
          case 7: 
            { //System.out.println("<left_brac> " + yytext());
                                return new Symbol(Simbolos.LBRAC, yycolumn, yyline, yytext());
            }
          case 69: break;
          case 8: 
            { //System.out.println("<right_brac> " + yytext());
                                return new Symbol(Simbolos.RBRAC, yycolumn, yyline, yytext());
            }
          case 70: break;
          case 9: 
            { //System.out.println("<assign> " + yytext());
                                return new Symbol(Simbolos.ASSIGN, yycolumn, yyline, yytext());
            }
          case 71: break;
          case 10: 
            { //System.out.println("<greaterThan_operator> " + yytext());
                                return new Symbol(Simbolos.GREATERTHAN_OP, yycolumn, yyline, yytext());
            }
          case 72: break;
          case 11: 
            { //System.out.println("<comma> " + yytext());
                                return new Symbol(Simbolos.COMMA, yycolumn, yyline, yytext());
            }
          case 73: break;
          case 12: 
            { //System.out.println("<add_operator> " + yytext());
                                return new Symbol(Simbolos.ADD_OP, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 13: 
            { //System.out.println("<minus_operator> " + yytext());
                                return new Symbol(Simbolos.MINUS_OP, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 14: 
            { //System.out.println("<symbols> " + yytext());
                                    return new Symbol(Simbolos.SYMBS, yycolumn, yyline, yytext());
            }
          case 76: break;
          case 15: 
            { //System.out.println("<lessThan_operator> " + yytext());
                                return new Symbol(Simbolos.LESSTHAN_OP, yycolumn, yyline, yytext());
            }
          case 77: break;
          case 16: 
            { //System.out.println("<left_parent> " + yytext());
                                return new Symbol(Simbolos.LPAR, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 17: 
            { //System.out.println("<right_parent> " + yytext());
                                return new Symbol(Simbolos.RPAR, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 18: 
            { //System.out.println("<left_key> " + yytext());
                                return new Symbol(Simbolos.LKEY, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 19: 
            { //System.out.println("<right_key> " + yytext());
                                return new Symbol(Simbolos.RKEY, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 20: 
            { //System.out.println("<semi_colon> " + yytext());
                                return new Symbol(Simbolos.SEMICOLON, yycolumn, yyline, yytext());
            }
          case 82: break;
          case 21: 
            { //System.out.println("<colon> " + yytext());
                                return new Symbol(Simbolos.COLON, yycolumn, yyline, yytext());
            }
          case 83: break;
          case 22: 
            { //System.out.println("<dot> " + yytext());
                                return new Symbol(Simbolos.DOT, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 23: 
            { //System.out.println("<sim_comilla> " + yytext());
                                return new Symbol(Simbolos.SIMCOM, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 24: 
            { //System.out.println("<dob_comilla> " + yytext());
                                return new Symbol(Simbolos.DOBCOM, yycolumn, yyline, yytext());
            }
          case 86: break;
          case 25: 
            { //System.out.println("<multFor> " + yytext());
                                return new Symbol(Simbolos.MULTFOR, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 26: 
            { //System.out.println("<if> " + yytext());
                                return new Symbol(Simbolos.IF, yycolumn, yyline, yytext());
            }
          case 88: break;
          case 27: 
            { //System.out.println("<equal_operator> " + yytext());
                                return new Symbol(Simbolos.EQUAL_OP, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 28: 
            { //System.out.println("<arrow> " + yytext());
                                return new Symbol(Simbolos.ARROW, yycolumn, yyline, yytext());
            }
          case 90: break;
          case 29: 
            { //System.out.println("<greaterThanOrEqual_operator> " + yytext());
                                        return new Symbol(Simbolos.GREATEREQUAL_OP, yycolumn, yyline, yytext());
            }
          case 91: break;
          case 30: 
            { //System.out.println("<addFor> " + yytext());
                                return new Symbol(Simbolos.ADDFOR, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 31: 
            { //System.out.println("<dash> " + yytext());
                                return new Symbol(Simbolos.DASH, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 32: 
            { //System.out.println("<minusFor> " + yytext());
                                return new Symbol(Simbolos.MINUSFOR, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 33: 
            { //System.out.println("<and_operator> " + yytext());
                                return new Symbol(Simbolos.AND_OP, yycolumn, yyline, yytext());
            }
          case 95: break;
          case 34: 
            { //System.out.println("<or_operator> " + yytext());
                                return new Symbol(Simbolos.OR_OP, yycolumn, yyline, yytext());
            }
          case 96: break;
          case 35: 
            { //System.out.println("<lessThanOrEqual_operator> " + yytext());
                                    return new Symbol(Simbolos.LESSEQUAL_OP, yycolumn, yyline, yytext());
            }
          case 97: break;
          case 36: 
            { //System.out.println("<notEqual_operator> " + yytext());
                                return new Symbol(Simbolos.NOTEQUAL_OP, yycolumn, yyline, yytext());
            }
          case 98: break;
          case 37: 
            { //System.out.println("<do> " + yytext());
                                return new Symbol(Simbolos.DO, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 38: 
            { //System.out.println("<int> " + yytext());
                                return new Symbol(Simbolos.INT, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 39: 
            { //System.out.println("<return> " + yytext());
                                return new Symbol(Simbolos.RETURN, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 40: 
            { //System.out.println("<for> " + yytext());
                                return new Symbol(Simbolos.FOR, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 41: 
            { //System.out.println("<text> " + yytext());
                                    return new Symbol(Simbolos.TEXT, yycolumn, yyline, yytext());
            }
          case 103: break;
          case 42: 
            { //System.out.println("<char> " + yytext());
                                return new Symbol(Simbolos.CHAR, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 43: 
            { //System.out.println("<case> " + yytext());
                                return new Symbol(Simbolos.CASE, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 44: 
            { //System.out.println("<bool> " + yytext());
                                return new Symbol(Simbolos.BOOL, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 45: 
            { //System.out.println("<function> " + yytext());
                                return new Symbol(Simbolos.FUNCTION, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 46: 
            { //System.out.println("<main> " + yytext());
                                return new Symbol(Simbolos.MAIN, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 47: 
            { //System.out.println("<else> " + yytext());
                                return new Symbol(Simbolos.ELSE, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 48: 
            { //System.out.println("<break> " + yytext());
                                return new Symbol(Simbolos.BREAK, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 49: 
            { //System.out.println("<false> " + yytext());
                                return new Symbol(Simbolos.FALSE, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 50: 
            { //System.out.println("<while> " + yytext());
                                return new Symbol(Simbolos.WHILE, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 51: 
            { //System.out.println("<intptr> " + yytext());
                                return new Symbol(Simbolos.INTPTR, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 52: 
            { //System.out.println("<string> " + yytext());
                                return new Symbol(Simbolos.STRING, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 53: 
            { //System.out.println("<switch> " + yytext());
                                return new Symbol(Simbolos.SWITCH, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 54: 
            { //System.out.println("<charptr> " + yytext());
                                return new Symbol(Simbolos.CHARPTR, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 55: 
            { //System.out.println("<boolptr> " + yytext());
                                return new Symbol(Simbolos.BOOLPTR, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 56: 
            { //System.out.println("<read> " + yytext());
                                return new Symbol(Simbolos.READ, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 57: 
            { //System.out.println("<default> " + yytext());
                                return new Symbol(Simbolos.DEFAULT, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 58: 
            { //System.out.println("<add_assign> " + yytext());
                                return new Symbol(Simbolos.ADD_ASSIGN, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 59: 
            { //System.out.println("<div_assign> " + yytext());
                                return new Symbol(Simbolos.DIV_ASSIGN, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 60: 
            { //System.out.println("<mult_assign> " + yytext());
                                return new Symbol(Simbolos.MULT_ASSIGN, yycolumn, yyline, yytext());
            }
          case 122: break;
          case 61: 
            { //System.out.println("<print> " + yytext());
                                return new Symbol(Simbolos.PRINT, yycolumn, yyline, yytext());
            }
          case 123: break;
          case 62: 
            { //System.out.println("<minus_assign> " + yytext());
                                return new Symbol(Simbolos.MINUS_ASSIGN, yycolumn, yyline, yytext());
            }
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
