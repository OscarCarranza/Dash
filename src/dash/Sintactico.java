
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package dash;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Nodos.Nodo;
import Nodos.Variable;
import Nodos.Tabla;
import Nodos.Cuadruplo;
import Nodos.Infix2Postfix;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\351\000\002\002\004\000\002\002\003\000\002\123" +
    "\004\000\002\123\003\000\002\122\003\000\002\122\003" +
    "\000\002\122\003\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\004\005\000" +
    "\002\004\004\000\002\005\004\000\002\005\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\002\000\002\010" +
    "\003\000\002\010\005\000\002\010\005\000\002\010\003" +
    "\000\002\031\005\000\002\031\004\000\002\032\004\000" +
    "\002\032\004\000\002\033\004\000\002\033\002\000\002" +
    "\007\004\000\002\007\005\000\002\012\005\000\002\012" +
    "\004\000\002\013\004\000\002\013\004\000\002\014\004" +
    "\000\002\014\002\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\016" +
    "\003\000\002\016\005\000\002\016\005\000\002\016\003" +
    "\000\002\034\005\000\002\034\004\000\002\035\004\000" +
    "\002\035\004\000\002\036\004\000\002\036\002\000\002" +
    "\011\004\000\002\011\005\000\002\017\005\000\002\017" +
    "\004\000\002\020\004\000\002\020\004\000\002\021\004" +
    "\000\002\021\002\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\037\005\000\002\037\004\000\002" +
    "\023\004\000\002\023\004\000\002\041\004\000\002\041" +
    "\002\000\002\023\004\000\002\023\005\000\002\024\003" +
    "\000\002\024\005\000\002\025\005\000\002\025\004\000" +
    "\002\026\004\000\002\026\004\000\002\027\006\000\002" +
    "\027\002\000\002\030\004\000\002\030\003\000\002\030" +
    "\005\000\002\030\003\000\002\045\005\000\002\045\003" +
    "\000\002\045\007\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\047\004\000\002\047\005\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\050" +
    "\004\000\002\050\002\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\124\002\000\002\125\002\000\002\053" +
    "\014\000\002\053\012\000\002\053\012\000\002\054\005" +
    "\000\002\054\002\000\002\056\011\000\002\056\011\000" +
    "\002\056\011\000\002\056\011\000\002\056\011\000\002" +
    "\056\011\000\002\057\011\000\002\057\011\000\002\057" +
    "\011\000\002\057\011\000\002\057\011\000\002\126\002" +
    "\000\002\127\002\000\002\060\015\000\002\060\013\000" +
    "\002\060\013\000\002\061\016\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\063" +
    "\005\000\002\063\004\000\002\063\002\000\002\064\005" +
    "\000\002\064\005\000\002\064\005\000\002\064\005\000" +
    "\002\065\012\000\002\066\003\000\002\066\002\000\002" +
    "\067\004\000\002\067\003\000\002\070\007\000\002\071" +
    "\003\000\002\071\005\000\002\072\004\000\002\072\002" +
    "\000\002\073\006\000\002\073\002\000\002\043\004\000" +
    "\002\043\004\000\002\130\002\000\002\043\005\000\002" +
    "\043\004\000\002\131\002\000\002\043\005\000\002\132" +
    "\002\000\002\043\005\000\002\043\004\000\002\043\004" +
    "\000\002\043\004\000\002\043\002\000\002\133\002\000" +
    "\002\074\020\000\002\106\006\000\002\106\007\000\002" +
    "\106\007\000\002\106\007\000\002\134\002\000\002\100" +
    "\016\000\002\075\006\000\002\075\004\000\002\075\002" +
    "\000\002\120\003\000\002\120\002\000\002\121\005\000" +
    "\002\121\003\000\002\076\003\000\002\076\003\000\002" +
    "\076\003\000\002\076\003\000\002\076\003\000\002\076" +
    "\003\000\002\076\003\000\002\076\003\000\002\077\003" +
    "\000\002\077\003\000\002\077\003\000\002\077\003\000" +
    "\002\077\003\000\002\107\006\000\002\101\003\000\002" +
    "\101\005\000\002\101\005\000\002\102\003\000\002\102" +
    "\005\000\002\102\005\000\002\103\003\000\002\103\003" +
    "\000\002\103\003\000\002\103\003\000\002\103\003\000" +
    "\002\103\005\000\002\110\007\000\002\110\007\000\002" +
    "\110\007\000\002\110\007\000\002\110\007\000\002\111" +
    "\007\000\002\111\007\000\002\111\007\000\002\111\007" +
    "\000\002\112\004\000\002\113\005\000\002\113\002\000" +
    "\002\115\003\000\002\115\003\000\002\115\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d0\000\024\005\005\006\020\007\007\010\011\011" +
    "\024\012\030\013\017\015\012\016\022\001\002\000\026" +
    "\002\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\015\ufffd\016\ufffd\001\002\000\006\003\u01cb" +
    "\033\u01ca\001\002\000\010\003\u01c8\051\u01c7\072\u01c9\001" +
    "\002\000\006\003\117\033\115\001\002\000\010\003\u01c4" +
    "\051\u01c2\072\u01c3\001\002\000\006\003\060\033\057\001" +
    "\002\000\004\033\u01b4\001\002\000\026\002\000\005\005" +
    "\006\020\007\007\010\011\011\024\012\030\013\017\015" +
    "\012\016\022\001\002\000\026\002\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\015\ufffe\016" +
    "\ufffe\001\002\000\010\003\u01b1\051\u01af\072\u01b0\001\002" +
    "\000\026\002\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\012\ufffb\013\ufffb\015\ufffb\016\ufffb\001\002\000\006" +
    "\003\u01a3\033\u01a1\001\002\000\006\003\137\033\136\001" +
    "\002\000\010\003\u019e\051\u019c\072\u019d\001\002\000\004" +
    "\014\156\001\002\000\010\003\135\051\133\072\134\001" +
    "\002\000\006\003\125\033\124\001\002\000\010\003\114" +
    "\051\112\072\113\001\002\000\010\003\055\051\054\072" +
    "\056\001\002\000\026\002\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\013\ufffc\015\ufffc\016\ufffc\001" +
    "\002\000\010\003\034\033\033\063\035\001\002\000\004" +
    "\002\032\001\002\000\004\002\001\001\002\000\012\003" +
    "\uffb1\043\051\051\uffb1\072\uffb1\001\002\000\012\003\uffb1" +
    "\043\051\051\uffb1\072\uffb1\001\002\000\012\003\041\064" +
    "\043\075\042\076\044\001\002\000\010\003\uffb5\051\uffb5" +
    "\072\uffb5\001\002\000\006\051\045\064\046\001\002\000" +
    "\006\051\uffae\064\uffae\001\002\000\012\003\uffb7\051\uffb7" +
    "\064\uffb7\072\uffb7\001\002\000\012\003\uffb9\051\uffb9\064" +
    "\uffb9\072\uffb9\001\002\000\010\003\uffb0\051\uffb0\072\uffb0" +
    "\001\002\000\012\003\uffb8\051\uffb8\064\uffb8\072\uffb8\001" +
    "\002\000\010\003\041\075\042\076\044\001\002\000\010" +
    "\003\uffaf\051\uffaf\072\uffaf\001\002\000\006\051\uffad\064" +
    "\uffad\001\002\000\010\003\uffb3\051\uffb3\072\uffb3\001\002" +
    "\000\010\003\034\033\033\063\035\001\002\000\010\003" +
    "\uffb2\051\uffb2\072\uffb2\001\002\000\010\003\uffb4\051\uffb4" +
    "\072\uffb4\001\002\000\006\003\060\033\057\001\002\000" +
    "\062\002\ufff3\003\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3" +
    "\030\ufff3\031\ufff3\032\ufff3\033\ufff3\066\ufff3\001\002\000" +
    "\062\002\ufff4\003\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\032\ufff4\033\ufff4\066\ufff4\001\002\000" +
    "\012\003\uffc2\043\063\051\uffc2\072\uffc2\001\002\000\012" +
    "\003\uffc2\043\063\051\uffc2\072\uffc2\001\002\000\010\003" +
    "\uffc7\051\uffc7\072\uffc7\001\002\000\010\003\uffc4\051\uffc4" +
    "\072\uffc4\001\002\000\004\063\064\001\002\000\012\003" +
    "\066\064\070\077\067\100\072\001\002\000\010\003\uffc3" +
    "\051\uffc3\072\uffc3\001\002\000\004\073\106\001\002\000" +
    "\006\003\101\073\102\001\002\000\010\003\uffc1\051\uffc1" +
    "\072\uffc1\001\002\000\004\064\100\001\002\000\006\003" +
    "\073\073\074\001\002\000\004\100\077\001\002\000\006" +
    "\003\075\100\076\001\002\000\012\003\uffcd\051\uffcd\064" +
    "\uffcd\072\uffcd\001\002\000\012\003\uffcf\051\uffcf\064\uffcf" +
    "\072\uffcf\001\002\000\012\003\uffcc\051\uffcc\064\uffcc\072" +
    "\uffcc\001\002\000\010\003\uffc0\051\uffc0\072\uffc0\001\002" +
    "\000\004\077\105\001\002\000\006\003\103\077\104\001" +
    "\002\000\012\003\uffd1\051\uffd1\064\uffd1\072\uffd1\001\002" +
    "\000\012\003\uffd3\051\uffd3\064\uffd3\072\uffd3\001\002\000" +
    "\012\003\uffd0\051\uffd0\064\uffd0\072\uffd0\001\002\000\006" +
    "\077\107\100\110\001\002\000\012\003\uffd2\051\uffd2\064" +
    "\uffd2\072\uffd2\001\002\000\012\003\uffce\051\uffce\064\uffce" +
    "\072\uffce\001\002\000\010\003\uffc5\051\uffc5\072\uffc5\001" +
    "\002\000\006\003\117\033\115\001\002\000\062\002\ufff6" +
    "\003\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\022\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\066\ufff6\001\002\000\062\002\ufff5" +
    "\003\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\022\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031" +
    "\ufff5\032\ufff5\033\ufff5\066\ufff5\001\002\000\012\003\uffd4" +
    "\043\121\051\uffd4\072\uffd4\001\002\000\010\003\uffd9\051" +
    "\uffd9\072\uffd9\001\002\000\012\003\uffd4\043\121\051\uffd4" +
    "\072\uffd4\001\002\000\010\003\uffd6\051\uffd6\072\uffd6\001" +
    "\002\000\010\003\066\077\067\100\072\001\002\000\010" +
    "\003\uffd5\051\uffd5\072\uffd5\001\002\000\010\003\uffd7\051" +
    "\uffd7\072\uffd7\001\002\000\012\003\uffba\043\130\051\uffba" +
    "\072\uffba\001\002\000\012\003\uffba\043\130\051\uffba\072" +
    "\uffba\001\002\000\010\003\uffbe\051\uffbe\072\uffbe\001\002" +
    "\000\010\003\uffbc\051\uffbc\072\uffbc\001\002\000\010\003" +
    "\041\075\042\076\044\001\002\000\010\003\uffbb\051\uffbb" +
    "\072\uffbb\001\002\000\010\003\uffbd\051\uffbd\072\uffbd\001" +
    "\002\000\006\003\137\033\136\001\002\000\062\002\ufff8" +
    "\003\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031" +
    "\ufff8\032\ufff8\033\ufff8\066\ufff8\001\002\000\062\002\ufff7" +
    "\003\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\033\ufff7\066\ufff7\001\002\000\012\003\uffdc" +
    "\043\142\051\uffdc\072\uffdc\001\002\000\012\003\uffdc\043" +
    "\142\051\uffdc\072\uffdc\001\002\000\010\003\uffe1\051\uffe1" +
    "\072\uffe1\001\002\000\010\003\uffde\051\uffde\072\uffde\001" +
    "\002\000\004\063\143\001\002\000\010\003\146\064\150" +
    "\074\145\001\002\000\010\003\uffdd\051\uffdd\072\uffdd\001" +
    "\002\000\006\051\uffe5\064\uffe5\001\002\000\006\051\uffe2" +
    "\064\uffe2\001\002\000\006\051\151\064\152\001\002\000" +
    "\010\003\uffdb\051\uffdb\072\uffdb\001\002\000\006\003\154" +
    "\074\153\001\002\000\010\003\uffda\051\uffda\072\uffda\001" +
    "\002\000\006\051\uffe4\064\uffe4\001\002\000\006\051\uffe3" +
    "\064\uffe3\001\002\000\010\003\uffdf\051\uffdf\072\uffdf\001" +
    "\002\000\004\061\157\001\002\000\026\003\uff4a\005\uff4a" +
    "\006\uff4a\007\uff4a\010\uff4a\011\uff4a\012\uff4a\013\uff4a\051" +
    "\uff4a\062\uff4a\001\002\000\026\003\166\005\161\006\164" +
    "\007\172\010\170\011\162\012\171\013\165\051\uff46\062" +
    "\uff46\001\002\000\004\033\uff41\001\002\000\004\033\uff3d" +
    "\001\002\000\004\033\u019b\001\002\000\004\033\uff40\001" +
    "\002\000\004\033\uff3b\001\002\000\004\033\uff3a\001\002" +
    "\000\006\051\173\062\174\001\002\000\004\033\uff3e\001" +
    "\002\000\004\033\uff3c\001\002\000\004\033\uff3f\001\002" +
    "\000\022\003\166\005\161\006\164\007\172\010\170\011" +
    "\162\012\171\013\165\001\002\000\004\065\175\001\002" +
    "\000\044\003\uff51\005\uff51\006\uff51\007\uff51\010\uff51\011" +
    "\uff51\012\uff51\013\uff51\017\uff51\020\uff51\021\uff51\022\uff51" +
    "\024\uff51\025\uff51\026\uff51\027\uff51\033\uff51\001\002\000" +
    "\044\003\215\005\005\006\020\007\007\010\011\011\024" +
    "\012\030\013\017\017\205\020\177\021\216\022\206\024" +
    "\uff58\025\uff5b\026\210\027\uff56\033\207\001\002\000\006" +
    "\003\u018b\061\u018c\001\002\000\054\003\uff54\005\uff54\006" +
    "\uff54\007\uff54\010\uff54\011\uff54\012\uff54\013\uff54\017\uff54" +
    "\020\uff54\021\uff54\022\uff54\024\uff54\025\uff54\026\uff54\027" +
    "\uff54\030\uff54\031\uff54\032\uff54\033\uff54\066\uff54\001\002" +
    "\000\054\003\uff53\005\uff53\006\uff53\007\uff53\010\uff53\011" +
    "\uff53\012\uff53\013\uff53\017\uff53\020\uff53\021\uff53\022\uff53" +
    "\024\uff53\025\uff53\026\uff53\027\uff53\030\uff53\031\uff53\032" +
    "\uff53\033\uff53\066\uff53\001\002\000\004\027\u0170\001\002" +
    "\000\004\024\u0152\001\002\000\004\025\u013c\001\002\000" +
    "\014\003\u0137\033\u0134\074\u0135\075\u0138\076\u0139\001\002" +
    "\000\006\003\u0124\061\u0125\001\002\000\004\043\375\001" +
    "\002\000\006\003\353\065\354\001\002\000\054\003\uff5d" +
    "\005\uff5d\006\uff5d\007\uff5d\010\uff5d\011\uff5d\012\uff5d\013" +
    "\uff5d\017\uff5d\020\uff5d\021\uff5d\022\uff5d\024\uff5d\025\uff5d" +
    "\026\uff5d\027\uff5d\030\uff5d\031\uff5d\032\uff5d\033\uff5d\066" +
    "\uff5d\001\002\000\054\003\uff59\005\uff59\006\uff59\007\uff59" +
    "\010\uff59\011\uff59\012\uff59\013\uff59\017\uff59\020\uff59\021" +
    "\uff59\022\uff59\024\uff59\025\uff59\026\uff59\027\uff59\030\uff59" +
    "\031\uff59\032\uff59\033\uff59\066\uff59\001\002\000\054\003" +
    "\uff5c\005\uff5c\006\uff5c\007\uff5c\010\uff5c\011\uff5c\012\uff5c" +
    "\013\uff5c\017\uff5c\020\uff5c\021\uff5c\022\uff5c\024\uff5c\025" +
    "\uff5c\026\uff5c\027\uff5c\030\uff5c\031\uff5c\032\uff5c\033\uff5c" +
    "\066\uff5c\001\002\000\054\003\uff52\005\uff52\006\uff52\007" +
    "\uff52\010\uff52\011\uff52\012\uff52\013\uff52\017\uff52\020\uff52" +
    "\021\uff52\022\uff52\024\uff52\025\uff52\026\uff52\027\uff52\030" +
    "\uff52\031\uff52\032\uff52\033\uff52\066\uff52\001\002\000\006" +
    "\061\243\065\242\001\002\000\006\003\217\061\220\001" +
    "\002\000\010\003\223\033\221\102\222\001\002\000\010" +
    "\003\223\033\221\102\222\001\002\000\010\003\uff1b\041" +
    "\uff1b\062\uff1b\001\002\000\010\003\uff1a\041\uff1a\062\uff1a" +
    "\001\002\000\010\003\uff19\041\uff19\062\uff19\001\002\000" +
    "\006\003\232\062\233\001\002\000\010\003\uff1c\041\226" +
    "\062\uff1c\001\002\000\010\003\223\033\221\102\222\001" +
    "\002\000\006\003\uff1e\062\uff1e\001\002\000\010\003\uff1c" +
    "\041\226\062\uff1c\001\002\000\006\003\uff1d\062\uff1d\001" +
    "\002\000\004\072\236\001\002\000\006\003\235\072\234" +
    "\001\002\000\054\003\uff22\005\uff22\006\uff22\007\uff22\010" +
    "\uff22\011\uff22\012\uff22\013\uff22\017\uff22\020\uff22\021\uff22" +
    "\022\uff22\024\uff22\025\uff22\026\uff22\027\uff22\030\uff22\031" +
    "\uff22\032\uff22\033\uff22\066\uff22\001\002\000\054\003\uff1f" +
    "\005\uff1f\006\uff1f\007\uff1f\010\uff1f\011\uff1f\012\uff1f\013" +
    "\uff1f\017\uff1f\020\uff1f\021\uff1f\022\uff1f\024\uff1f\025\uff1f" +
    "\026\uff1f\027\uff1f\030\uff1f\031\uff1f\032\uff1f\033\uff1f\066" +
    "\uff1f\001\002\000\054\003\uff20\005\uff20\006\uff20\007\uff20" +
    "\010\uff20\011\uff20\012\uff20\013\uff20\017\uff20\020\uff20\021" +
    "\uff20\022\uff20\024\uff20\025\uff20\026\uff20\027\uff20\030\uff20" +
    "\031\uff20\032\uff20\033\uff20\066\uff20\001\002\000\004\062" +
    "\240\001\002\000\004\072\241\001\002\000\054\003\uff21" +
    "\005\uff21\006\uff21\007\uff21\010\uff21\011\uff21\012\uff21\013" +
    "\uff21\017\uff21\020\uff21\021\uff21\022\uff21\024\uff21\025\uff21" +
    "\026\uff21\027\uff21\030\uff21\031\uff21\032\uff21\033\uff21\066" +
    "\uff21\001\002\000\044\003\uff51\005\uff51\006\uff51\007\uff51" +
    "\010\uff51\011\uff51\012\uff51\013\uff51\020\uff51\021\uff51\022" +
    "\uff51\024\uff51\025\uff51\026\uff51\027\uff51\033\uff51\066\uff51" +
    "\001\002\000\014\003\247\033\244\074\245\075\250\076" +
    "\251\001\002\000\030\003\uff96\050\326\052\uff96\053\uff96" +
    "\054\334\055\333\056\332\057\331\060\330\062\uff96\067" +
    "\uff96\001\002\000\016\050\326\054\334\055\333\056\332" +
    "\057\331\060\330\001\002\000\014\003\uffa1\052\uffa1\053" +
    "\uffa1\062\uffa1\067\uffa1\001\002\000\014\003\uff98\052\uff98" +
    "\053\uff98\062\uff98\067\uff98\001\002\000\014\003\uff9a\052" +
    "\uff9a\053\uff9a\062\uff9a\067\uff9a\001\002\000\014\003\uff99" +
    "\052\uff99\053\uff99\062\uff99\067\uff99\001\002\000\012\003" +
    "\255\052\256\053\254\062\257\001\002\000\016\003\247" +
    "\033\244\061\323\074\245\075\250\076\251\001\002\000" +
    "\016\003\uff9e\033\uff9e\061\uff9e\074\uff9e\075\uff9e\076\uff9e" +
    "\001\002\000\016\003\uff9d\033\uff9d\061\uff9d\074\uff9d\075" +
    "\uff9d\076\uff9d\001\002\000\016\003\uff9f\033\uff9f\061\uff9f" +
    "\074\uff9f\075\uff9f\076\uff9f\001\002\000\004\065\260\001" +
    "\002\000\044\003\uff51\005\uff51\006\uff51\007\uff51\010\uff51" +
    "\011\uff51\012\uff51\013\uff51\020\uff51\021\uff51\022\uff51\024" +
    "\uff51\025\uff51\026\uff51\027\uff51\033\uff51\066\uff51\001\002" +
    "\000\044\003\215\005\005\006\020\007\007\010\011\011" +
    "\024\012\030\013\017\020\177\021\216\022\206\024\uff58" +
    "\025\uff5b\026\210\027\uff56\033\207\066\262\001\002\000" +
    "\056\003\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011\uff86" +
    "\012\uff86\013\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023" +
    "\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86" +
    "\032\uff86\033\uff86\066\uff86\001\002\000\056\003\uff89\005" +
    "\uff89\006\uff89\007\uff89\010\uff89\011\uff89\012\uff89\013\uff89" +
    "\017\uff89\020\uff89\021\uff89\022\uff89\023\264\024\uff89\025" +
    "\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89" +
    "\066\uff89\001\002\000\006\003\265\022\267\001\002\000" +
    "\004\061\314\001\002\000\056\003\uff87\005\uff87\006\uff87" +
    "\007\uff87\010\uff87\011\uff87\012\uff87\013\uff87\017\uff87\020" +
    "\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87\026\uff87" +
    "\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87\066\uff87\001" +
    "\002\000\006\003\270\061\271\001\002\000\014\003\247" +
    "\033\244\074\245\075\250\076\251\001\002\000\014\003" +
    "\247\033\244\074\245\075\250\076\251\001\002\000\012" +
    "\003\273\052\256\053\254\062\274\001\002\000\020\003" +
    "\uff9d\033\uff9d\061\uff9d\065\304\074\uff9d\075\uff9d\076\uff9d" +
    "\001\002\000\006\003\275\065\276\001\002\000\044\003" +
    "\uff51\005\uff51\006\uff51\007\uff51\010\uff51\011\uff51\012\uff51" +
    "\013\uff51\020\uff51\021\uff51\022\uff51\024\uff51\025\uff51\026" +
    "\uff51\027\uff51\033\uff51\066\uff51\001\002\000\044\003\uff51" +
    "\005\uff51\006\uff51\007\uff51\010\uff51\011\uff51\012\uff51\013" +
    "\uff51\020\uff51\021\uff51\022\uff51\024\uff51\025\uff51\026\uff51" +
    "\027\uff51\033\uff51\066\uff51\001\002\000\044\003\301\005" +
    "\005\006\020\007\007\010\011\011\024\012\030\013\017" +
    "\020\177\021\216\022\206\024\uff58\025\uff5b\026\210\027" +
    "\uff56\033\207\066\300\001\002\000\056\003\uff85\005\uff85" +
    "\006\uff85\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85\017" +
    "\uff85\020\uff85\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85" +
    "\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85\033\uff85\066" +
    "\uff85\001\002\000\062\003\uff80\005\uff80\006\uff80\007\uff80" +
    "\010\uff80\011\uff80\012\uff80\013\uff80\017\uff80\020\uff80\021" +
    "\uff80\022\uff80\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80" +
    "\030\uff80\031\uff80\032\uff80\033\uff80\061\243\065\242\066" +
    "\uff80\001\002\000\044\003\215\005\005\006\020\007\007" +
    "\010\011\011\024\012\030\013\017\020\177\021\216\022" +
    "\206\024\uff58\025\uff5b\026\210\027\uff56\033\207\066\303" +
    "\001\002\000\056\003\uff81\005\uff81\006\uff81\007\uff81\010" +
    "\uff81\011\uff81\012\uff81\013\uff81\017\uff81\020\uff81\021\uff81" +
    "\022\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030" +
    "\uff81\031\uff81\032\uff81\033\uff81\066\uff81\001\002\000\044" +
    "\003\uff51\005\uff51\006\uff51\007\uff51\010\uff51\011\uff51\012" +
    "\uff51\013\uff51\020\uff51\021\uff51\022\uff51\024\uff51\025\uff51" +
    "\026\uff51\027\uff51\033\uff51\066\uff51\001\002\000\044\003" +
    "\215\005\005\006\020\007\007\010\011\011\024\012\030" +
    "\013\017\020\177\021\216\022\206\024\uff58\025\uff5b\026" +
    "\210\027\uff56\033\207\066\306\001\002\000\056\003\uff82" +
    "\005\uff82\006\uff82\007\uff82\010\uff82\011\uff82\012\uff82\013" +
    "\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82" +
    "\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82\032\uff82\033" +
    "\uff82\066\uff82\001\002\000\012\003\255\052\256\053\254" +
    "\062\310\001\002\000\004\065\311\001\002\000\044\003" +
    "\uff51\005\uff51\006\uff51\007\uff51\010\uff51\011\uff51\012\uff51" +
    "\013\uff51\020\uff51\021\uff51\022\uff51\024\uff51\025\uff51\026" +
    "\uff51\027\uff51\033\uff51\066\uff51\001\002\000\044\003\215" +
    "\005\005\006\020\007\007\010\011\011\024\012\030\013" +
    "\017\020\177\021\216\022\206\024\uff58\025\uff5b\026\210" +
    "\027\uff56\033\207\066\313\001\002\000\056\003\uff83\005" +
    "\uff83\006\uff83\007\uff83\010\uff83\011\uff83\012\uff83\013\uff83" +
    "\017\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024\uff83\025" +
    "\uff83\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83" +
    "\066\uff83\001\002\000\014\003\247\033\244\074\245\075" +
    "\250\076\251\001\002\000\012\003\255\052\256\053\254" +
    "\062\316\001\002\000\004\065\317\001\002\000\044\003" +
    "\uff51\005\uff51\006\uff51\007\uff51\010\uff51\011\uff51\012\uff51" +
    "\013\uff51\020\uff51\021\uff51\022\uff51\024\uff51\025\uff51\026" +
    "\uff51\027\uff51\033\uff51\066\uff51\001\002\000\044\003\215" +
    "\005\005\006\020\007\007\010\011\011\024\012\030\013" +
    "\017\020\177\021\216\022\206\024\uff58\025\uff5b\026\210" +
    "\027\uff56\033\207\066\321\001\002\000\056\003\uff84\005" +
    "\uff84\006\uff84\007\uff84\010\uff84\011\uff84\012\uff84\013\uff84" +
    "\017\uff84\020\uff84\021\uff84\022\uff84\023\uff84\024\uff84\025" +
    "\uff84\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84" +
    "\066\uff84\001\002\000\014\003\uffa2\052\uffa2\053\uffa2\062" +
    "\uffa2\067\uffa2\001\002\000\014\003\247\033\244\074\245" +
    "\075\250\076\251\001\002\000\004\062\325\001\002\000" +
    "\014\003\uffa0\052\uffa0\053\uffa0\062\uffa0\067\uffa0\001\002" +
    "\000\010\003\uff92\033\uff92\074\uff92\001\002\000\010\003" +
    "\340\033\335\074\336\001\002\000\010\003\uff8d\033\uff8d" +
    "\074\uff8d\001\002\000\010\003\uff8e\033\uff8e\074\uff8e\001" +
    "\002\000\010\003\uff8f\033\uff8f\074\uff8f\001\002\000\010" +
    "\003\uff90\033\uff90\074\uff90\001\002\000\010\003\uff91\033" +
    "\uff91\074\uff91\001\002\000\014\003\uff95\052\uff95\053\uff95" +
    "\062\uff95\067\uff95\001\002\000\014\003\uff94\052\uff94\053" +
    "\uff94\062\uff94\067\uff94\001\002\000\014\003\uff9b\052\uff9b" +
    "\053\uff9b\062\uff9b\067\uff9b\001\002\000\014\003\uff93\052" +
    "\uff93\053\uff93\062\uff93\067\uff93\001\002\000\010\003\340" +
    "\033\335\074\336\001\002\000\014\003\uff9c\052\uff9c\053" +
    "\uff9c\062\uff9c\067\uff9c\001\002\000\014\003\uff97\052\uff97" +
    "\053\uff97\062\uff97\067\uff97\001\002\000\044\003\215\005" +
    "\005\006\020\007\007\010\011\011\024\012\030\013\017" +
    "\020\177\021\216\022\206\024\uff58\025\uff5b\026\210\027" +
    "\uff56\033\207\066\345\001\002\000\004\025\346\001\002" +
    "\000\004\061\347\001\002\000\014\003\247\033\244\074" +
    "\245\075\250\076\251\001\002\000\012\003\255\052\256" +
    "\053\254\062\351\001\002\000\004\072\352\001\002\000" +
    "\054\003\uff77\005\uff77\006\uff77\007\uff77\010\uff77\011\uff77" +
    "\012\uff77\013\uff77\017\uff77\020\uff77\021\uff77\022\uff77\024" +
    "\uff77\025\uff77\026\uff77\027\uff77\030\uff77\031\uff77\032\uff77" +
    "\033\uff77\066\uff77\001\002\000\044\003\uff51\005\uff51\006" +
    "\uff51\007\uff51\010\uff51\011\uff51\012\uff51\013\uff51\020\uff51" +
    "\021\uff51\022\uff51\024\uff51\025\uff51\026\uff51\027\uff51\033" +
    "\uff51\066\uff51\001\002\000\044\003\uff7a\005\uff7a\006\uff7a" +
    "\007\uff7a\010\uff7a\011\uff7a\012\uff7a\013\uff7a\020\uff7a\021" +
    "\uff7a\022\uff7a\024\uff7a\025\uff7a\026\uff7a\027\uff7a\033\uff7a" +
    "\066\uff7a\001\002\000\044\003\uff51\005\uff51\006\uff51\007" +
    "\uff51\010\uff51\011\uff51\012\uff51\013\uff51\020\uff51\021\uff51" +
    "\022\uff51\024\uff51\025\uff51\026\uff51\027\uff51\033\uff51\066" +
    "\uff51\001\002\000\044\003\215\005\005\006\020\007\007" +
    "\010\011\011\024\012\030\013\017\020\177\021\216\022" +
    "\206\024\uff58\025\uff5b\026\210\027\uff56\033\207\066\uff79" +
    "\001\002\000\004\066\360\001\002\000\004\025\361\001" +
    "\002\000\004\061\362\001\002\000\014\003\247\033\244" +
    "\074\245\075\250\076\251\001\002\000\012\003\255\052" +
    "\256\053\254\062\364\001\002\000\004\072\365\001\002" +
    "\000\054\003\uff78\005\uff78\006\uff78\007\uff78\010\uff78\011" +
    "\uff78\012\uff78\013\uff78\017\uff78\020\uff78\021\uff78\022\uff78" +
    "\024\uff78\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032" +
    "\uff78\033\uff78\066\uff78\001\002\000\044\003\215\005\005" +
    "\006\020\007\007\010\011\011\024\012\030\013\017\020" +
    "\177\021\216\022\206\024\uff58\025\uff5b\026\210\027\uff56" +
    "\033\207\066\367\001\002\000\004\025\370\001\002\000" +
    "\004\061\371\001\002\000\014\003\247\033\244\074\245" +
    "\075\250\076\251\001\002\000\012\003\255\052\256\053" +
    "\254\062\373\001\002\000\004\072\374\001\002\000\054" +
    "\003\uff76\005\uff76\006\uff76\007\uff76\010\uff76\011\uff76\012" +
    "\uff76\013\uff76\017\uff76\020\uff76\021\uff76\022\uff76\024\uff76" +
    "\025\uff76\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76\033" +
    "\uff76\066\uff76\001\002\000\014\033\u0104\061\u0102\074\376" +
    "\075\u0101\076\u0103\001\002\000\016\037\uff2d\040\uff2d\041" +
    "\uff2d\042\uff2d\062\uff2d\072\uff2d\001\002\000\016\037\uff29" +
    "\040\uff29\041\uff29\042\uff29\062\uff29\072\uff29\001\002\000" +
    "\016\037\u010b\040\u010c\041\uff33\042\uff33\062\uff33\072\uff33" +
    "\001\002\000\016\037\uff2b\040\uff2b\041\uff2b\042\uff2b\062" +
    "\uff2b\072\uff2b\001\002\000\014\033\u0104\061\u0102\074\376" +
    "\075\u0101\076\u0103\001\002\000\016\037\uff2a\040\uff2a\041" +
    "\uff2a\042\uff2a\062\uff2a\072\uff2a\001\002\000\024\003\u0110" +
    "\014\u0112\037\uff2c\040\uff2c\041\uff2c\042\uff2c\061\u0111\062" +
    "\uff2c\072\uff2c\001\002\000\016\037\uff30\040\uff30\041\uff30" +
    "\042\uff30\062\uff30\072\uff30\001\002\000\010\041\u0107\042" +
    "\u0108\072\u0109\001\002\000\014\033\u0104\061\u0102\074\376" +
    "\075\u0101\076\u0103\001\002\000\014\033\u0104\061\u0102\074" +
    "\376\075\u0101\076\u0103\001\002\000\054\003\uff34\005\uff34" +
    "\006\uff34\007\uff34\010\uff34\011\uff34\012\uff34\013\uff34\017" +
    "\uff34\020\uff34\021\uff34\022\uff34\024\uff34\025\uff34\026\uff34" +
    "\027\uff34\030\uff34\031\uff34\032\uff34\033\uff34\066\uff34\001" +
    "\002\000\016\037\u010b\040\u010c\041\uff31\042\uff31\062\uff31" +
    "\072\uff31\001\002\000\014\033\u0104\061\u0102\074\376\075" +
    "\u0101\076\u0103\001\002\000\014\033\u0104\061\u0102\074\376" +
    "\075\u0101\076\u0103\001\002\000\016\037\uff2e\040\uff2e\041" +
    "\uff2e\042\uff2e\062\uff2e\072\uff2e\001\002\000\016\037\uff2f" +
    "\040\uff2f\041\uff2f\042\uff2f\062\uff2f\072\uff2f\001\002\000" +
    "\016\037\u010b\040\u010c\041\uff32\042\uff32\062\uff32\072\uff32" +
    "\001\002\000\004\061\u011f\001\002\000\006\033\u0115\062" +
    "\uff44\001\002\000\006\003\u0113\061\u0114\001\002\000\006" +
    "\033\u0115\062\uff44\001\002\000\006\003\uff44\033\u0115\001" +
    "\002\000\010\003\uff42\051\uff42\062\uff42\001\002\000\004" +
    "\003\u011a\001\002\000\010\003\uff45\051\u0118\062\uff45\001" +
    "\002\000\004\033\u0119\001\002\000\010\003\uff43\051\uff43" +
    "\062\uff43\001\002\000\016\037\uff4b\040\uff4b\041\uff4b\042" +
    "\uff4b\062\uff4b\072\uff4b\001\002\000\004\062\u011c\001\002" +
    "\000\016\037\uff4c\040\uff4c\041\uff4c\042\uff4c\062\uff4c\072" +
    "\uff4c\001\002\000\004\062\u011e\001\002\000\016\037\uff4e" +
    "\040\uff4e\041\uff4e\042\uff4e\062\uff4e\072\uff4e\001\002\000" +
    "\006\033\u0115\062\uff44\001\002\000\004\062\u0121\001\002" +
    "\000\016\037\uff4d\040\uff4d\041\uff4d\042\uff4d\062\uff4d\072" +
    "\uff4d\001\002\000\010\041\u0107\042\u0108\062\u0123\001\002" +
    "\000\016\037\uff28\040\uff28\041\uff28\042\uff28\062\uff28\072" +
    "\uff28\001\002\000\014\003\247\033\244\074\245\075\250" +
    "\076\251\001\002\000\014\003\247\033\244\074\245\075" +
    "\250\076\251\001\002\000\012\003\255\052\256\053\254" +
    "\062\u0127\001\002\000\004\065\u0128\001\002\000\044\003" +
    "\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c" +
    "\013\uff8c\020\uff8c\021\uff8c\022\uff8c\024\uff8c\025\uff8c\026" +
    "\uff8c\027\uff8c\033\uff8c\066\uff8c\001\002\000\044\003\uff51" +
    "\005\uff51\006\uff51\007\uff51\010\uff51\011\uff51\012\uff51\013" +
    "\uff51\020\uff51\021\uff51\022\uff51\024\uff51\025\uff51\026\uff51" +
    "\027\uff51\033\uff51\066\uff51\001\002\000\044\003\215\005" +
    "\005\006\020\007\007\010\011\011\024\012\030\013\017" +
    "\020\177\021\216\022\206\024\uff58\025\uff5b\026\210\027" +
    "\uff56\033\207\066\uff8b\001\002\000\004\066\u012c\001\002" +
    "\000\056\003\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011" +
    "\uff86\012\uff86\013\uff86\017\uff86\020\uff86\021\uff86\022\uff86" +
    "\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031" +
    "\uff86\032\uff86\033\uff86\066\uff86\001\002\000\056\003\uff8a" +
    "\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013" +
    "\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\264\024\uff8a" +
    "\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033" +
    "\uff8a\066\uff8a\001\002\000\012\003\255\052\256\053\254" +
    "\062\u012f\001\002\000\004\065\u0130\001\002\000\044\003" +
    "\uff51\005\uff51\006\uff51\007\uff51\010\uff51\011\uff51\012\uff51" +
    "\013\uff51\020\uff51\021\uff51\022\uff51\024\uff51\025\uff51\026" +
    "\uff51\027\uff51\033\uff51\066\uff51\001\002\000\044\003\215" +
    "\005\005\006\020\007\007\010\011\011\024\012\030\013" +
    "\017\020\177\021\216\022\206\024\uff58\025\uff5b\026\210" +
    "\027\uff56\033\207\066\u0132\001\002\000\056\003\uff86\005" +
    "\uff86\006\uff86\007\uff86\010\uff86\011\uff86\012\uff86\013\uff86" +
    "\017\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86\025" +
    "\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86" +
    "\066\uff86\001\002\000\056\003\uff88\005\uff88\006\uff88\007" +
    "\uff88\010\uff88\011\uff88\012\uff88\013\uff88\017\uff88\020\uff88" +
    "\021\uff88\022\uff88\023\264\024\uff88\025\uff88\026\uff88\027" +
    "\uff88\030\uff88\031\uff88\032\uff88\033\uff88\066\uff88\001\002" +
    "\000\004\072\uff39\001\002\000\004\072\uff36\001\002\000" +
    "\004\072\u013a\001\002\000\004\072\uff35\001\002\000\004" +
    "\072\uff38\001\002\000\004\072\uff37\001\002\000\004\066" +
    "\u013b\001\002\000\026\002\uff49\005\uff49\006\uff49\007\uff49" +
    "\010\uff49\011\uff49\012\uff49\013\uff49\015\uff49\016\uff49\001" +
    "\002\000\006\003\u013e\061\u013f\001\002\000\054\003\uff5a" +
    "\005\uff5a\006\uff5a\007\uff5a\010\uff5a\011\uff5a\012\uff5a\013" +
    "\uff5a\017\uff5a\020\uff5a\021\uff5a\022\uff5a\024\uff5a\025\uff5a" +
    "\026\uff5a\027\uff5a\030\uff5a\031\uff5a\032\uff5a\033\uff5a\066" +
    "\uff5a\001\002\000\014\003\247\033\244\074\245\075\250" +
    "\076\251\001\002\000\014\003\247\033\244\074\245\075" +
    "\250\076\251\001\002\000\012\003\u0141\052\256\053\254" +
    "\062\u0142\001\002\000\020\003\uff9d\033\uff9d\061\uff9d\065" +
    "\u014a\074\uff9d\075\uff9d\076\uff9d\001\002\000\006\003\u0143" +
    "\065\u0144\001\002\000\044\003\uff51\005\uff51\006\uff51\007" +
    "\uff51\010\uff51\011\uff51\012\uff51\013\uff51\020\uff51\021\uff51" +
    "\022\uff51\024\uff51\025\uff51\026\uff51\027\uff51\033\uff51\066" +
    "\uff51\001\002\000\044\003\uff51\005\uff51\006\uff51\007\uff51" +
    "\010\uff51\011\uff51\012\uff51\013\uff51\020\uff51\021\uff51\022" +
    "\uff51\024\uff51\025\uff51\026\uff51\027\uff51\033\uff51\066\uff51" +
    "\001\002\000\044\003\u0147\005\005\006\020\007\007\010" +
    "\011\011\024\012\030\013\017\020\177\021\216\022\206" +
    "\024\uff58\025\uff5b\026\210\027\uff56\033\207\066\u0146\001" +
    "\002\000\054\003\uff7f\005\uff7f\006\uff7f\007\uff7f\010\uff7f" +
    "\011\uff7f\012\uff7f\013\uff7f\017\uff7f\020\uff7f\021\uff7f\022" +
    "\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f" +
    "\032\uff7f\033\uff7f\066\uff7f\001\002\000\060\003\uff7b\005" +
    "\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012\uff7b\013\uff7b" +
    "\017\uff7b\020\uff7b\021\uff7b\022\uff7b\024\uff7b\025\uff7b\026" +
    "\uff7b\027\uff7b\030\uff7b\031\uff7b\032\uff7b\033\uff7b\061\243" +
    "\065\242\066\uff7b\001\002\000\044\003\215\005\005\006" +
    "\020\007\007\010\011\011\024\012\030\013\017\020\177" +
    "\021\216\022\206\024\uff58\025\uff5b\026\210\027\uff56\033" +
    "\207\066\u0149\001\002\000\054\003\uff7c\005\uff7c\006\uff7c" +
    "\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\017\uff7c\020" +
    "\uff7c\021\uff7c\022\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c" +
    "\030\uff7c\031\uff7c\032\uff7c\033\uff7c\066\uff7c\001\002\000" +
    "\044\003\uff51\005\uff51\006\uff51\007\uff51\010\uff51\011\uff51" +
    "\012\uff51\013\uff51\020\uff51\021\uff51\022\uff51\024\uff51\025" +
    "\uff51\026\uff51\027\uff51\033\uff51\066\uff51\001\002\000\044" +
    "\003\215\005\005\006\020\007\007\010\011\011\024\012" +
    "\030\013\017\020\177\021\216\022\206\024\uff58\025\uff5b" +
    "\026\210\027\uff56\033\207\066\u014c\001\002\000\054\003" +
    "\uff7d\005\uff7d\006\uff7d\007\uff7d\010\uff7d\011\uff7d\012\uff7d" +
    "\013\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\024\uff7d\025" +
    "\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d" +
    "\066\uff7d\001\002\000\012\003\255\052\256\053\254\062" +
    "\u014e\001\002\000\004\065\u014f\001\002\000\044\003\uff51" +
    "\005\uff51\006\uff51\007\uff51\010\uff51\011\uff51\012\uff51\013" +
    "\uff51\020\uff51\021\uff51\022\uff51\024\uff51\025\uff51\026\uff51" +
    "\027\uff51\033\uff51\066\uff51\001\002\000\044\003\215\005" +
    "\005\006\020\007\007\010\011\011\024\012\030\013\017" +
    "\020\177\021\216\022\206\024\uff58\025\uff5b\026\210\027" +
    "\uff56\033\207\066\u0151\001\002\000\054\003\uff7e\005\uff7e" +
    "\006\uff7e\007\uff7e\010\uff7e\011\uff7e\012\uff7e\013\uff7e\017" +
    "\uff7e\020\uff7e\021\uff7e\022\uff7e\024\uff7e\025\uff7e\026\uff7e" +
    "\027\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\066\uff7e\001" +
    "\002\000\004\061\u0154\001\002\000\054\003\uff57\005\uff57" +
    "\006\uff57\007\uff57\010\uff57\011\uff57\012\uff57\013\uff57\017" +
    "\uff57\020\uff57\021\uff57\022\uff57\024\uff57\025\uff57\026\uff57" +
    "\027\uff57\030\uff57\031\uff57\032\uff57\033\uff57\066\uff57\001" +
    "\002\000\010\005\u0155\051\uff6e\067\uff6e\001\002\000\006" +
    "\003\u0166\033\u0165\001\002\000\006\051\u0157\067\u0158\001" +
    "\002\000\006\003\u0166\033\u0165\001\002\000\014\003\247" +
    "\033\244\074\245\075\250\076\251\001\002\000\012\003" +
    "\255\052\256\053\254\067\u015a\001\002\000\004\033\u015b" +
    "\001\002\000\012\003\u015f\034\u015d\035\u015e\036\u015c\001" +
    "\002\000\004\062\uff72\001\002\000\004\062\uff74\001\002" +
    "\000\004\062\uff73\001\002\000\004\062\uff71\001\002\000" +
    "\004\062\u0161\001\002\000\004\065\u0162\001\002\000\044" +
    "\003\uff51\005\uff51\006\uff51\007\uff51\010\uff51\011\uff51\012" +
    "\uff51\013\uff51\020\uff51\021\uff51\022\uff51\024\uff51\025\uff51" +
    "\026\uff51\027\uff51\033\uff51\066\uff51\001\002\000\044\003" +
    "\215\005\005\006\020\007\007\010\011\011\024\012\030" +
    "\013\017\020\177\021\216\022\206\024\uff58\025\uff5b\026" +
    "\210\027\uff56\033\207\066\u0164\001\002\000\054\003\uff75" +
    "\005\uff75\006\uff75\007\uff75\010\uff75\011\uff75\012\uff75\013" +
    "\uff75\017\uff75\020\uff75\021\uff75\022\uff75\024\uff75\025\uff75" +
    "\026\uff75\027\uff75\030\uff75\031\uff75\032\uff75\033\uff75\066" +
    "\uff75\001\002\000\006\003\u016a\043\u016b\001\002\000\004" +
    "\043\u0168\001\002\000\006\051\uff70\067\uff70\001\002\000" +
    "\004\074\u0169\001\002\000\006\051\uff6c\067\uff6c\001\002" +
    "\000\004\074\u016e\001\002\000\006\003\u016d\074\u016c\001" +
    "\002\000\006\051\uff6d\067\uff6d\001\002\000\006\051\uff6a" +
    "\067\uff6a\001\002\000\006\051\uff6b\067\uff6b\001\002\000" +
    "\006\051\uff6f\067\uff6f\001\002\000\004\061\u0172\001\002" +
    "\000\054\003\uff55\005\uff55\006\uff55\007\uff55\010\uff55\011" +
    "\uff55\012\uff55\013\uff55\017\uff55\020\uff55\021\uff55\022\uff55" +
    "\024\uff55\025\uff55\026\uff55\027\uff55\030\uff55\031\uff55\032" +
    "\uff55\033\uff55\066\uff55\001\002\000\004\033\u0173\001\002" +
    "\000\004\062\u0174\001\002\000\004\065\u0175\001\002\000" +
    "\010\030\u0179\031\uff67\066\uff67\001\002\000\006\031\u0185" +
    "\066\uff5e\001\002\000\010\030\u0179\031\uff68\066\uff68\001" +
    "\002\000\010\030\uff65\031\uff65\066\uff65\001\002\000\006" +
    "\074\u017b\077\u017c\001\002\000\004\070\u017f\001\002\000" +
    "\004\070\uff63\001\002\000\004\073\u017d\001\002\000\004" +
    "\077\u017e\001\002\000\004\070\uff62\001\002\000\052\003" +
    "\uff51\005\uff51\006\uff51\007\uff51\010\uff51\011\uff51\012\uff51" +
    "\013\uff51\020\uff51\021\uff51\022\uff51\024\uff51\025\uff51\026" +
    "\uff51\027\uff51\030\uff51\031\uff51\032\uff51\033\uff51\066\uff51" +
    "\001\002\000\052\003\215\005\005\006\020\007\007\010" +
    "\011\011\024\012\030\013\017\020\177\021\216\022\206" +
    "\024\uff58\025\uff5b\026\210\027\uff56\030\uff60\031\uff60\032" +
    "\u0181\033\207\066\uff60\001\002\000\004\072\u0183\001\002" +
    "\000\010\030\uff64\031\uff64\066\uff64\001\002\000\010\030" +
    "\uff61\031\uff61\066\uff61\001\002\000\010\030\uff66\031\uff66" +
    "\066\uff66\001\002\000\004\070\u0188\001\002\000\004\066" +
    "\u0187\001\002\000\054\003\uff69\005\uff69\006\uff69\007\uff69" +
    "\010\uff69\011\uff69\012\uff69\013\uff69\017\uff69\020\uff69\021" +
    "\uff69\022\uff69\024\uff69\025\uff69\026\uff69\027\uff69\030\uff69" +
    "\031\uff69\032\uff69\033\uff69\066\uff69\001\002\000\046\003" +
    "\uff51\005\uff51\006\uff51\007\uff51\010\uff51\011\uff51\012\uff51" +
    "\013\uff51\020\uff51\021\uff51\022\uff51\024\uff51\025\uff51\026" +
    "\uff51\027\uff51\032\uff51\033\uff51\066\uff51\001\002\000\046" +
    "\003\215\005\005\006\020\007\007\010\011\011\024\012" +
    "\030\013\017\020\177\021\216\022\206\024\uff58\025\uff5b" +
    "\026\210\027\uff56\032\u0181\033\207\066\uff60\001\002\000" +
    "\004\066\uff5f\001\002\000\004\033\u0196\001\002\000\006" +
    "\003\u018e\033\u018d\001\002\000\006\003\u0191\062\u0192\001" +
    "\002\000\004\062\u018f\001\002\000\004\072\u0190\001\002" +
    "\000\054\003\uff25\005\uff25\006\uff25\007\uff25\010\uff25\011" +
    "\uff25\012\uff25\013\uff25\017\uff25\020\uff25\021\uff25\022\uff25" +
    "\024\uff25\025\uff25\026\uff25\027\uff25\030\uff25\031\uff25\032" +
    "\uff25\033\uff25\066\uff25\001\002\000\004\072\u0195\001\002" +
    "\000\006\003\u0193\072\u0194\001\002\000\054\003\uff23\005" +
    "\uff23\006\uff23\007\uff23\010\uff23\011\uff23\012\uff23\013\uff23" +
    "\017\uff23\020\uff23\021\uff23\022\uff23\024\uff23\025\uff23\026" +
    "\uff23\027\uff23\030\uff23\031\uff23\032\uff23\033\uff23\066\uff23" +
    "\001\002\000\054\003\uff27\005\uff27\006\uff27\007\uff27\010" +
    "\uff27\011\uff27\012\uff27\013\uff27\017\uff27\020\uff27\021\uff27" +
    "\022\uff27\024\uff27\025\uff27\026\uff27\027\uff27\030\uff27\031" +
    "\uff27\032\uff27\033\uff27\066\uff27\001\002\000\054\003\uff24" +
    "\005\uff24\006\uff24\007\uff24\010\uff24\011\uff24\012\uff24\013" +
    "\uff24\017\uff24\020\uff24\021\uff24\022\uff24\024\uff24\025\uff24" +
    "\026\uff24\027\uff24\030\uff24\031\uff24\032\uff24\033\uff24\066" +
    "\uff24\001\002\000\004\062\u0197\001\002\000\004\072\u0198" +
    "\001\002\000\054\003\uff26\005\uff26\006\uff26\007\uff26\010" +
    "\uff26\011\uff26\012\uff26\013\uff26\017\uff26\020\uff26\021\uff26" +
    "\022\uff26\024\uff26\025\uff26\026\uff26\027\uff26\030\uff26\031" +
    "\uff26\032\uff26\033\uff26\066\uff26\001\002\000\004\033\u019a" +
    "\001\002\000\006\051\uff48\062\uff48\001\002\000\006\051" +
    "\uff47\062\uff47\001\002\000\010\003\034\033\033\063\035" +
    "\001\002\000\062\002\ufff0\003\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\066\ufff0" +
    "\001\002\000\062\002\uffef\003\uffef\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\011\uffef\012\uffef\013\uffef\015\uffef\016\uffef" +
    "\017\uffef\020\uffef\021\uffef\022\uffef\024\uffef\025\uffef\026" +
    "\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\066\uffef" +
    "\001\002\000\010\003\uffb6\051\uffb6\072\uffb6\001\002\000" +
    "\010\003\uffe0\051\uffe0\072\uffe0\001\002\000\012\003\uffa7" +
    "\043\u01a5\051\uffa7\072\uffa7\001\002\000\010\003\uffab\051" +
    "\uffab\072\uffab\001\002\000\012\003\uffa7\043\u01a5\051\uffa7" +
    "\072\uffa7\001\002\000\010\003\uffa9\051\uffa9\072\uffa9\001" +
    "\002\000\004\100\u01a6\001\002\000\006\003\u01a9\033\u01a7" +
    "\001\002\000\010\033\uffa5\051\uffa5\100\uffa5\001\002\000" +
    "\010\033\u01aa\051\u01ab\100\u01ac\001\002\000\010\033\uffa3" +
    "\051\uffa3\100\uffa3\001\002\000\010\033\uffa6\051\uffa6\100" +
    "\uffa6\001\002\000\004\003\u01ad\001\002\000\010\003\uffa8" +
    "\051\uffa8\072\uffa8\001\002\000\010\033\uffa4\051\uffa4\100" +
    "\uffa4\001\002\000\010\003\uffaa\051\uffaa\072\uffaa\001\002" +
    "\000\006\003\125\033\124\001\002\000\062\002\ufff2\003" +
    "\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2" +
    "\013\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2" +
    "\032\ufff2\033\ufff2\066\ufff2\001\002\000\062\002\ufff1\003" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022" +
    "\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1" +
    "\032\ufff1\033\ufff1\066\ufff1\001\002\000\010\003\uffbf\051" +
    "\uffbf\072\uffbf\001\002\000\026\002\uffff\005\uffff\006\uffff" +
    "\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff\015\uffff\016" +
    "\uffff\001\002\000\004\014\uff50\001\002\000\004\014\u01b6" +
    "\001\002\000\004\061\u01b7\001\002\000\026\003\166\005" +
    "\161\006\164\007\172\010\170\011\162\012\171\013\165" +
    "\051\uff46\062\uff46\001\002\000\006\051\173\062\u01b9\001" +
    "\002\000\004\065\u01ba\001\002\000\044\003\uff51\005\uff51" +
    "\006\uff51\007\uff51\010\uff51\011\uff51\012\uff51\013\uff51\017" +
    "\uff51\020\uff51\021\uff51\022\uff51\024\uff51\025\uff51\026\uff51" +
    "\027\uff51\033\uff51\001\002\000\044\003\215\005\005\006" +
    "\020\007\007\010\011\011\024\012\030\013\017\017\u01bc" +
    "\020\177\021\216\022\206\024\uff58\025\uff5b\026\210\027" +
    "\uff56\033\207\001\002\000\014\003\u0137\033\u0134\074\u0135" +
    "\075\u0138\076\u0139\001\002\000\004\072\u01be\001\002\000" +
    "\004\066\u01bf\001\002\000\004\072\u01c0\001\002\000\026" +
    "\002\uff4f\005\uff4f\006\uff4f\007\uff4f\010\uff4f\011\uff4f\012" +
    "\uff4f\013\uff4f\015\uff4f\016\uff4f\001\002\000\010\003\uffc6" +
    "\051\uffc6\072\uffc6\001\002\000\006\003\u01a3\033\u01a1\001" +
    "\002\000\062\002\uffee\003\uffee\005\uffee\006\uffee\007\uffee" +
    "\010\uffee\011\uffee\012\uffee\013\uffee\015\uffee\016\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\024\uffee\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\066\uffee\001" +
    "\002\000\062\002\uffed\003\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\012\uffed\013\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\024\uffed\025\uffed\026\uffed" +
    "\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\066\uffed\001" +
    "\002\000\010\003\uffac\051\uffac\072\uffac\001\002\000\010" +
    "\003\uffd8\051\uffd8\072\uffd8\001\002\000\006\003\u01cb\033" +
    "\u01ca\001\002\000\062\002\ufff9\003\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\015\ufff9\016" +
    "\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\024\ufff9\025\ufff9" +
    "\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\066" +
    "\ufff9\001\002\000\062\002\ufffa\003\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\066" +
    "\ufffa\001\002\000\012\003\uffe6\043\u01ce\051\uffe6\072\uffe6" +
    "\001\002\000\012\003\uffe6\043\u01ce\051\uffe6\072\uffe6\001" +
    "\002\000\010\003\uffec\051\uffec\072\uffec\001\002\000\010" +
    "\003\uffe9\051\uffe9\072\uffe9\001\002\000\006\003\u01d0\074" +
    "\u01cf\001\002\000\010\003\uffe8\051\uffe8\072\uffe8\001\002" +
    "\000\010\003\uffe7\051\uffe7\072\uffe7\001\002\000\010\003" +
    "\uffea\051\uffea\072\uffea\001\002\000\010\003\uffeb\051\uffeb" +
    "\072\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d0\000\034\002\030\003\015\004\005\012\024\017" +
    "\014\025\007\031\022\034\025\037\020\074\003\100\026" +
    "\122\013\123\012\001\001\000\002\001\001\000\004\005" +
    "\u01d1\001\001\000\002\001\001\000\004\013\u01c5\001\001" +
    "\000\002\001\001\000\004\035\u01c0\001\001\000\002\001" +
    "\001\000\030\003\015\004\005\012\024\017\014\025\007" +
    "\031\022\034\025\037\020\074\003\100\026\122\u01b2\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\u01a1\001\001\000\004\032\u019f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\052\001\001\000\004\041" +
    "\047\001\001\000\006\022\037\024\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\110\001\001" +
    "\000\004\036\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\064\001\001\000\004\015\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\122\001\001" +
    "\000\002\001\001\000\004\014\117\001\001\000\002\001" +
    "\001\000\004\015\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\131\001\001\000\004\021\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\154\001\001\000\004\033\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\143\001\001\000\004" +
    "\010\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\134\157" +
    "\001\001\000\006\075\166\076\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\076\u0198\001\001\000\002\001\001\000\004\043\175\001" +
    "\001\000\042\003\210\004\005\012\024\017\014\025\007" +
    "\031\022\034\025\037\020\053\212\060\211\107\213\110" +
    "\177\111\200\130\203\131\202\132\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\u0170\001\001\000\004\061\u0152\001\001\000\004\057\u013c" +
    "\001\001\000\004\077\u0135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\112\236\115\224\001\001" +
    "\000\006\112\223\115\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\113\226\001\001\000\004\115\227\001\001\000\002\001" +
    "\001\000\004\113\230\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\343\001\001\000\006\045" +
    "\251\047\245\001\001\000\006\050\341\052\340\001\001" +
    "\000\004\052\326\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\252" +
    "\001\001\000\004\047\321\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\260\001\001\000\042\003\210\004\005\012\024\017" +
    "\014\025\007\031\022\034\025\037\020\053\212\060\211" +
    "\107\213\110\177\111\200\130\203\131\202\132\201\001" +
    "\001\000\004\054\262\001\001\000\002\001\001\000\004" +
    "\056\265\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\045\306\047\245\001\001\000\006" +
    "\045\271\047\245\001\001\000\004\046\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\301\001\001" +
    "\000\004\043\276\001\001\000\042\003\210\004\005\012" +
    "\024\017\014\025\007\031\022\034\025\037\020\053\212" +
    "\060\211\107\213\110\177\111\200\130\203\131\202\132" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\210\004\005\012\024\017\014\025\007\031\022\034" +
    "\025\037\020\053\212\060\211\107\213\110\177\111\200" +
    "\130\203\131\202\132\201\001\001\000\002\001\001\000" +
    "\004\043\304\001\001\000\042\003\210\004\005\012\024" +
    "\017\014\025\007\031\022\034\025\037\020\053\212\060" +
    "\211\107\213\110\177\111\200\130\203\131\202\132\201" +
    "\001\001\000\002\001\001\000\004\046\252\001\001\000" +
    "\002\001\001\000\004\043\311\001\001\000\042\003\210" +
    "\004\005\012\024\017\014\025\007\031\022\034\025\037" +
    "\020\053\212\060\211\107\213\110\177\111\200\130\203" +
    "\131\202\132\201\001\001\000\002\001\001\000\006\045" +
    "\314\047\245\001\001\000\004\046\252\001\001\000\002" +
    "\001\001\000\004\043\317\001\001\000\042\003\210\004" +
    "\005\012\024\017\014\025\007\031\022\034\025\037\020" +
    "\053\212\060\211\107\213\110\177\111\200\130\203\131" +
    "\202\132\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\336\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\342\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\210" +
    "\004\005\012\024\017\014\025\007\031\022\034\025\037" +
    "\020\053\212\060\211\107\213\110\177\111\200\130\203" +
    "\131\202\132\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\045\347\047\245\001\001\000\004\046\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\365\001\001\000\004\126\354\001\001\000\004\043\355" +
    "\001\001\000\044\003\210\004\005\012\024\017\014\025" +
    "\007\031\022\034\025\037\020\053\212\060\211\107\213" +
    "\110\177\111\200\127\356\130\203\131\202\132\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\362\047\245\001\001\000\004\046\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\210" +
    "\004\005\012\024\017\014\025\007\031\022\034\025\037" +
    "\020\053\212\060\211\107\213\110\177\111\200\130\203" +
    "\131\202\132\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\045\371\047\245\001\001\000\004\046\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\101" +
    "\u0105\102\377\103\u0104\106\376\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\101\u0121\102\377\103\u0104\106\376\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\102\u010e\103\u0104\106\376\001\001\000\010" +
    "\102\u0109\103\u0104\106\376\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\103\u010d\106\376\001\001\000\006" +
    "\103\u010c\106\376\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\120\u011c" +
    "\121\u0116\001\001\000\002\001\001\000\006\120\u011a\121" +
    "\u0116\001\001\000\006\120\u0115\121\u0116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\120\u011f\121\u0116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\045" +
    "\u012d\047\245\001\001\000\006\045\u0125\047\245\001\001" +
    "\000\004\046\252\001\001\000\002\001\001\000\004\124" +
    "\u0128\001\001\000\004\043\u0129\001\001\000\044\003\210" +
    "\004\005\012\024\017\014\025\007\031\022\034\025\037" +
    "\020\053\212\060\211\107\213\110\177\111\200\125\u012a" +
    "\130\203\131\202\132\201\001\001\000\002\001\001\000" +
    "\004\054\u012c\001\001\000\002\001\001\000\004\046\252" +
    "\001\001\000\002\001\001\000\004\043\u0130\001\001\000" +
    "\042\003\210\004\005\012\024\017\014\025\007\031\022" +
    "\034\025\037\020\053\212\060\211\107\213\110\177\111" +
    "\200\130\203\131\202\132\201\001\001\000\004\054\u0132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\045\u014c\047\245" +
    "\001\001\000\006\045\u013f\047\245\001\001\000\004\046" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\u0147\001\001\000\004\043\u0144\001\001\000\042\003" +
    "\210\004\005\012\024\017\014\025\007\031\022\034\025" +
    "\037\020\053\212\060\211\107\213\110\177\111\200\130" +
    "\203\131\202\132\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\210\004\005\012\024\017\014\025" +
    "\007\031\022\034\025\037\020\053\212\060\211\107\213" +
    "\110\177\111\200\130\203\131\202\132\201\001\001\000" +
    "\002\001\001\000\004\043\u014a\001\001\000\042\003\210" +
    "\004\005\012\024\017\014\025\007\031\022\034\025\037" +
    "\020\053\212\060\211\107\213\110\177\111\200\130\203" +
    "\131\202\132\201\001\001\000\002\001\001\000\004\046" +
    "\252\001\001\000\002\001\001\000\004\043\u014f\001\001" +
    "\000\042\003\210\004\005\012\024\017\014\025\007\031" +
    "\022\034\025\037\020\053\212\060\211\107\213\110\177" +
    "\111\200\130\203\131\202\132\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\u0155" +
    "\001\001\000\004\064\u016e\001\001\000\002\001\001\000" +
    "\004\064\u0166\001\001\000\006\045\u0158\047\245\001\001" +
    "\000\004\046\252\001\001\000\002\001\001\000\004\062" +
    "\u015f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\u0162\001\001\000\042\003\210\004\005" +
    "\012\024\017\014\025\007\031\022\034\025\037\020\053" +
    "\212\060\211\107\213\110\177\111\200\130\203\131\202" +
    "\132\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\066\u0175\067\u0176" +
    "\070\u0177\001\001\000\004\073\u0185\001\001\000\004\070" +
    "\u0183\001\001\000\002\001\001\000\004\071\u0179\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\u017f\001\001" +
    "\000\044\003\210\004\005\012\024\017\014\025\007\031" +
    "\022\034\025\037\020\053\212\060\211\072\u0181\107\213" +
    "\110\177\111\200\130\203\131\202\132\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\u0188\001\001\000\044\003\210\004\005" +
    "\012\024\017\014\025\007\031\022\034\025\037\020\053" +
    "\212\060\211\072\u0189\107\213\110\177\111\200\130\203" +
    "\131\202\132\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u019e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\u01ad" +
    "\001\001\000\002\001\001\000\004\027\u01a3\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\u01a7\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\u01b1\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\133\u01b4\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\075\u01b7\076\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\u01ba\001\001\000" +
    "\042\003\210\004\005\012\024\017\014\025\007\031\022" +
    "\034\025\037\020\053\212\060\211\107\213\110\177\111" +
    "\200\130\203\131\202\132\201\001\001\000\004\077\u01bc" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\u01c4" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\u01cb\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u01d0\001\001\000" +
    "\004\006\u01cc\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<MyError> listaErrorSintacticos = new LinkedList<MyError>();
    public Nodo raiz;
    public ArrayList<Variable> variables = new ArrayList();
    public ArrayList<Tabla> tabla = new ArrayList();
    public String ambito="global";
    public int profundidad = 0;
    public static int contTemp = 0;
    public ArrayList<Cuadruplo> cuads = new ArrayList();

    public boolean noExiste(String id) {
        boolean esValido = true;
        for (int i = 0; i < tabla.size(); i++) {
            if( ((Tabla)tabla.get(i)).getId().equals(id) && ((Tabla)tabla.get(i)).getAmbito().equals(ambito)){
                esValido = false;
            }
        }
        return esValido;
    }

    public String buscarTipo(String id) {
        String tipo = "";
        for (int i = 0; i < tabla.size(); i++) {
            if( ((Tabla)tabla.get(i)).getId().equals(id) && ((Tabla)tabla.get(i)).getAmbito().equals(ambito) && ((Tabla)tabla.get(i)).getProfundidad() == 0 ){
                tipo+=((Tabla)tabla.get(i)).getTipo();
            }
        }
        return tipo;
    }

    public void quitarAmbito() {
        int index = ambito.lastIndexOf('.');
        ambito = ambito.substring(0, index);
        System.out.println("AMBITO\t"+ambito);
    }

    public static boolean isNumeric(String str) {
        try {
            int d = Integer.parseInt(str);  
        }
        catch(NumberFormatException nfe) {
            return false;
        }
        return true;  
    }

    public String getOp(String s){
        int num = 0;
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '='){
                num = i;
                break;
            }    
        }
        s = s.substring(num+1, s.length());
        return s;
    }
    
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
        MyError datos = new MyError(lexema, fila, columna, "Error Sintactico", "Caracter no esperado");
        listaErrorSintacticos.add(datos);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        MyError datos = new MyError(lexema, fila, columna, "Error Sintactico", "Simbolo no esperado, Panic Mode");
        listaErrorSintacticos.add(datos);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= programa 
            {
              Object RESULT =null;
		int funcionesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int funcionesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object funciones = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 this.parser.raiz = new Nodo("Programa", "");
                        ArrayList arregloNodos = (ArrayList) funciones;
                        for(int i = 0; i < arregloNodos.size(); i++){
                        Nodo temp = ((Nodo)arregloNodos.get(i));
                            this.parser.raiz.addHijo(temp);
                        }  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= programa linea 
            {
              Object RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object prog = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(prog != null){ 
                                            ArrayList arregloNodos = (ArrayList) prog;
                                            ArrayList arregloCommand = (ArrayList) line;
                                            Nodo programa = (Nodo)arregloCommand.get(0);
                                            arregloNodos.add( programa ); 
                                            RESULT = arregloNodos; 
                                        } else  if(line != null)
                                            RESULT = line; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= linea 
            {
              Object RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = line; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // linea ::= dec_function 
            {
              Object RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object funcion = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = funcion; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("linea",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // linea ::= dec_main 
            {
              Object RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = main; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("linea",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // linea ::= declaracion 
            {
              Object RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object declaracion = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = declaracion; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("linea",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= asignacionInteger DASH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 ArrayList declaracionArreglo = new ArrayList();
                                            Nodo declaracion = new Nodo("declaracion","");
                                            ArrayList arregloNodos = (ArrayList) a;
                                            for(int i = 0; i < arregloNodos.size(); i++){
                                                Nodo temp = ((Nodo)arregloNodos.get(i));
                                                declaracion.addHijo(temp);
                                            }
                                            declaracionArreglo.add(declaracion);
                                            RESULT = declaracionArreglo; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= asignacionInteger error 
            {
              Object RESULT =null;
		 System.out.println("Expected - (dash)."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= asignacionIntegerPtr DASH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		ArrayList declaracionArreglo = new ArrayList();
                                    Nodo declaracion = new Nodo("declaracion","");
                                    ArrayList arregloNodos = (ArrayList) a;
                                    for(int i = 0; i < arregloNodos.size(); i++){
                                        Nodo temp = ((Nodo)arregloNodos.get(i));
                                        declaracion.addHijo(temp);
                                    }
                                    declaracionArreglo.add(declaracion);
                                    RESULT = declaracionArreglo;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= asignacionIntegerPtr error 
            {
              Object RESULT =null;
		 System.out.println("Expected - (dash)."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= asignacionChar DASH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		ArrayList declaracionArreglo = new ArrayList();
                                    Nodo declaracion = new Nodo("declaracion","");
                                    ArrayList arregloNodos = (ArrayList) a;
                                    for(int i = 0; i < arregloNodos.size(); i++){
                                        Nodo temp = ((Nodo)arregloNodos.get(i));
                                        declaracion.addHijo(temp);
                                    }
                                    declaracionArreglo.add(declaracion);
                                    RESULT = declaracionArreglo;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= asignacionChar error 
            {
              Object RESULT =null;
		 System.out.println("Expected - (dash)."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= asignacionCharPtr DASH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		ArrayList declaracionArreglo = new ArrayList();
                                    Nodo declaracion = new Nodo("declaracion","");
                                    ArrayList arregloNodos = (ArrayList) a;
                                    for(int i = 0; i < arregloNodos.size(); i++){
                                        Nodo temp = ((Nodo)arregloNodos.get(i));
                                        declaracion.addHijo(temp);
                                    }
                                    declaracionArreglo.add(declaracion);
                                    RESULT = declaracionArreglo;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion ::= asignacionCharPtr error 
            {
              Object RESULT =null;
		 System.out.println("Expected - (dash)."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion ::= asignacionBool DASH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		ArrayList declaracionArreglo = new ArrayList();
                                Nodo declaracion = new Nodo("declaracion","");
                                ArrayList arregloNodos = (ArrayList) a;
                                for(int i = 0; i < arregloNodos.size(); i++){
                                    Nodo temp = ((Nodo)arregloNodos.get(i));
                                    declaracion.addHijo(temp);
                                }
                                declaracionArreglo.add(declaracion);
                                RESULT = declaracionArreglo;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion ::= asignacionBool error 
            {
              Object RESULT =null;
		 System.out.println("Expected - (dash)."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion ::= asignacionBoolPtr DASH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		ArrayList declaracionArreglo = new ArrayList();
                                Nodo declaracion = new Nodo("declaracion","");
                                ArrayList arregloNodos = (ArrayList) a;
                                for(int i = 0; i < arregloNodos.size(); i++){
                                    Nodo temp = ((Nodo)arregloNodos.get(i));
                                    declaracion.addHijo(temp);
                                }
                                declaracionArreglo.add(declaracion);
                                RESULT = declaracionArreglo;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion ::= asignacionBoolPtr error 
            {
              Object RESULT =null;
		 System.out.println("Expected - (dash)."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion ::= asignacionString DASH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		ArrayList declaracionArreglo = new ArrayList();
                                Nodo declaracion = new Nodo("declaracion","");
                                ArrayList arregloNodos = (ArrayList) a;
                                for(int i = 0; i < arregloNodos.size(); i++){
                                    Nodo temp = ((Nodo)arregloNodos.get(i));
                                    declaracion.addHijo(temp);
                                }
                                declaracionArreglo.add(declaracion);
                                RESULT = declaracionArreglo;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion ::= asignacionString error 
            {
              Object RESULT =null;
		 System.out.println("Expected - (dash)."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // asignacionInteger ::= asignacionInteger COMMA instanciacionInteger 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  if(b != null){
                                                                                ArrayList arregloNodos = (ArrayList) b;
                                                                                Nodo newID = new Nodo((String)id, "");
                                                                                arregloNodos.add( newID );
                                                                                Tabla nuevaVar = new Tabla((String)id, "int", ambito, profundidad, 0);
                                                                                tabla.add( nuevaVar );
                                                                                RESULT = arregloNodos;
                                                                             } else {
                                                                                ArrayList arregloInstancias = new ArrayList();
                                                                                Nodo newID = new Nodo((String)id, "");
                                                                                arregloInstancias.add(newID);
                                                                                Tabla nuevaVar = new Tabla((String)id, "int", ambito, profundidad, 0);
                                                                                tabla.add( nuevaVar );
                                                                                RESULT = arregloInstancias;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionInteger",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignacionInteger ::= INT instanciacionInteger 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		ArrayList arregloInstancias = new ArrayList();
                                    Nodo newInt = new Nodo("int", "");
                                    Nodo newID = new Nodo((String)id, "");
                                    arregloInstancias.add(newInt);
                                    arregloInstancias.add(newID);
                                    Tabla nuevaVar = new Tabla((String)id, "int", ambito, profundidad, 0);
                                    tabla.add( nuevaVar );
                                    RESULT = arregloInstancias; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionInteger",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instanciacionInteger ::= ID iniciacionInteger 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionInteger",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instanciacionInteger ::= error iniciacionInteger 
            {
              Object RESULT =null;
		 System.out.println("Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionInteger",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // iniciacionInteger ::= ASSIGN INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionInteger",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // iniciacionInteger ::= ASSIGN error 
            {
              Object RESULT =null;
		 System.out.println("Expected a number."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionInteger",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // iniciacionInteger ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionInteger",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // integerLista ::= INTEGER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("integerLista",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // integerLista ::= integerLista COMMA INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("integerLista",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // integerLista ::= integerLista COMMA error 
            {
              Object RESULT =null;
		 System.out.println("Expected a number."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("integerLista",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // integerLista ::= error 
            {
              Object RESULT =null;
		 System.out.println("Expected a number."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("integerLista",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // asignacionIntegerPtr ::= asignacionIntegerPtr COMMA instanciacionIntegerPtr 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(b != null){
                                                                                    ArrayList arregloNodos = (ArrayList) b;
                                                                                    Nodo newID = new Nodo((String)id, "");
                                                                                    arregloNodos.add( newID );
                                                                                    Tabla nuevaVar = new Tabla((String)id, "int*", ambito, profundidad, 0);
                                                                                    tabla.add( nuevaVar );
                                                                                    RESULT = arregloNodos;
                                                                                 } else {
                                                                                    ArrayList arregloInstancias = new ArrayList();
                                                                                    Nodo newID = new Nodo((String)id, "");
                                                                                    arregloInstancias.add(newID);
                                                                                    Tabla nuevaVar = new Tabla((String)id, "int*", ambito, profundidad, 0);
                                                                                    tabla.add( nuevaVar );
                                                                                    RESULT = arregloInstancias;}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionIntegerPtr",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // asignacionIntegerPtr ::= INTPTR instanciacionIntegerPtr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		ArrayList arregloInstancias = new ArrayList();
                                    Nodo newInt = new Nodo("int ptr", "");
                                    Nodo newID = new Nodo((String)id, "");
                                    arregloInstancias.add(newInt);
                                    arregloInstancias.add(newID);
                                    Tabla nuevaVar = new Tabla((String)id, "int*", ambito, profundidad, 0);
                                    tabla.add( nuevaVar );
                                    RESULT = arregloInstancias; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionIntegerPtr",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instanciacionIntegerPtr ::= ID iniciacionIntegerPtr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntegerPtr",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instanciacionIntegerPtr ::= error iniciacionIntegerPtr 
            {
              Object RESULT =null;
		 System.out.println("Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntegerPtr",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // iniciacionIntegerPtr ::= ASSIGN instanciacionIntPtr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionIntegerPtr",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // iniciacionIntegerPtr ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionIntegerPtr",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instanciacionIntPtr ::= LBRAC RBRAC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntPtr",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instanciacionIntPtr ::= LBRAC integerLista RBRAC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntPtr",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asignacionChar ::= asignacionChar COMMA instanciacionChar 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null){
                                                                    ArrayList arregloNodos = (ArrayList) b;
                                                                    Nodo newID = new Nodo((String)id, "");
                                                                    arregloNodos.add( newID );
                                                                    Tabla nuevaVar = new Tabla((String)id, "char", ambito, profundidad, 0);
                                                                    tabla.add( nuevaVar );
                                                                    RESULT = arregloNodos;
                                                                 } else {
                                                                    ArrayList arregloInstancias = new ArrayList();
                                                                    Nodo newID = new Nodo((String)id, "");
                                                                    arregloInstancias.add(newID);
                                                                    Tabla nuevaVar = new Tabla((String)id, "char", ambito, profundidad, 0);
                                                                    tabla.add( nuevaVar );
                                                                    RESULT = arregloInstancias;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionChar",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // asignacionChar ::= CHAR instanciacionChar 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		ArrayList arregloInstancias = new ArrayList();
                                    Nodo newChar = new Nodo("char", "");
                                    Nodo newID = new Nodo((String)id, "");
                                    arregloInstancias.add(newChar);
                                    arregloInstancias.add(newID);
                                    Tabla nuevaVar = new Tabla((String)id, "char", ambito, profundidad, 0);
                                    tabla.add( nuevaVar );
                                    RESULT = arregloInstancias; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionChar",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instanciacionChar ::= ID iniciacionChar 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionChar",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instanciacionChar ::= error iniciacionChar 
            {
              Object RESULT =null;
		 System.out.println("Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionChar",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // iniciacionChar ::= ASSIGN charComillas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionChar",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // iniciacionChar ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionChar",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // charComillas ::= SIMCOM LETTER SIMCOM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // charComillas ::= error LETTER SIMCOM 
            {
              Object RESULT =null;
		 System.out.println("Expected a '.'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // charComillas ::= SIMCOM LETTER error 
            {
              Object RESULT =null;
		 System.out.println("Expected a '.'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // charComillas ::= SIMCOM error SIMCOM 
            {
              Object RESULT =null;
		 System.out.println("Expected a char."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // charComillas ::= DOBCOM LETTER DOBCOM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // charComillas ::= error LETTER DOBCOM 
            {
              Object RESULT =null;
		 System.out.println("Expected a '.'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // charComillas ::= DOBCOM LETTER error 
            {
              Object RESULT =null;
		 System.out.println("Expected a '.'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // charComillas ::= DOBCOM error DOBCOM 
            {
              Object RESULT =null;
		 System.out.println("Expected a char."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // charLista ::= LETTER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charLista",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // charLista ::= charLista COMMA LETTER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charLista",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // charLista ::= charLista COMMA error 
            {
              Object RESULT =null;
		 System.out.println("Expected a char."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charLista",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // charLista ::= error 
            {
              Object RESULT =null;
		 System.out.println("Expected a char."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charLista",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asignacionCharPtr ::= asignacionCharPtr COMMA instanciacionCharPointer 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null){
                                                                            ArrayList arregloNodos = (ArrayList) b;
                                                                            Nodo newID = new Nodo((String)id, "");
                                                                            arregloNodos.add( newID );
                                                                            Tabla nuevaVar = new Tabla((String)id, "char*", ambito, profundidad, 0);
                                                                            tabla.add( nuevaVar );
                                                                            RESULT = arregloNodos;
                                                                         } else {
                                                                            ArrayList arregloInstancias = new ArrayList();
                                                                            Nodo newID = new Nodo((String)id, "");
                                                                            arregloInstancias.add(newID);
                                                                            Tabla nuevaVar = new Tabla((String)id, "char*", ambito, profundidad, 0);
                                                                            tabla.add( nuevaVar );
                                                                            RESULT = arregloInstancias;}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionCharPtr",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asignacionCharPtr ::= CHARPTR instanciacionCharPointer 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		ArrayList arregloInstancias = new ArrayList();
                                            Nodo newChar = new Nodo("char ptr", "");
                                            Nodo newID = new Nodo((String)id, "");
                                            arregloInstancias.add(newChar);
                                            arregloInstancias.add(newID);
                                            Tabla nuevaVar = new Tabla((String)id, "char*", ambito, profundidad, 0);
                                            tabla.add( nuevaVar );
                                            RESULT = arregloInstancias; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionCharPtr",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instanciacionCharPointer ::= ID iniciacionCharPtr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionCharPointer",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instanciacionCharPointer ::= error iniciacionCharPtr 
            {
              Object RESULT =null;
		 System.out.println("Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionCharPointer",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // iniciacionCharPtr ::= ASSIGN instanciacionCharPtr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionCharPtr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // iniciacionCharPtr ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionCharPtr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instanciacionCharPtr ::= LBRAC RBRAC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionCharPtr",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // instanciacionCharPtr ::= LBRAC charComillas RBRAC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionCharPtr",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // asignacionBool ::= asignacionBool COMMA instanciacionBool 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(b != null){
                                                                    ArrayList arregloNodos = (ArrayList) b;
                                                                    Nodo newID = new Nodo((String)id, "");
                                                                    arregloNodos.add( newID );
                                                                    Tabla nuevaVar = new Tabla((String)id, "bool", ambito, profundidad, 0);
                                                                    tabla.add( nuevaVar );
                                                                    RESULT = arregloNodos;
                                                                 } else {
                                                                    ArrayList arregloInstancias = new ArrayList();
                                                                    Nodo newID = new Nodo((String)id, "");
                                                                    arregloInstancias.add(newID);
                                                                    Tabla nuevaVar = new Tabla((String)id, "bool", ambito, profundidad, 0);
                                                                    tabla.add( nuevaVar );
                                                                    RESULT = arregloInstancias;}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionBool",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // asignacionBool ::= BOOL instanciacionBool 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		ArrayList arregloInstancias = new ArrayList();
                                Nodo newChar = new Nodo("bool", "");
                                Nodo newID = new Nodo((String)id, "");
                                arregloInstancias.add(newChar);
                                arregloInstancias.add(newID);
                                Tabla nuevaVar = new Tabla((String)id, "bool", ambito, profundidad, 0);
                                tabla.add( nuevaVar );
                                RESULT = arregloInstancias; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionBool",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // instanciacionBool ::= ID iniciacionBool 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBool",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // instanciacionBool ::= error iniciacionBool 
            {
              Object RESULT =null;
		 System.out.println("Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBool",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // iniciacionBool ::= ASSIGN bool 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionBool",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // iniciacionBool ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionBool",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bool ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bool",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bool ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bool",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bool ::= error 
            {
              Object RESULT =null;
		 System.out.println("Expected either true/false."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bool",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // asignacionBoolPtr ::= asignacionBoolPtr COMMA instanciacionBoolPtr 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(b != null){
                                                                        ArrayList arregloNodos = (ArrayList) b;
                                                                        Nodo newID = new Nodo((String)id, "");
                                                                        arregloNodos.add( newID );
                                                                        Tabla nuevaVar = new Tabla((String)id, "bool*", ambito, profundidad, 0);
                                                                        tabla.add( nuevaVar );
                                                                        RESULT = arregloNodos;
                                                                     } else {
                                                                        ArrayList arregloInstancias = new ArrayList();
                                                                        Nodo newID = new Nodo((String)id, "");
                                                                        arregloInstancias.add(newID);
                                                                        Tabla nuevaVar = new Tabla((String)id, "bool*", ambito, profundidad, 0);
                                                                        tabla.add( nuevaVar );
                                                                        RESULT = arregloInstancias;}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionBoolPtr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // asignacionBoolPtr ::= BOOLPTR instanciacionBoolPtr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		ArrayList arregloInstancias = new ArrayList();
                                        Nodo newChar = new Nodo("bool ptr", "");
                                        Nodo newID = new Nodo((String)id, "");
                                        arregloInstancias.add(newChar);
                                        arregloInstancias.add(newID);
                                        Tabla nuevaVar = new Tabla((String)id, "bool*", ambito, profundidad, 0);
                                        tabla.add( nuevaVar );
                                        RESULT = arregloInstancias; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionBoolPtr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // instanciacionBoolPtr ::= ID iniciacionBoolPtr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBoolPtr",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // instanciacionBoolPtr ::= error iniciacionBoolPtr 
            {
              Object RESULT =null;
		 System.out.println("Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBoolPtr",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // iniciacionBoolPtr ::= ASSIGN instanciacionBoolPtr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionBoolPtr",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // iniciacionBoolPtr ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionBoolPtr",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // instanciacionBoolPtr ::= LBRAC RBRAC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBoolPtr",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // instanciacionBoolPtr ::= LBRAC boolLista RBRAC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBoolPtr",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // boolLista ::= bool 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("boolLista",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // boolLista ::= boolLista COMMA bool 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("boolLista",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // asignacionString ::= asignacionString COMMA instanciacionString 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(b != null){
                                                                        ArrayList arregloNodos = (ArrayList) b;
                                                                        Nodo newID = new Nodo((String)id, "");
                                                                        arregloNodos.add( newID );
                                                                        Tabla nuevaVar = new Tabla((String)id, "string", ambito, profundidad, 0);
                                                                        tabla.add( nuevaVar );
                                                                        RESULT = arregloNodos;
                                                                     } else {
                                                                        ArrayList arregloInstancias = new ArrayList();
                                                                        Nodo newID = new Nodo((String)id, "");
                                                                        arregloInstancias.add(newID);
                                                                        Tabla nuevaVar = new Tabla((String)id, "string", ambito, profundidad, 0);
                                                                        tabla.add( nuevaVar );
                                                                        RESULT = arregloInstancias;}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionString",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // asignacionString ::= STRING instanciacionString 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		ArrayList arregloInstancias = new ArrayList();
                                        Nodo newChar = new Nodo("string", "");
                                        Nodo newID = new Nodo((String)id, "");
                                        arregloInstancias.add(newChar);
                                        arregloInstancias.add(newID);
                                        Tabla nuevaVar = new Tabla((String)id, "string", ambito, profundidad, 0);
                                        tabla.add( nuevaVar );
                                        RESULT = arregloInstancias; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionString",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // instanciacionString ::= ID iniciacionString 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionString",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // instanciacionString ::= error iniciacionString 
            {
              Object RESULT =null;
		 System.out.println("Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionString",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // iniciacionString ::= ASSIGN DOBCOM contenidoString DOBCOM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionString",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // iniciacionString ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionString",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // contenidoString ::= contenidoString ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidoString",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // contenidoString ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidoString",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // contenidoString ::= contenidoString COMMA error 
            {
              Object RESULT =null;
		 System.out.println("Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidoString",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // contenidoString ::= error 
            {
              Object RESULT =null;
		 System.out.println("Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidoString",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // conditionalExpr ::= conditionalExpr andORor logicalExpr 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int andorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int andorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object andor = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 ArrayList expresion1 = (ArrayList)expr1;
                                                                            Nodo expresion2 = (Nodo)expr2;
                                                                            Nodo condition = new Nodo(andor.toString(), "");
                                                                            if(expresion1.size() >= 2)
                                                                                condition.addHijo( ((Nodo)expresion1.get(expresion1.size()-1)).getHijos().get( ((Nodo)expresion1.get(expresion1.size()-1)).getHijos().size()-1 ) );
                                                                            else
                                                                                condition.addHijo( ((Nodo)expresion1.get(expresion1.size()-1)) );
                                                                            condition.addHijo(expresion2);
                                                                            expresion1.add(condition);
                                                                            RESULT =  expresion1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("conditionalExpr",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // conditionalExpr ::= logicalExpr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 ArrayList arregloCondiciones = new ArrayList();
                            Nodo expresion = (Nodo)expr;
                            arregloCondiciones.add(expresion);
                            RESULT = arregloCondiciones; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("conditionalExpr",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // conditionalExpr ::= conditionalExpr andORor LPAR logicalExpr RPAR 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int andorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int andorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object andor = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 ArrayList expresion1 = (ArrayList)expr1;
                                                                        Nodo expresion2 = (Nodo)expr2;
                                                                        Nodo condition = new Nodo(andor.toString(), "");
                                                                        if(expresion1.size() >= 2)
                                                                            condition.addHijo( ((Nodo)expresion1.get(expresion1.size()-1)).getHijos().get( ((Nodo)expresion1.get(expresion1.size()-1)).getHijos().size()-1 ) );
                                                                        else
                                                                            condition.addHijo( ((Nodo)expresion1.get(expresion1.size()-1)) );
                                                                        condition.addHijo(expresion2);
                                                                        expresion1.add(condition);
                                                                        RESULT =  expresion1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("conditionalExpr",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // andORor ::= AND_OP 
            {
              Object RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = and.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("andORor",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // andORor ::= OR_OP 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = or.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("andORor",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // andORor ::= error 
            {
              Object RESULT =null;
		 System.out.println("Unknown character."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("andORor",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // logicalExpr ::= ID logicalExprComp 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo expresion1 = new Nodo(id.toString(), "");
                                                    ArrayList arregloExpresion = (ArrayList) arreglo;
                                                    if(arregloExpresion.size() > 0){
                                                        Nodo condition = new Nodo( ((Nodo)arregloExpresion.get(0)).getTipo(), "");
                                                        Nodo expresion2 = new Nodo( ((Nodo)arregloExpresion.get(1)).getTipo(), "");
                                                        condition.addHijo(expresion1);
                                                        condition.addHijo(expresion2);
                                                        RESULT = condition;
                                                    } else
                                                        RESULT = expresion1; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExpr",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // logicalExpr ::= INTEGER comparator logicalExprID 
            {
              Object RESULT =null;
		int inteleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int interight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object inte = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo expresion1 = new Nodo(inte.toString(), "");
                                            Nodo expresion2 = new Nodo(expr.toString(), "");
                                            Nodo condition = new Nodo(comp.toString(), "");
                                            condition.addHijo(expresion1);
                                            condition.addHijo(expresion2);
                                            RESULT = condition; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExpr",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // logicalExpr ::= TRUE 
            {
              Object RESULT =null;
		 Nodo tru = new Nodo("true", ""); RESULT = tru; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExpr",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // logicalExpr ::= FALSE 
            {
              Object RESULT =null;
		 Nodo fal = new Nodo("false", "");RESULT = fal; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExpr",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // logicalExpr ::= error 
            {
              Object RESULT =null;
		 System.out.println("Unexpected character."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExpr",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // logicalExprComp ::= comparator logicalExprID 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 ArrayList arregloExpresiones = new ArrayList();
                                                            Nodo expresion = new Nodo(expr.toString(), "");
                                                            Nodo condition = new Nodo(comp.toString(), "");
                                                            arregloExpresiones.add(condition);
                                                            arregloExpresiones.add(expresion);
                                                            RESULT = arregloExpresiones;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExprComp",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // logicalExprComp ::= 
            {
              Object RESULT =null;
		ArrayList arregloExpresiones = new ArrayList();
        RESULT = arregloExpresiones; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExprComp",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // logicalExprID ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExprID",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // logicalExprID ::= INTEGER 
            {
              Object RESULT =null;
		int inteleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int interight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object inte = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = inte; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExprID",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // logicalExprID ::= error 
            {
              Object RESULT =null;
		 System.out.println("Unexpected character."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExprID",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // comparator ::= EQUAL_OP 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = comp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // comparator ::= LESSTHAN_OP 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = comp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // comparator ::= GREATERTHAN_OP 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = comp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // comparator ::= LESSEQUAL_OP 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = comp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // comparator ::= GREATEREQUAL_OP 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = comp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // comparator ::= NOTEQUAL_OP 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = comp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$0 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 ambito+=".if"; profundidad++; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 quitarAmbito(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",83, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // if ::= IF LPAR conditionalExpr RPAR LKEY NT$0 body NT$1 RKEY else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int elseIfleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int elseIfright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object elseIf = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(elseIf != null){
                                                                            Nodo nodo = new Nodo("if", "");
                                                                            Nodo cuerpo = new Nodo("cuerpo", "");
                                                                            Nodo condicion = new Nodo("condicion", "");
                                                                            ArrayList arregloCondicion = (ArrayList) cond;
                                                                            if(arregloCondicion != null){
                                                                                for(int i = 0; i < arregloCondicion.size(); i++){
                                                                                    if( ("&&".equals(((Nodo)arregloCondicion.get(i)).getTipo()) || "||".equals(((Nodo)arregloCondicion.get(i)).getTipo())) || arregloCondicion.size() == 1 ){
                                                                                        Nodo temp = ((Nodo)arregloCondicion.get(i));
                                                                                        condicion.addHijo(temp);
                                                                                    }
                                                                                }
                                                                            }
                                                                            ArrayList arregloBody = (ArrayList) body;
                                                                            if(arregloBody != null){
                                                                                for(int i = 0; i < arregloBody.size(); i++){
                                                                                    Nodo temp = ((Nodo)arregloBody.get(i));
                                                                                    cuerpo.addHijo(temp);
                                                                                }
                                                                            }
                                                                            nodo.addHijo(condicion);
                                                                            nodo.addHijo(cuerpo);
                                                                            ArrayList arregloNodos = new ArrayList();
                                                                            arregloNodos.add(nodo);
                                                                            ArrayList arregloElse = (ArrayList) elseIf;
                                                                            if(arregloElse != null){
                                                                                for(int i = 0; i < arregloElse.size(); i++){
                                                                                    Nodo temp = ((Nodo)arregloElse.get(i));
                                                                                    arregloNodos.add(temp);
                                                                                }
                                                                            }
                                                                            RESULT = arregloNodos;
                                                                        } else {
                                                                            Nodo nodo = new Nodo("if", "");
                                                                            Nodo cuerpo = new Nodo("cuerpo", "");
                                                                            Nodo condicion = new Nodo("condicion", "");
                                                                            ArrayList arregloCondicion = (ArrayList) cond;
                                                                            if(arregloCondicion != null){
                                                                                for(int i = 0; i < arregloCondicion.size(); i++){
                                                                                    if( ("&&".equals(((Nodo)arregloCondicion.get(i)).getTipo()) || "||".equals(((Nodo)arregloCondicion.get(i)).getTipo())) || arregloCondicion.size() == 1 ){
                                                                                        Nodo temp = ((Nodo)arregloCondicion.get(i));
                                                                                        condicion.addHijo(temp);
                                                                                    }
                                                                                }
                                                                            }
                                                                            ArrayList arregloBody = (ArrayList) body;
                                                                            if(arregloBody != null){
                                                                                for(int i = 0; i < arregloBody.size(); i++){
                                                                                    Nodo temp = ((Nodo)arregloBody.get(i));
                                                                                    cuerpo.addHijo(temp);
                                                                                }
                                                                            }
                                                                            nodo.addHijo(condicion);
                                                                            nodo.addHijo(cuerpo);
                                                                            ArrayList arregloNodos = new ArrayList();
                                                                            arregloNodos.add(nodo);
                                                                            RESULT = arregloNodos; } 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // if ::= error LPAR conditionalExpr RPAR LKEY body RKEY else 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("Expected if."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // if ::= IF error conditionalExpr RPAR LKEY body RKEY else 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("Expected '('."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // else ::= else ELSE ifSinElse 
            {
              Object RESULT =null;
		int ifSinElseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ifSinElseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ifSinElse = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = ifSinElse; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // else ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ifSinElse ::= IF LPAR conditionalExpr RPAR LKEY body RKEY 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		Nodo nodo = new Nodo("else if", "");
                                                            ArrayList arregloBody = (ArrayList) body;
                                                            if(arregloBody != null){
                                                                for(int i = 0; i < arregloBody.size(); i++){
                                                                    Nodo temp = ((Nodo)arregloBody.get(i));
                                                                    nodo.addHijo(temp);
                                                                }
                                                            }
                                                            ArrayList arregloNodos = new ArrayList();
                                                            arregloNodos.add(nodo);
                                                            RESULT = arregloNodos;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSinElse",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ifSinElse ::= error LPAR conditionalExpr RPAR LKEY body RKEY 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println("Expected if."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSinElse",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ifSinElse ::= IF error conditionalExpr RPAR LKEY body RKEY 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println("Expected '('."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSinElse",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ifSinElse ::= IF LPAR conditionalExpr error LKEY body RKEY 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println("Expected ')'."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSinElse",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ifSinElse ::= IF LPAR conditionalExpr RPAR error body RKEY 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println("Expected '{'."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSinElse",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ifSinElse ::= IF LPAR conditionalExpr RPAR LKEY body error 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println("Expected '}'."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSinElse",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // while ::= WHILE LPAR conditionalExpr RPAR LKEY body RKEY 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Nodo nodo = new Nodo("while", "");
                                                                    Nodo condicion = new Nodo("condicion", "");
                                                                    Nodo cuerpo = new Nodo("cuerpo", "");
                                                                    ArrayList arregloBody = (ArrayList) body;
                                                                    if(arregloBody != null){
                                                                        for(int i = 0; i < arregloBody.size(); i++){
                                                                            Nodo temp = ((Nodo)arregloBody.get(i));
                                                                            cuerpo.addHijo(temp);
                                                                        }
                                                                    }
                                                                    ArrayList arregloCondicion = (ArrayList) cond;
                                                                    if(arregloCondicion != null){
                                                                        for(int i = 0; i < arregloCondicion.size(); i++){
                                                                            if( ("&&".equals(((Nodo)arregloCondicion.get(i)).getTipo()) || "||".equals(((Nodo)arregloCondicion.get(i)).getTipo())) || arregloCondicion.size() == 1 ){
                                                                                Nodo temp = ((Nodo)arregloCondicion.get(i));
                                                                                condicion.addHijo(temp);
                                                                            }
                                                                        }
                                                                    }
                                                                    nodo.addHijo(condicion);
                                                                    nodo.addHijo(cuerpo);
                                                                    ArrayList arregloNodos = new ArrayList();
                                                                    arregloNodos.add(nodo);
                                                                    RESULT = arregloNodos; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("while",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // while ::= WHILE error conditionalExpr RPAR LKEY body RKEY 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println("Expected '('."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("while",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // while ::= WHILE LPAR conditionalExpr error LKEY body RKEY 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println("Expected ')'."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("while",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // while ::= WHILE LPAR conditionalExpr RPAR error body RKEY 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println("Expected '{'."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("while",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // while ::= WHILE LPAR conditionalExpr RPAR LKEY body error 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println("Expected '}'."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("while",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$2 ::= 
            {
              Object RESULT =null;
 ambito+=".dowhile"; profundidad++; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 quitarAmbito(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // doWhile ::= DO LKEY NT$2 body NT$3 RKEY WHILE LPAR conditionalExpr RPAR DASH 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 Nodo nodo = new Nodo("do while", "");
                                                                        Nodo condicion = new Nodo("condicion", "");
                                                                        Nodo cuerpo = new Nodo("cuerpo", "");
                                                                        ArrayList arregloBody = (ArrayList) body;
                                                                        if(arregloBody != null){
                                                                            for(int i = 0; i < arregloBody.size(); i++){
                                                                                Nodo temp = ((Nodo)arregloBody.get(i));
                                                                                cuerpo.addHijo(temp);
                                                                            }
                                                                        }
                                                                        ArrayList arregloCondicion = (ArrayList) cond;
                                                                        if(arregloCondicion != null){
                                                                            for(int i = 0; i < arregloCondicion.size(); i++){
                                                                                if( ("&&".equals(((Nodo)arregloCondicion.get(i)).getTipo()) || "||".equals(((Nodo)arregloCondicion.get(i)).getTipo())) || arregloCondicion.size() == 1 ){
                                                                                    Nodo temp = ((Nodo)arregloCondicion.get(i));
                                                                                    condicion.addHijo(temp);
                                                                                }
                                                                            }
                                                                        }
                                                                        nodo.addHijo(condicion);
                                                                        nodo.addHijo(cuerpo);
                                                                        ArrayList arregloNodos = new ArrayList();
                                                                        arregloNodos.add(nodo);
                                                                        RESULT = arregloNodos; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("doWhile",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // doWhile ::= error LKEY body RKEY WHILE LPAR conditionalExpr RPAR DASH 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		 System.out.println("Expected do."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("doWhile",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // doWhile ::= DO error body RKEY WHILE LPAR conditionalExpr RPAR DASH 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		 System.out.println("Expected '{'."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("doWhile",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // for ::= FOR LPAR declaracionFor SEMICOLON conditionalExpr SEMICOLON ID autoAssign RPAR LKEY body RKEY 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Nodo nodo = new Nodo("for", "");
                                                                                                            Nodo condicion = new Nodo("condicion", "");
                                                                                                            Nodo cuerpo = new Nodo("cuerpo", "");
                                                                                                            ArrayList arregloBody = (ArrayList) body;
                                                                                                            if(arregloBody != null){
                                                                                                                for(int i = 0; i < arregloBody.size(); i++){
                                                                                                                    Nodo temp = ((Nodo)arregloBody.get(i));
                                                                                                                    cuerpo.addHijo(temp);
                                                                                                                }
                                                                                                            }
                                                                                                            ArrayList arregloCondicion = (ArrayList) cond;
                                                                                                            if(arregloCondicion != null){
                                                                                                                for(int i = 0; i < arregloCondicion.size(); i++){
                                                                                                                    if( ("&&".equals(((Nodo)arregloCondicion.get(i)).getTipo()) || "||".equals(((Nodo)arregloCondicion.get(i)).getTipo())) || arregloCondicion.size() == 1 ){
                                                                                                                        Nodo temp = ((Nodo)arregloCondicion.get(i));
                                                                                                                        condicion.addHijo(temp);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            nodo.addHijo(condicion);
                                                                                                            nodo.addHijo(cuerpo);
                                                                                                            ArrayList arregloNodos = new ArrayList();
                                                                                                            arregloNodos.add(nodo);
                                                                                                            RESULT = arregloNodos; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // autoAssign ::= ADDFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("autoAssign",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // autoAssign ::= MINUSFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("autoAssign",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // autoAssign ::= MULTFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("autoAssign",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // autoAssign ::= error 
            {
              Object RESULT =null;
		 System.out.println("Unexpected character."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("autoAssign",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // declaracionFor ::= declaracionFor COMMA instanciacionIntegerFor 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionFor",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // declaracionFor ::= INT instanciacionIntegerFor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionFor",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // declaracionFor ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionFor",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // instanciacionIntegerFor ::= ID ASSIGN INTEGER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntegerFor",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // instanciacionIntegerFor ::= error ASSIGN INTEGER 
            {
              Object RESULT =null;
		 System.out.println("Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntegerFor",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // instanciacionIntegerFor ::= ID error INTEGER 
            {
              Object RESULT =null;
		 System.out.println("Expected '='."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntegerFor",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // instanciacionIntegerFor ::= ID ASSIGN error 
            {
              Object RESULT =null;
		 System.out.println("Expected a number."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntegerFor",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // switch ::= SWITCH LPAR ID RPAR LKEY caseExist default RKEY 
            {
              Object RESULT =null;
		int caseEleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int caseEright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object caseE = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 Nodo nodo = new Nodo("switch", "");
                                                                ArrayList arregloNodos = new ArrayList();
                                                                ArrayList arregloCase = (ArrayList) caseE;
                                                                System.out.println("y4");
                                                                if(arregloCase != null) {
                                                                    for(int i = 0; i < arregloCase.size(); i++){
                                                                        Nodo temp = ((Nodo)arregloCase.get(i));
                                                                        nodo.addHijo(temp);
                                                                    }
                                                                }
                                                                System.out.println("y5");
                                                                arregloNodos.add(nodo);
                                                                RESULT = arregloNodos; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("switch",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // caseExist ::= case 
            {
              Object RESULT =null;
		int caseEleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int caseEright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object caseE = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = caseE; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caseExist",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // caseExist ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caseExist",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // case ::= case declaracionCase 
            {
              Object RESULT =null;
		int casesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object cases = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int currCaseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int currCaseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object currCase = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(cases != null){
                                                    ArrayList arregloNodos = (ArrayList) cases;
                                                    ArrayList arregloCommand = (ArrayList) currCase;
                                                    Nodo caseE = (Nodo)arregloCommand.get(0);
                                                    arregloNodos.add( caseE );
                                                    System.out.println("y3");
                                                    RESULT = arregloNodos;
                                                 } else {
                                                    ArrayList arregloCommand = (ArrayList) currCase;
                                                    Nodo caseE = (Nodo)arregloCommand.get(0);
                                                    System.out.println("y2");
                                                    RESULT = currCase;}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("case",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // case ::= declaracionCase 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = dec; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("case",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // declaracionCase ::= CASE varCase COLON body caseBreak 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Nodo nodo = new Nodo("case","");
                                                        ArrayList nodos = new ArrayList();
                                                        ArrayList arregloNodos = (ArrayList) body;
                                                        if(arregloNodos != null){
                                                            for(int i = 0; i < arregloNodos.size(); i++){
                                                                Nodo temp = ((Nodo)arregloNodos.get(i));
                                                                nodo.addHijo(temp);
                                                            } 
                                                        }
                                                        nodos.add(nodo);
                                                        System.out.println("y1");
                                                        RESULT = nodos; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionCase",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // varCase ::= INTEGER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varCase",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // varCase ::= SIMCOM LETTER SIMCOM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varCase",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // caseBreak ::= BREAK DASH 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caseBreak",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // caseBreak ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caseBreak",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // default ::= DEFAULT COLON body caseBreak 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("default",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // default ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("default",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // body ::= body declaracion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null){
                                ArrayList arregloNodos = (ArrayList) b;
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo declaracionVar = (Nodo)arregloCommand.get(0);
                                arregloNodos.add( declaracionVar );
                                RESULT = arregloNodos;
                             } else {
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo declaracionVar = (Nodo)arregloCommand.get(0);
                                RESULT = a;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // body ::= body if 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null){
                        ArrayList arregloNodos = (ArrayList) b;
                        ArrayList arregloCommand = (ArrayList) a;
                        for(int i = 0; i < arregloCommand.size(); i++){
                            Nodo temp = (Nodo)arregloCommand.get(i);
                            arregloNodos.add( temp );
                        }
                        RESULT = arregloNodos;
                     } else {
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo ifVar = (Nodo)arregloCommand.get(0);
                        RESULT = a;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NT$4 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 ambito+=".while"; profundidad++; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",86, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // body ::= body NT$4 while 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 quitarAmbito();
                    if(b != null){
                        ArrayList arregloNodos = (ArrayList) b;
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo whileVar = (Nodo)arregloCommand.get(0);
                        arregloNodos.add( whileVar );
                        RESULT = arregloNodos;
                     } else {
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo whileVar = (Nodo)arregloCommand.get(0);
                        RESULT = a;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // body ::= body doWhile 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null){
                            ArrayList arregloNodos = (ArrayList) b;
                            ArrayList arregloCommand = (ArrayList) a;
                            Nodo doWhile = (Nodo)arregloCommand.get(0);
                            arregloNodos.add( doWhile );
                            RESULT = arregloNodos;
                         } else {
                            ArrayList arregloCommand = (ArrayList) a;
                            Nodo doWhile = (Nodo)arregloCommand.get(0);
                            RESULT = a;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NT$5 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 ambito+=".for"; profundidad++; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",87, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // body ::= body NT$5 for 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 quitarAmbito();
                    if(b != null){
                        ArrayList arregloNodos = (ArrayList) b;
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo forVar = (Nodo)arregloCommand.get(0);
                        arregloNodos.add( forVar );
                        RESULT = arregloNodos;
                    } else {
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo forVar = (Nodo)arregloCommand.get(0);
                        RESULT = a;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // NT$6 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 ambito+=".switch"; profundidad++; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",88, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // body ::= body NT$6 switch 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 quitarAmbito();
                    if(b != null){
                        ArrayList arregloNodos = (ArrayList) b;
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo switchVar = (Nodo)arregloCommand.get(0);
                        arregloNodos.add( switchVar );
                        RESULT = arregloNodos;
                     } else {
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo switchVar = (Nodo)arregloCommand.get(0);
                        RESULT = a;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // body ::= body entry 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null){
                                ArrayList arregloNodos = (ArrayList) b;
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo entrada = (Nodo)arregloCommand.get(0);
                                arregloNodos.add( entrada );
                                RESULT = arregloNodos;
                             } else {
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo entrada = (Nodo)arregloCommand.get(0);
                                RESULT = a;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // body ::= body salida 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null){
                                ArrayList arregloNodos = (ArrayList) b;
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo salida = (Nodo)arregloCommand.get(0);
                                arregloNodos.add( salida );
                                RESULT = arregloNodos;
                             } else {
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo salida = (Nodo)arregloCommand.get(0);
                                RESULT = a;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // body ::= body assign_var 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null){
                                ArrayList arregloNodos = (ArrayList) b;
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo assign_var = (Nodo)arregloCommand.get(0);
                                arregloNodos.add( assign_var );
                                RESULT = arregloNodos;
                             } else {
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo assign_var = (Nodo)arregloCommand.get(0);
                                RESULT = a;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // body ::= 
            {
              Object RESULT =null;
		
            ArrayList arreglo = new ArrayList();
            RESULT = arreglo;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // NT$7 ::= 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 ambito+="."+nombre.toString(); profundidad=0; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",89, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // dec_function ::= FUNCTION ID NT$7 ARROW LPAR parameters RPAR LKEY body RETURN varRet DASH RKEY DASH 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 Nodo nodo = new Nodo("funcion", nombre.toString());
                            String tipoRetorno = "";
                            if(isNumeric(ret.toString()))
                                tipoRetorno = "int";
                            else if(ret.toString().length() > 0)
                                tipoRetorno = buscarTipo(ret.toString());
                            else
                                tipoRetorno = "Variable de retorno no ha sido declarada";
                            
                            String tipoFunc = "";
                            String parametrosFunc = "";
                            ArrayList arregloParams = (ArrayList)params;
                            for(int i = 0; i < arregloParams.size(); i++){
                                parametrosFunc+=((String)arregloParams.get(i));
                                if(i != arregloParams.size()-1)
                                    parametrosFunc+=" x ";
                            }
                            quitarAmbito();
                            tipoFunc+=parametrosFunc+ " -> " + tipoRetorno;
                            Tabla nuevaVar = new Tabla(nombre.toString(), tipoFunc, ambito, profundidad, 0);
                            tabla.add( nuevaVar );
                            
                            ArrayList arregloNodos = (ArrayList) body;
                            for(int i = 0; i < arregloNodos.size(); i++){
                                Nodo temp = ((Nodo)arregloNodos.get(i));
                                nodo.addHijo(temp);
                            }
                            Nodo nodoRet = new Nodo("return", ret.toString());
                            nodo.addHijo(nodoRet);
                            ArrayList arregloFuncion = new ArrayList();
                            arregloFuncion.add(nodo);
                            RESULT = arregloFuncion; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_function",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // func ::= ID LPAR ids RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  ArrayList arreglo = new ArrayList();
                                            Nodo func = new Nodo("FuncionCall",id.toString());
                                            arreglo.add(func);
                                            ArrayList idsArray = (ArrayList)ids;
                                            String variables = "";
                                            for (int i = 0; i < idsArray.size(); i++) {
                                                variables+=idsArray.get(i)+" ";
                                            }
                                            String llamado = id.toString()+"("+variables+")";
                                            RESULT = llamado; 
                                            System.out.println("Nodo funcion creado"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("func",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // func ::= ID error LPAR ids RPAR 
            {
              Object RESULT =null;
		 System.out.println("Expected '=>'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("func",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // func ::= ID ARROW error ids RPAR 
            {
              Object RESULT =null;
		 System.out.println("Expected '('"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("func",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // func ::= ID ARROW LPAR ids error 
            {
              Object RESULT =null;
		 System.out.println("Expected ')'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("func",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // NT$8 ::= 
            {
              Object RESULT =null;
 ambito+=".main"; profundidad=0; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // dec_main ::= MAIN ARROW LPAR NT$8 parameters RPAR LKEY body RETURN varRet DASH RKEY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 Nodo nodo = new Nodo("main", "");
                                                                                    String tipoRetorno = "";
                                                                                    if(isNumeric(ret.toString()))
                                                                                        tipoRetorno = "int";
                                                                                    else if(ret.toString().length() > 0)
                                                                                        tipoRetorno = buscarTipo(ret.toString());
                                                                                    else
                                                                                        tipoRetorno = "Variable de retorno no ha sido declarada";

                                                                                    String tipoFunc = "";
                                                                                    String parametrosFunc = "";
                                                                                    ArrayList arregloParams = (ArrayList)params;
                                                                                    for(int i = 0; i < arregloParams.size(); i++){
                                                                                        parametrosFunc+=((String)arregloParams.get(i));
                                                                                        if(i != arregloParams.size()-1)
                                                                                            parametrosFunc+=" x ";
                                                                                    }
                                                                                    quitarAmbito();
                                                                                    tipoFunc+=parametrosFunc+ " -> " + tipoRetorno;
                                                                                    Tabla nuevaVar = new Tabla("main", tipoFunc, ambito, profundidad, 0);
                                                                                    tabla.add( nuevaVar );
                                                                                    ArrayList arregloNodos = (ArrayList) body;
                                                                                    for(int i = 0; i < arregloNodos.size(); i++){
                                                                                        Nodo temp = ((Nodo)arregloNodos.get(i));
                                                                                        nodo.addHijo(temp);
                                                                                    }
                                                                                    Nodo nodoRet = new Nodo("return", ret.toString());
                                                                                    nodo.addHijo(nodoRet);
                                                                                    ArrayList arregloFuncion = new ArrayList();
                                                                                    arregloFuncion.add(nodo);
                                                                                    RESULT = arregloFuncion;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_main",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // parameters ::= parameters COMMA params_type ID 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		ArrayList arregloParams = (ArrayList)params;
                                                arregloParams.add(param.toString());
                                                RESULT = arregloParams;
                                                Tabla nuevaVar = new Tabla((String)id, param.toString(), ambito, profundidad, 0);
                                                tabla.add( nuevaVar ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parameters",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // parameters ::= params_type ID 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		ArrayList arregloParams = new ArrayList();
                                arregloParams.add(param.toString());
                                RESULT = arregloParams;
                                Tabla nuevaVar = new Tabla((String)id, param.toString(), ambito, profundidad, 0);
                                tabla.add( nuevaVar ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parameters",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // parameters ::= 
            {
              Object RESULT =null;
		  ArrayList arregloParams = new ArrayList();
            RESULT = arregloParams; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parameters",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ids ::= moreIds 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		ArrayList idsArray = (ArrayList)ids;
                                RESULT = idsArray; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ids",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // ids ::= 
            {
              Object RESULT =null;
		ArrayList idsArray = new ArrayList();
        RESULT = idsArray; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ids",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // moreIds ::= moreIds COMMA ID 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 ArrayList idsArray = (ArrayList)ids;
                                            idsArray.add(id.toString());
                                            RESULT = idsArray; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("moreIds",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // moreIds ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 ArrayList ids = new ArrayList();
                    ids.add(id.toString());
                    RESULT = ids; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("moreIds",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // params_type ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // params_type ::= INTPTR 
            {
              Object RESULT =null;
		 RESULT = "int*"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // params_type ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // params_type ::= CHARPTR 
            {
              Object RESULT =null;
		 RESULT = "char*"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // params_type ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "bool"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // params_type ::= BOOLPTR 
            {
              Object RESULT =null;
		 RESULT = "bool*"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // params_type ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // params_type ::= error 
            {
              Object RESULT =null;
		 System.out.println("Expected type"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // varRet ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varRet",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // varRet ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = "true"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varRet",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // varRet ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = "false"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varRet",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // varRet ::= INTEGER 
            {
              Object RESULT =null;
		int inteleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int interight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object inte = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = inte.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varRet",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // varRet ::= error 
            {
              Object RESULT =null;
		 System.out.println("Expected return variable"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varRet",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // assign_var ::= ID ASSIGN arithmetic_exp DASH 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		   String s = id.toString() + "=" + ae;
                                                        System.out.println("\u001B[31m" + "------------>  " + s);
                                                        ArrayList arreglo = new ArrayList();
                                                        Nodo op_aritmetica= new Nodo("aritmetica",s);
                                                        s = getOp(s);
                                                        arreglo.add(op_aritmetica);
                                                        cuads.add(new Cuadruplo("=",id.toString(),"t_" + this.parser.contTemp++));
                                                        Infix2Postfix inf = new Infix2Postfix(s);
                                                        inf.CodigoIntermedio();
                                                        RESULT = arreglo;
                                                        System.out.println("Nodo Arithmetic creado"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("assign_var",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // arithmetic_exp ::= term 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = term; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_exp",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // arithmetic_exp ::= arithmetic_exp ADD_OP term 
            {
              Object RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object se1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 String add = se1.toString() + "+" + term.toString(); 
                                                           RESULT = add; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_exp",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // arithmetic_exp ::= arithmetic_exp MINUS_OP term 
            {
              Object RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object se1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int minleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 String sub = se1.toString() + "-" + term.toString(); 
                                                           RESULT = sub; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_exp",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // term ::= factor 
            {
              Object RESULT =null;
		int factleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = fact.toString();
                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("term",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // term ::= term MULT_OP factor 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int timleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int timright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tim = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int factleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 String mult = term.toString() + "*" + fact.toString();
                                                RESULT = mult;
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("term",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // term ::= term DIV_OP factor 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int divleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int divright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int factleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 String div1 = term.toString() + "/" + fact.toString();
                                                RESULT = div1;
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("term",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // factor ::= INTEGER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // factor ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // factor ::= TRUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // factor ::= FALSE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // factor ::= func 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = fun.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // factor ::= LPAR arithmetic_exp RPAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // entry ::= READ LPAR ID RPAR DASH 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		  ArrayList arreglo = new ArrayList();
                                            Nodo entrada = new Nodo("entrada",id.toString());
                                            arreglo.add(entrada);
                                            RESULT = arreglo; 
                                            System.out.println("Nodo entry creado"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entry",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // entry ::= READ error ID RPAR DASH 
            {
              Object RESULT =null;
		 System.out.println("Expected '('"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entry",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // entry ::= READ LPAR error RPAR DASH 
            {
              Object RESULT =null;
		 System.out.println("Expected in-variable"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entry",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // entry ::= READ LPAR ID error DASH 
            {
              Object RESULT =null;
		 System.out.println("Expected ')'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entry",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // entry ::= READ LPAR ID RPAR error 
            {
              Object RESULT =null;
		 System.out.println("Expected '-' at end of line"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entry",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // salida ::= PRINT LPAR content_print RPAR DASH 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 ArrayList arreglo = new ArrayList();
                                                    System.out.println("\u001B[32m" + c);
                                                    Nodo salida = new Nodo("salida",c.toString());
                                                    arreglo.add(salida);
                                                    RESULT = arreglo; 
                                                    System.out.println("Nodo print creado"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("salida",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // salida ::= PRINT error content_print RPAR DASH 
            {
              Object RESULT =null;
		 System.out.println("Expected '('"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("salida",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // salida ::= PRINT LPAR content_print error DASH 
            {
              Object RESULT =null;
		 System.out.println("Expected ')'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("salida",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // salida ::= PRINT LPAR content_print RPAR error 
            {
              Object RESULT =null;
		 System.out.println("Expected '-' at end of line"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("salida",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // content_print ::= id_text more_content 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 String s = a + "|" + b;
                                                RESULT = s; 
                                           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("content_print",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // more_content ::= ADD_OP id_text more_content 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 String s = a + "|" + b;
                                                        RESULT = s;                                                      
                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("more_content",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // more_content ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("more_content",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // id_text ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id.toString();  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("id_text",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // id_text ::= TEXT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id.toString();  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("id_text",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // id_text ::= error 
            {
              Object RESULT =null;
		 System.out.println("Expected printing content"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("id_text",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
