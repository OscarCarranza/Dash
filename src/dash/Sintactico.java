
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jun 29 22:00:27 CST 2018
//----------------------------------------------------

package dash;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Nodos.Nodo;
import Nodos.Variable;
import Nodos.Tabla;
import Nodos.Cuadruplo;
import Nodos.Infix2Postfix;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jun 29 22:00:27 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\371\000\002\002\004\000\002\002\003\000\002\130" +
    "\004\000\002\130\003\000\002\127\003\000\002\127\003" +
    "\000\002\127\003\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\004\005\000" +
    "\002\004\004\000\002\005\004\000\002\005\004\000\002" +
    "\006\004\000\002\006\002\000\002\010\003\000\002\010" +
    "\005\000\002\010\005\000\002\010\003\000\002\031\005" +
    "\000\002\031\004\000\002\032\004\000\002\032\004\000" +
    "\002\033\004\000\002\033\002\000\002\007\004\000\002" +
    "\007\005\000\002\012\005\000\002\012\004\000\002\013" +
    "\004\000\002\013\004\000\002\014\004\000\002\014\002" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\016\003\000\002\016" +
    "\005\000\002\016\005\000\002\016\003\000\002\034\005" +
    "\000\002\034\004\000\002\035\004\000\002\035\004\000" +
    "\002\036\004\000\002\036\002\000\002\011\004\000\002" +
    "\011\005\000\002\017\005\000\002\017\004\000\002\020" +
    "\004\000\002\020\004\000\002\021\004\000\002\021\002" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\037\005\000\002\037\004\000\002\023\004\000\002" +
    "\023\004\000\002\041\004\000\002\041\002\000\002\023" +
    "\004\000\002\023\005\000\002\024\003\000\002\024\005" +
    "\000\002\025\005\000\002\025\004\000\002\026\004\000" +
    "\002\026\004\000\002\027\006\000\002\027\002\000\002" +
    "\030\004\000\002\030\003\000\002\030\005\000\002\030" +
    "\003\000\002\046\005\000\002\046\003\000\002\046\007" +
    "\000\002\047\005\000\002\047\003\000\002\047\007\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\051\004\000\002\051\005\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\052\004\000\002\052\002" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\131" +
    "\002\000\002\132\002\000\002\055\014\000\002\055\012" +
    "\000\002\055\012\000\002\056\005\000\002\056\002\000" +
    "\002\060\011\000\002\060\011\000\002\060\011\000\002" +
    "\060\011\000\002\060\011\000\002\060\011\000\002\061" +
    "\011\000\002\061\011\000\002\061\011\000\002\061\011" +
    "\000\002\061\011\000\002\133\002\000\002\134\002\000" +
    "\002\062\015\000\002\062\013\000\002\062\013\000\002" +
    "\063\016\000\002\064\003\000\002\064\003\000\002\064" +
    "\003\000\002\064\003\000\002\065\005\000\002\065\004" +
    "\000\002\065\002\000\002\066\005\000\002\066\005\000" +
    "\002\066\005\000\002\066\005\000\002\067\012\000\002" +
    "\070\003\000\002\070\002\000\002\071\004\000\002\071" +
    "\003\000\002\072\007\000\002\073\003\000\002\073\005" +
    "\000\002\074\004\000\002\074\002\000\002\075\006\000" +
    "\002\075\002\000\002\044\004\000\002\044\004\000\002" +
    "\135\002\000\002\044\005\000\002\044\004\000\002\136" +
    "\002\000\002\044\005\000\002\137\002\000\002\044\005" +
    "\000\002\044\004\000\002\044\004\000\002\044\004\000" +
    "\002\044\004\000\002\044\002\000\002\140\002\000\002" +
    "\141\002\000\002\076\021\000\002\110\006\000\002\110" +
    "\011\000\002\110\011\000\002\110\011\000\002\110\011" +
    "\000\002\142\002\000\002\143\002\000\002\102\017\000" +
    "\002\077\006\000\002\077\004\000\002\122\003\000\002" +
    "\122\002\000\002\123\005\000\002\123\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\100\003\000\002\100\003\000\002\100\003\000" +
    "\002\100\003\000\002\100\003\000\002\100\003\000\002" +
    "\100\003\000\002\100\003\000\002\101\003\000\002\101" +
    "\003\000\002\101\003\000\002\101\003\000\002\101\003" +
    "\000\002\111\006\000\002\103\003\000\002\103\005\000" +
    "\002\103\005\000\002\104\003\000\002\104\005\000\002" +
    "\104\005\000\002\105\003\000\002\105\003\000\002\105" +
    "\003\000\002\105\003\000\002\105\003\000\002\105\005" +
    "\000\002\112\007\000\002\112\007\000\002\112\007\000" +
    "\002\112\007\000\002\112\007\000\002\113\007\000\002" +
    "\113\007\000\002\113\007\000\002\113\007\000\002\114" +
    "\004\000\002\115\005\000\002\115\002\000\002\117\003" +
    "\000\002\117\003\000\002\117\003\000\002\124\004\000" +
    "\002\125\005\000\002\125\002\000\002\126\003\000\002" +
    "\126\003\000\002\126\003\000\002\126\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01e9\000\024\005\005\006\020\007\007\010\011\011" +
    "\024\012\030\013\017\015\012\016\022\001\002\000\026" +
    "\002\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\015\ufffd\016\ufffd\001\002\000\006\003\u01dc" +
    "\033\u01db\001\002\000\010\003\u01d9\051\u01d8\072\u01da\001" +
    "\002\000\006\003\117\033\116\001\002\000\010\003\u01d5" +
    "\051\u01d3\072\u01d4\001\002\000\006\003\060\033\057\001" +
    "\002\000\004\033\u01c4\001\002\000\026\002\000\005\005" +
    "\006\020\007\007\010\011\011\024\012\030\013\017\015" +
    "\012\016\022\001\002\000\026\002\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\015\ufffe\016" +
    "\ufffe\001\002\000\010\003\u01c1\051\u01bf\072\u01c0\001\002" +
    "\000\026\002\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\012\ufffb\013\ufffb\015\ufffb\016\ufffb\001\002\000\006" +
    "\003\u01b3\033\u01b1\001\002\000\006\003\137\033\136\001" +
    "\002\000\010\003\u01ae\051\u01ac\072\u01ad\001\002\000\004" +
    "\014\156\001\002\000\010\003\135\051\133\072\134\001" +
    "\002\000\006\003\125\033\124\001\002\000\010\003\114" +
    "\051\112\072\113\001\002\000\010\003\055\051\054\072" +
    "\056\001\002\000\026\002\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\013\ufffc\015\ufffc\016\ufffc\001" +
    "\002\000\010\003\034\033\033\063\035\001\002\000\004" +
    "\002\032\001\002\000\004\002\001\001\002\000\012\003" +
    "\uffb2\043\051\051\uffb2\072\uffb2\001\002\000\012\003\uffb2" +
    "\043\051\051\uffb2\072\uffb2\001\002\000\012\003\041\064" +
    "\043\075\042\076\044\001\002\000\010\003\uffb6\051\uffb6" +
    "\072\uffb6\001\002\000\006\051\045\064\046\001\002\000" +
    "\006\051\uffaf\064\uffaf\001\002\000\012\003\uffb8\051\uffb8" +
    "\064\uffb8\072\uffb8\001\002\000\012\003\uffba\051\uffba\064" +
    "\uffba\072\uffba\001\002\000\010\003\uffb1\051\uffb1\072\uffb1" +
    "\001\002\000\012\003\uffb9\051\uffb9\064\uffb9\072\uffb9\001" +
    "\002\000\010\003\041\075\042\076\044\001\002\000\010" +
    "\003\uffb0\051\uffb0\072\uffb0\001\002\000\006\051\uffae\064" +
    "\uffae\001\002\000\010\003\uffb4\051\uffb4\072\uffb4\001\002" +
    "\000\010\003\034\033\033\063\035\001\002\000\010\003" +
    "\uffb3\051\uffb3\072\uffb3\001\002\000\010\003\uffb5\051\uffb5" +
    "\072\uffb5\001\002\000\006\003\060\033\057\001\002\000" +
    "\062\002\ufff3\003\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3" +
    "\030\ufff3\031\ufff3\032\ufff3\033\ufff3\066\ufff3\001\002\000" +
    "\062\002\ufff4\003\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\032\ufff4\033\ufff4\066\ufff4\001\002\000" +
    "\012\003\uffc3\043\063\051\uffc3\072\uffc3\001\002\000\012" +
    "\003\uffc3\043\063\051\uffc3\072\uffc3\001\002\000\010\003" +
    "\uffc8\051\uffc8\072\uffc8\001\002\000\010\003\uffc5\051\uffc5" +
    "\072\uffc5\001\002\000\004\063\064\001\002\000\012\003" +
    "\066\064\070\077\067\100\072\001\002\000\010\003\uffc4" +
    "\051\uffc4\072\uffc4\001\002\000\004\073\106\001\002\000" +
    "\006\003\101\073\102\001\002\000\010\003\uffc2\051\uffc2" +
    "\072\uffc2\001\002\000\004\064\100\001\002\000\006\003" +
    "\073\073\074\001\002\000\004\100\077\001\002\000\006" +
    "\003\075\100\076\001\002\000\012\003\uffce\051\uffce\064" +
    "\uffce\072\uffce\001\002\000\012\003\uffd0\051\uffd0\064\uffd0" +
    "\072\uffd0\001\002\000\012\003\uffcd\051\uffcd\064\uffcd\072" +
    "\uffcd\001\002\000\010\003\uffc1\051\uffc1\072\uffc1\001\002" +
    "\000\004\077\105\001\002\000\006\003\103\077\104\001" +
    "\002\000\012\003\uffd2\051\uffd2\064\uffd2\072\uffd2\001\002" +
    "\000\012\003\uffd4\051\uffd4\064\uffd4\072\uffd4\001\002\000" +
    "\012\003\uffd1\051\uffd1\064\uffd1\072\uffd1\001\002\000\006" +
    "\077\107\100\110\001\002\000\012\003\uffd3\051\uffd3\064" +
    "\uffd3\072\uffd3\001\002\000\012\003\uffcf\051\uffcf\064\uffcf" +
    "\072\uffcf\001\002\000\010\003\uffc6\051\uffc6\072\uffc6\001" +
    "\002\000\006\003\117\033\116\001\002\000\062\002\ufff6" +
    "\003\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\022\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\066\ufff6\001\002\000\062\002\ufff5" +
    "\003\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\022\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031" +
    "\ufff5\032\ufff5\033\ufff5\066\ufff5\001\002\000\010\003\uffda" +
    "\051\uffda\072\uffda\001\002\000\012\003\uffd5\043\121\051" +
    "\uffd5\072\uffd5\001\002\000\012\003\uffd5\043\121\051\uffd5" +
    "\072\uffd5\001\002\000\010\003\uffd7\051\uffd7\072\uffd7\001" +
    "\002\000\010\003\066\077\067\100\072\001\002\000\010" +
    "\003\uffd6\051\uffd6\072\uffd6\001\002\000\010\003\uffd8\051" +
    "\uffd8\072\uffd8\001\002\000\012\003\uffbb\043\130\051\uffbb" +
    "\072\uffbb\001\002\000\012\003\uffbb\043\130\051\uffbb\072" +
    "\uffbb\001\002\000\010\003\uffbf\051\uffbf\072\uffbf\001\002" +
    "\000\010\003\uffbd\051\uffbd\072\uffbd\001\002\000\010\003" +
    "\041\075\042\076\044\001\002\000\010\003\uffbc\051\uffbc" +
    "\072\uffbc\001\002\000\010\003\uffbe\051\uffbe\072\uffbe\001" +
    "\002\000\006\003\137\033\136\001\002\000\062\002\ufff8" +
    "\003\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031" +
    "\ufff8\032\ufff8\033\ufff8\066\ufff8\001\002\000\062\002\ufff7" +
    "\003\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\033\ufff7\066\ufff7\001\002\000\012\003\uffdd" +
    "\043\142\051\uffdd\072\uffdd\001\002\000\012\003\uffdd\043" +
    "\142\051\uffdd\072\uffdd\001\002\000\010\003\uffe2\051\uffe2" +
    "\072\uffe2\001\002\000\010\003\uffdf\051\uffdf\072\uffdf\001" +
    "\002\000\004\063\143\001\002\000\010\003\146\064\150" +
    "\074\145\001\002\000\010\003\uffde\051\uffde\072\uffde\001" +
    "\002\000\006\051\uffe6\064\uffe6\001\002\000\006\051\uffe3" +
    "\064\uffe3\001\002\000\006\051\151\064\152\001\002\000" +
    "\010\003\uffdc\051\uffdc\072\uffdc\001\002\000\006\003\154" +
    "\074\153\001\002\000\010\003\uffdb\051\uffdb\072\uffdb\001" +
    "\002\000\006\051\uffe5\064\uffe5\001\002\000\006\051\uffe4" +
    "\064\uffe4\001\002\000\010\003\uffe0\051\uffe0\072\uffe0\001" +
    "\002\000\004\061\157\001\002\000\022\003\uff45\005\uff45" +
    "\006\uff45\007\uff45\010\uff45\011\uff45\012\uff45\013\uff45\001" +
    "\002\000\022\003\166\005\161\006\164\007\172\010\170" +
    "\011\162\012\171\013\165\001\002\000\004\033\uff38\001" +
    "\002\000\004\033\uff34\001\002\000\004\033\u01ab\001\002" +
    "\000\004\033\uff37\001\002\000\004\033\uff32\001\002\000" +
    "\004\033\uff31\001\002\000\006\051\173\062\174\001\002" +
    "\000\004\033\uff35\001\002\000\004\033\uff33\001\002\000" +
    "\004\033\uff36\001\002\000\022\003\166\005\161\006\164" +
    "\007\172\010\170\011\162\012\171\013\165\001\002\000" +
    "\004\065\uff44\001\002\000\004\065\176\001\002\000\044" +
    "\003\uff4e\005\uff4e\006\uff4e\007\uff4e\010\uff4e\011\uff4e\012" +
    "\uff4e\013\uff4e\017\uff4e\020\uff4e\021\uff4e\022\uff4e\024\uff4e" +
    "\025\uff4e\026\uff4e\027\uff4e\033\uff4e\001\002\000\044\003" +
    "\217\005\005\006\020\007\007\010\011\011\024\012\030" +
    "\013\017\017\207\020\200\021\220\022\210\024\uff56\025" +
    "\uff59\026\212\027\uff54\033\211\001\002\000\006\003\u019b" +
    "\061\u019c\001\002\000\054\003\uff51\005\uff51\006\uff51\007" +
    "\uff51\010\uff51\011\uff51\012\uff51\013\uff51\017\uff51\020\uff51" +
    "\021\uff51\022\uff51\024\uff51\025\uff51\026\uff51\027\uff51\030" +
    "\uff51\031\uff51\032\uff51\033\uff51\066\uff51\001\002\000\054" +
    "\003\uff50\005\uff50\006\uff50\007\uff50\010\uff50\011\uff50\012" +
    "\uff50\013\uff50\017\uff50\020\uff50\021\uff50\022\uff50\024\uff50" +
    "\025\uff50\026\uff50\027\uff50\030\uff50\031\uff50\032\uff50\033" +
    "\uff50\066\uff50\001\002\000\004\027\u0180\001\002\000\004" +
    "\024\u0162\001\002\000\004\025\u014d\001\002\000\054\003" +
    "\uff52\005\uff52\006\uff52\007\uff52\010\uff52\011\uff52\012\uff52" +
    "\013\uff52\017\uff52\020\uff52\021\uff52\022\uff52\024\uff52\025" +
    "\uff52\026\uff52\027\uff52\030\uff52\031\uff52\032\uff52\033\uff52" +
    "\066\uff52\001\002\000\014\003\u0147\033\u0144\074\u0145\075" +
    "\u0148\076\u0149\001\002\000\006\003\u0134\061\u0135\001\002" +
    "\000\012\003\u0102\014\u0104\043\u0105\061\u0103\001\002\000" +
    "\006\003\360\065\361\001\002\000\054\003\uff5b\005\uff5b" +
    "\006\uff5b\007\uff5b\010\uff5b\011\uff5b\012\uff5b\013\uff5b\017" +
    "\uff5b\020\uff5b\021\uff5b\022\uff5b\024\uff5b\025\uff5b\026\uff5b" +
    "\027\uff5b\030\uff5b\031\uff5b\032\uff5b\033\uff5b\066\uff5b\001" +
    "\002\000\054\003\uff57\005\uff57\006\uff57\007\uff57\010\uff57" +
    "\011\uff57\012\uff57\013\uff57\017\uff57\020\uff57\021\uff57\022" +
    "\uff57\024\uff57\025\uff57\026\uff57\027\uff57\030\uff57\031\uff57" +
    "\032\uff57\033\uff57\066\uff57\001\002\000\054\003\uff5a\005" +
    "\uff5a\006\uff5a\007\uff5a\010\uff5a\011\uff5a\012\uff5a\013\uff5a" +
    "\017\uff5a\020\uff5a\021\uff5a\022\uff5a\024\uff5a\025\uff5a\026" +
    "\uff5a\027\uff5a\030\uff5a\031\uff5a\032\uff5a\033\uff5a\066\uff5a" +
    "\001\002\000\054\003\uff4f\005\uff4f\006\uff4f\007\uff4f\010" +
    "\uff4f\011\uff4f\012\uff4f\013\uff4f\017\uff4f\020\uff4f\021\uff4f" +
    "\022\uff4f\024\uff4f\025\uff4f\026\uff4f\027\uff4f\030\uff4f\031" +
    "\uff4f\032\uff4f\033\uff4f\066\uff4f\001\002\000\006\061\245" +
    "\065\244\001\002\000\006\003\221\061\222\001\002\000" +
    "\010\003\225\033\223\102\224\001\002\000\010\003\225" +
    "\033\223\102\224\001\002\000\010\003\uff12\041\uff12\062" +
    "\uff12\001\002\000\010\003\uff11\041\uff11\062\uff11\001\002" +
    "\000\010\003\uff10\041\uff10\062\uff10\001\002\000\006\003" +
    "\234\062\235\001\002\000\010\003\uff13\041\230\062\uff13" +
    "\001\002\000\010\003\225\033\223\102\224\001\002\000" +
    "\006\003\uff15\062\uff15\001\002\000\010\003\uff13\041\230" +
    "\062\uff13\001\002\000\006\003\uff14\062\uff14\001\002\000" +
    "\004\072\240\001\002\000\006\003\237\072\236\001\002" +
    "\000\054\003\uff19\005\uff19\006\uff19\007\uff19\010\uff19\011" +
    "\uff19\012\uff19\013\uff19\017\uff19\020\uff19\021\uff19\022\uff19" +
    "\024\uff19\025\uff19\026\uff19\027\uff19\030\uff19\031\uff19\032" +
    "\uff19\033\uff19\066\uff19\001\002\000\054\003\uff16\005\uff16" +
    "\006\uff16\007\uff16\010\uff16\011\uff16\012\uff16\013\uff16\017" +
    "\uff16\020\uff16\021\uff16\022\uff16\024\uff16\025\uff16\026\uff16" +
    "\027\uff16\030\uff16\031\uff16\032\uff16\033\uff16\066\uff16\001" +
    "\002\000\054\003\uff17\005\uff17\006\uff17\007\uff17\010\uff17" +
    "\011\uff17\012\uff17\013\uff17\017\uff17\020\uff17\021\uff17\022" +
    "\uff17\024\uff17\025\uff17\026\uff17\027\uff17\030\uff17\031\uff17" +
    "\032\uff17\033\uff17\066\uff17\001\002\000\004\062\242\001" +
    "\002\000\004\072\243\001\002\000\054\003\uff18\005\uff18" +
    "\006\uff18\007\uff18\010\uff18\011\uff18\012\uff18\013\uff18\017" +
    "\uff18\020\uff18\021\uff18\022\uff18\024\uff18\025\uff18\026\uff18" +
    "\027\uff18\030\uff18\031\uff18\032\uff18\033\uff18\066\uff18\001" +
    "\002\000\044\003\uff4e\005\uff4e\006\uff4e\007\uff4e\010\uff4e" +
    "\011\uff4e\012\uff4e\013\uff4e\020\uff4e\021\uff4e\022\uff4e\024" +
    "\uff4e\025\uff4e\026\uff4e\027\uff4e\033\uff4e\066\uff4e\001\002" +
    "\000\014\003\252\033\247\074\246\075\253\076\254\001" +
    "\002\000\016\050\333\054\342\055\341\056\340\057\337" +
    "\060\335\001\002\000\030\003\uff94\050\333\052\uff94\053" +
    "\uff94\054\342\055\341\056\340\057\337\060\335\062\uff94" +
    "\067\uff94\001\002\000\014\003\uff9f\052\uff9f\053\uff9f\062" +
    "\uff9f\067\uff9f\001\002\000\014\003\uffa2\052\325\053\uffa2" +
    "\062\uffa2\067\uffa2\001\002\000\014\003\uff96\052\uff96\053" +
    "\uff96\062\uff96\067\uff96\001\002\000\014\003\uff98\052\uff98" +
    "\053\uff98\062\uff98\067\uff98\001\002\000\014\003\uff97\052" +
    "\uff97\053\uff97\062\uff97\067\uff97\001\002\000\006\053\256" +
    "\062\257\001\002\000\016\003\252\033\247\061\323\074" +
    "\246\075\253\076\254\001\002\000\004\065\260\001\002" +
    "\000\044\003\uff4e\005\uff4e\006\uff4e\007\uff4e\010\uff4e\011" +
    "\uff4e\012\uff4e\013\uff4e\020\uff4e\021\uff4e\022\uff4e\024\uff4e" +
    "\025\uff4e\026\uff4e\027\uff4e\033\uff4e\066\uff4e\001\002\000" +
    "\044\003\217\005\005\006\020\007\007\010\011\011\024" +
    "\012\030\013\017\020\200\021\220\022\210\024\uff56\025" +
    "\uff59\026\212\027\uff54\033\211\066\262\001\002\000\056" +
    "\003\uff84\005\uff84\006\uff84\007\uff84\010\uff84\011\uff84\012" +
    "\uff84\013\uff84\017\uff84\020\uff84\021\uff84\022\uff84\023\uff84" +
    "\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84\031\uff84\032" +
    "\uff84\033\uff84\066\uff84\001\002\000\056\003\uff87\005\uff87" +
    "\006\uff87\007\uff87\010\uff87\011\uff87\012\uff87\013\uff87\017" +
    "\uff87\020\uff87\021\uff87\022\uff87\023\264\024\uff87\025\uff87" +
    "\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87\066" +
    "\uff87\001\002\000\006\003\265\022\267\001\002\000\004" +
    "\061\314\001\002\000\056\003\uff85\005\uff85\006\uff85\007" +
    "\uff85\010\uff85\011\uff85\012\uff85\013\uff85\017\uff85\020\uff85" +
    "\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85\026\uff85\027" +
    "\uff85\030\uff85\031\uff85\032\uff85\033\uff85\066\uff85\001\002" +
    "\000\006\003\270\061\271\001\002\000\014\003\252\033" +
    "\247\074\246\075\253\076\254\001\002\000\014\003\252" +
    "\033\247\074\246\075\253\076\254\001\002\000\010\003" +
    "\273\053\256\062\274\001\002\000\004\065\304\001\002" +
    "\000\006\003\275\065\276\001\002\000\044\003\uff4e\005" +
    "\uff4e\006\uff4e\007\uff4e\010\uff4e\011\uff4e\012\uff4e\013\uff4e" +
    "\020\uff4e\021\uff4e\022\uff4e\024\uff4e\025\uff4e\026\uff4e\027" +
    "\uff4e\033\uff4e\066\uff4e\001\002\000\044\003\uff4e\005\uff4e" +
    "\006\uff4e\007\uff4e\010\uff4e\011\uff4e\012\uff4e\013\uff4e\020" +
    "\uff4e\021\uff4e\022\uff4e\024\uff4e\025\uff4e\026\uff4e\027\uff4e" +
    "\033\uff4e\066\uff4e\001\002\000\044\003\301\005\005\006" +
    "\020\007\007\010\011\011\024\012\030\013\017\020\200" +
    "\021\220\022\210\024\uff56\025\uff59\026\212\027\uff54\033" +
    "\211\066\300\001\002\000\056\003\uff83\005\uff83\006\uff83" +
    "\007\uff83\010\uff83\011\uff83\012\uff83\013\uff83\017\uff83\020" +
    "\uff83\021\uff83\022\uff83\023\uff83\024\uff83\025\uff83\026\uff83" +
    "\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\066\uff83\001" +
    "\002\000\062\003\uff7e\005\uff7e\006\uff7e\007\uff7e\010\uff7e" +
    "\011\uff7e\012\uff7e\013\uff7e\017\uff7e\020\uff7e\021\uff7e\022" +
    "\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e" +
    "\031\uff7e\032\uff7e\033\uff7e\061\245\065\244\066\uff7e\001" +
    "\002\000\044\003\217\005\005\006\020\007\007\010\011" +
    "\011\024\012\030\013\017\020\200\021\220\022\210\024" +
    "\uff56\025\uff59\026\212\027\uff54\033\211\066\303\001\002" +
    "\000\056\003\uff7f\005\uff7f\006\uff7f\007\uff7f\010\uff7f\011" +
    "\uff7f\012\uff7f\013\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f" +
    "\023\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031" +
    "\uff7f\032\uff7f\033\uff7f\066\uff7f\001\002\000\044\003\uff4e" +
    "\005\uff4e\006\uff4e\007\uff4e\010\uff4e\011\uff4e\012\uff4e\013" +
    "\uff4e\020\uff4e\021\uff4e\022\uff4e\024\uff4e\025\uff4e\026\uff4e" +
    "\027\uff4e\033\uff4e\066\uff4e\001\002\000\044\003\217\005" +
    "\005\006\020\007\007\010\011\011\024\012\030\013\017" +
    "\020\200\021\220\022\210\024\uff56\025\uff59\026\212\027" +
    "\uff54\033\211\066\306\001\002\000\056\003\uff80\005\uff80" +
    "\006\uff80\007\uff80\010\uff80\011\uff80\012\uff80\013\uff80\017" +
    "\uff80\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80\025\uff80" +
    "\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80\033\uff80\066" +
    "\uff80\001\002\000\006\053\256\062\310\001\002\000\004" +
    "\065\311\001\002\000\044\003\uff4e\005\uff4e\006\uff4e\007" +
    "\uff4e\010\uff4e\011\uff4e\012\uff4e\013\uff4e\020\uff4e\021\uff4e" +
    "\022\uff4e\024\uff4e\025\uff4e\026\uff4e\027\uff4e\033\uff4e\066" +
    "\uff4e\001\002\000\044\003\217\005\005\006\020\007\007" +
    "\010\011\011\024\012\030\013\017\020\200\021\220\022" +
    "\210\024\uff56\025\uff59\026\212\027\uff54\033\211\066\313" +
    "\001\002\000\056\003\uff81\005\uff81\006\uff81\007\uff81\010" +
    "\uff81\011\uff81\012\uff81\013\uff81\017\uff81\020\uff81\021\uff81" +
    "\022\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030" +
    "\uff81\031\uff81\032\uff81\033\uff81\066\uff81\001\002\000\014" +
    "\003\252\033\247\074\246\075\253\076\254\001\002\000" +
    "\006\053\256\062\316\001\002\000\004\065\317\001\002" +
    "\000\044\003\uff4e\005\uff4e\006\uff4e\007\uff4e\010\uff4e\011" +
    "\uff4e\012\uff4e\013\uff4e\020\uff4e\021\uff4e\022\uff4e\024\uff4e" +
    "\025\uff4e\026\uff4e\027\uff4e\033\uff4e\066\uff4e\001\002\000" +
    "\044\003\217\005\005\006\020\007\007\010\011\011\024" +
    "\012\030\013\017\020\200\021\220\022\210\024\uff56\025" +
    "\uff59\026\212\027\uff54\033\211\066\321\001\002\000\056" +
    "\003\uff82\005\uff82\006\uff82\007\uff82\010\uff82\011\uff82\012" +
    "\uff82\013\uff82\017\uff82\020\uff82\021\uff82\022\uff82\023\uff82" +
    "\024\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82\032" +
    "\uff82\033\uff82\066\uff82\001\002\000\014\003\uffa3\052\325" +
    "\053\uffa3\062\uffa3\067\uffa3\001\002\000\014\003\252\033" +
    "\247\074\246\075\253\076\254\001\002\000\006\052\325" +
    "\062\326\001\002\000\016\003\252\033\247\061\330\074" +
    "\246\075\253\076\254\001\002\000\012\003\uffa1\053\uffa1" +
    "\062\uffa1\067\uffa1\001\002\000\014\003\uffa0\052\uffa0\053" +
    "\uffa0\062\uffa0\067\uffa0\001\002\000\014\003\252\033\247" +
    "\074\246\075\253\076\254\001\002\000\004\062\332\001" +
    "\002\000\014\003\uff9e\052\uff9e\053\uff9e\062\uff9e\067\uff9e" +
    "\001\002\000\010\003\uff90\033\uff90\074\uff90\001\002\000" +
    "\010\003\346\033\343\074\344\001\002\000\010\003\uff8b" +
    "\033\uff8b\074\uff8b\001\002\000\014\003\uff9a\052\uff9a\053" +
    "\uff9a\062\uff9a\067\uff9a\001\002\000\010\003\uff8c\033\uff8c" +
    "\074\uff8c\001\002\000\010\003\uff8d\033\uff8d\074\uff8d\001" +
    "\002\000\010\003\uff8e\033\uff8e\074\uff8e\001\002\000\010" +
    "\003\uff8f\033\uff8f\074\uff8f\001\002\000\014\003\uff93\052" +
    "\uff93\053\uff93\062\uff93\067\uff93\001\002\000\014\003\uff92" +
    "\052\uff92\053\uff92\062\uff92\067\uff92\001\002\000\014\003" +
    "\uff95\052\uff95\053\uff95\062\uff95\067\uff95\001\002\000\014" +
    "\003\uff91\052\uff91\053\uff91\062\uff91\067\uff91\001\002\000" +
    "\010\003\346\033\343\074\344\001\002\000\014\003\uff99" +
    "\052\uff99\053\uff99\062\uff99\067\uff99\001\002\000\044\003" +
    "\217\005\005\006\020\007\007\010\011\011\024\012\030" +
    "\013\017\020\200\021\220\022\210\024\uff56\025\uff59\026" +
    "\212\027\uff54\033\211\066\352\001\002\000\004\025\353" +
    "\001\002\000\004\061\354\001\002\000\014\003\252\033" +
    "\247\074\246\075\253\076\254\001\002\000\006\053\256" +
    "\062\356\001\002\000\004\072\357\001\002\000\054\003" +
    "\uff75\005\uff75\006\uff75\007\uff75\010\uff75\011\uff75\012\uff75" +
    "\013\uff75\017\uff75\020\uff75\021\uff75\022\uff75\024\uff75\025" +
    "\uff75\026\uff75\027\uff75\030\uff75\031\uff75\032\uff75\033\uff75" +
    "\066\uff75\001\002\000\044\003\uff4e\005\uff4e\006\uff4e\007" +
    "\uff4e\010\uff4e\011\uff4e\012\uff4e\013\uff4e\020\uff4e\021\uff4e" +
    "\022\uff4e\024\uff4e\025\uff4e\026\uff4e\027\uff4e\033\uff4e\066" +
    "\uff4e\001\002\000\044\003\uff78\005\uff78\006\uff78\007\uff78" +
    "\010\uff78\011\uff78\012\uff78\013\uff78\020\uff78\021\uff78\022" +
    "\uff78\024\uff78\025\uff78\026\uff78\027\uff78\033\uff78\066\uff78" +
    "\001\002\000\044\003\uff4e\005\uff4e\006\uff4e\007\uff4e\010" +
    "\uff4e\011\uff4e\012\uff4e\013\uff4e\020\uff4e\021\uff4e\022\uff4e" +
    "\024\uff4e\025\uff4e\026\uff4e\027\uff4e\033\uff4e\066\uff4e\001" +
    "\002\000\044\003\217\005\005\006\020\007\007\010\011" +
    "\011\024\012\030\013\017\020\200\021\220\022\210\024" +
    "\uff56\025\uff59\026\212\027\uff54\033\211\066\uff77\001\002" +
    "\000\004\066\365\001\002\000\004\025\366\001\002\000" +
    "\004\061\367\001\002\000\014\003\252\033\247\074\246" +
    "\075\253\076\254\001\002\000\006\053\256\062\371\001" +
    "\002\000\004\072\372\001\002\000\054\003\uff76\005\uff76" +
    "\006\uff76\007\uff76\010\uff76\011\uff76\012\uff76\013\uff76\017" +
    "\uff76\020\uff76\021\uff76\022\uff76\024\uff76\025\uff76\026\uff76" +
    "\027\uff76\030\uff76\031\uff76\032\uff76\033\uff76\066\uff76\001" +
    "\002\000\044\003\217\005\005\006\020\007\007\010\011" +
    "\011\024\012\030\013\017\020\200\021\220\022\210\024" +
    "\uff56\025\uff59\026\212\027\uff54\033\211\066\374\001\002" +
    "\000\004\025\375\001\002\000\004\061\376\001\002\000" +
    "\014\003\252\033\247\074\246\075\253\076\254\001\002" +
    "\000\006\053\256\062\u0100\001\002\000\004\072\u0101\001" +
    "\002\000\054\003\uff74\005\uff74\006\uff74\007\uff74\010\uff74" +
    "\011\uff74\012\uff74\013\uff74\017\uff74\020\uff74\021\uff74\022" +
    "\uff74\024\uff74\025\uff74\026\uff74\027\uff74\030\uff74\031\uff74" +
    "\032\uff74\033\uff74\066\uff74\001\002\000\004\033\u012f\001" +
    "\002\000\014\033\u011d\062\uff3f\074\u011e\075\u0120\076\u0122" +
    "\001\002\000\004\033\u011a\001\002\000\014\033\u010c\061" +
    "\u010a\074\u0106\075\u0109\076\u010b\001\002\000\016\037\uff23" +
    "\040\uff23\041\uff23\042\uff23\062\uff23\072\uff23\001\002\000" +
    "\016\037\uff24\040\uff24\041\uff24\042\uff24\062\uff24\072\uff24" +
    "\001\002\000\016\037\u0113\040\u0114\041\uff2a\042\uff2a\062" +
    "\uff2a\072\uff2a\001\002\000\016\037\uff21\040\uff21\041\uff21" +
    "\042\uff21\062\uff21\072\uff21\001\002\000\014\033\u010c\061" +
    "\u010a\074\u0106\075\u0109\076\u010b\001\002\000\016\037\uff20" +
    "\040\uff20\041\uff20\042\uff20\062\uff20\072\uff20\001\002\000" +
    "\024\003\u0102\014\u0104\037\uff22\040\uff22\041\uff22\042\uff22" +
    "\061\u0103\062\uff22\072\uff22\001\002\000\016\037\uff27\040" +
    "\uff27\041\uff27\042\uff27\062\uff27\072\uff27\001\002\000\010" +
    "\041\u010f\042\u0110\072\u0111\001\002\000\014\033\u010c\061" +
    "\u010a\074\u0106\075\u0109\076\u010b\001\002\000\014\033\u010c" +
    "\061\u010a\074\u0106\075\u0109\076\u010b\001\002\000\054\003" +
    "\uff2b\005\uff2b\006\uff2b\007\uff2b\010\uff2b\011\uff2b\012\uff2b" +
    "\013\uff2b\017\uff2b\020\uff2b\021\uff2b\022\uff2b\024\uff2b\025" +
    "\uff2b\026\uff2b\027\uff2b\030\uff2b\031\uff2b\032\uff2b\033\uff2b" +
    "\066\uff2b\001\002\000\016\037\u0113\040\u0114\041\uff28\042" +
    "\uff28\062\uff28\072\uff28\001\002\000\014\033\u010c\061\u010a" +
    "\074\u0106\075\u0109\076\u010b\001\002\000\014\033\u010c\061" +
    "\u010a\074\u0106\075\u0109\076\u010b\001\002\000\016\037\uff25" +
    "\040\uff25\041\uff25\042\uff25\062\uff25\072\uff25\001\002\000" +
    "\016\037\uff26\040\uff26\041\uff26\042\uff26\062\uff26\072\uff26" +
    "\001\002\000\016\037\u0113\040\u0114\041\uff29\042\uff29\062" +
    "\uff29\072\uff29\001\002\000\010\041\u010f\042\u0110\062\u0119" +
    "\001\002\000\016\037\uff1f\040\uff1f\041\uff1f\042\uff1f\062" +
    "\uff1f\072\uff1f\001\002\000\006\003\u011b\061\u011c\001\002" +
    "\000\014\033\u011d\062\uff3f\074\u011e\075\u0120\076\u0122\001" +
    "\002\000\016\003\uff3f\033\u011d\062\uff3f\074\u011e\075\u0120" +
    "\076\u0122\001\002\000\010\003\uff3c\051\uff3c\062\uff3c\001" +
    "\002\000\010\003\uff3b\051\uff3b\062\uff3b\001\002\000\010" +
    "\003\uff3d\051\uff3d\062\uff3d\001\002\000\010\003\uff3a\051" +
    "\uff3a\062\uff3a\001\002\000\006\003\u0126\062\u0127\001\002" +
    "\000\010\003\uff39\051\uff39\062\uff39\001\002\000\010\003" +
    "\uff40\051\u0124\062\uff40\001\002\000\012\033\u011d\074\u011e" +
    "\075\u0120\076\u0122\001\002\000\010\003\uff3e\051\uff3e\062" +
    "\uff3e\001\002\000\004\072\u0129\001\002\000\004\003\u0128" +
    "\001\002\000\070\003\uff46\005\uff46\006\uff46\007\uff46\010" +
    "\uff46\011\uff46\012\uff46\013\uff46\017\uff46\020\uff46\021\uff46" +
    "\022\uff46\024\uff46\025\uff46\026\uff46\027\uff46\030\uff46\031" +
    "\uff46\032\uff46\033\uff46\037\uff46\040\uff46\041\uff46\042\uff46" +
    "\062\uff46\066\uff46\072\uff46\001\002\000\070\003\uff47\005" +
    "\uff47\006\uff47\007\uff47\010\uff47\011\uff47\012\uff47\013\uff47" +
    "\017\uff47\020\uff47\021\uff47\022\uff47\024\uff47\025\uff47\026" +
    "\uff47\027\uff47\030\uff47\031\uff47\032\uff47\033\uff47\037\uff47" +
    "\040\uff47\041\uff47\042\uff47\062\uff47\066\uff47\072\uff47\001" +
    "\002\000\004\062\u012b\001\002\000\004\072\u012c\001\002" +
    "\000\070\003\uff48\005\uff48\006\uff48\007\uff48\010\uff48\011" +
    "\uff48\012\uff48\013\uff48\017\uff48\020\uff48\021\uff48\022\uff48" +
    "\024\uff48\025\uff48\026\uff48\027\uff48\030\uff48\031\uff48\032" +
    "\uff48\033\uff48\037\uff48\040\uff48\041\uff48\042\uff48\062\uff48" +
    "\066\uff48\072\uff48\001\002\000\004\062\u012e\001\002\000" +
    "\070\003\uff4a\005\uff4a\006\uff4a\007\uff4a\010\uff4a\011\uff4a" +
    "\012\uff4a\013\uff4a\017\uff4a\020\uff4a\021\uff4a\022\uff4a\024" +
    "\uff4a\025\uff4a\026\uff4a\027\uff4a\030\uff4a\031\uff4a\032\uff4a" +
    "\033\uff4a\037\uff4a\040\uff4a\041\uff4a\042\uff4a\062\uff4a\066" +
    "\uff4a\072\uff4a\001\002\000\004\061\u0130\001\002\000\014" +
    "\033\u011d\062\uff3f\074\u011e\075\u0120\076\u0122\001\002\000" +
    "\004\062\u0132\001\002\000\004\072\u0133\001\002\000\070" +
    "\003\uff49\005\uff49\006\uff49\007\uff49\010\uff49\011\uff49\012" +
    "\uff49\013\uff49\017\uff49\020\uff49\021\uff49\022\uff49\024\uff49" +
    "\025\uff49\026\uff49\027\uff49\030\uff49\031\uff49\032\uff49\033" +
    "\uff49\037\uff49\040\uff49\041\uff49\042\uff49\062\uff49\066\uff49" +
    "\072\uff49\001\002\000\014\003\252\033\247\074\246\075" +
    "\253\076\254\001\002\000\014\003\252\033\247\074\246" +
    "\075\253\076\254\001\002\000\006\053\256\062\u0137\001" +
    "\002\000\004\065\u0138\001\002\000\044\003\uff8a\005\uff8a" +
    "\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013\uff8a\020" +
    "\uff8a\021\uff8a\022\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a" +
    "\033\uff8a\066\uff8a\001\002\000\044\003\uff4e\005\uff4e\006" +
    "\uff4e\007\uff4e\010\uff4e\011\uff4e\012\uff4e\013\uff4e\020\uff4e" +
    "\021\uff4e\022\uff4e\024\uff4e\025\uff4e\026\uff4e\027\uff4e\033" +
    "\uff4e\066\uff4e\001\002\000\044\003\217\005\005\006\020" +
    "\007\007\010\011\011\024\012\030\013\017\020\200\021" +
    "\220\022\210\024\uff56\025\uff59\026\212\027\uff54\033\211" +
    "\066\uff89\001\002\000\004\066\u013c\001\002\000\056\003" +
    "\uff84\005\uff84\006\uff84\007\uff84\010\uff84\011\uff84\012\uff84" +
    "\013\uff84\017\uff84\020\uff84\021\uff84\022\uff84\023\uff84\024" +
    "\uff84\025\uff84\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84" +
    "\033\uff84\066\uff84\001\002\000\056\003\uff88\005\uff88\006" +
    "\uff88\007\uff88\010\uff88\011\uff88\012\uff88\013\uff88\017\uff88" +
    "\020\uff88\021\uff88\022\uff88\023\264\024\uff88\025\uff88\026" +
    "\uff88\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88\066\uff88" +
    "\001\002\000\006\053\256\062\u013f\001\002\000\004\065" +
    "\u0140\001\002\000\044\003\uff4e\005\uff4e\006\uff4e\007\uff4e" +
    "\010\uff4e\011\uff4e\012\uff4e\013\uff4e\020\uff4e\021\uff4e\022" +
    "\uff4e\024\uff4e\025\uff4e\026\uff4e\027\uff4e\033\uff4e\066\uff4e" +
    "\001\002\000\044\003\217\005\005\006\020\007\007\010" +
    "\011\011\024\012\030\013\017\020\200\021\220\022\210" +
    "\024\uff56\025\uff59\026\212\027\uff54\033\211\066\u0142\001" +
    "\002\000\056\003\uff84\005\uff84\006\uff84\007\uff84\010\uff84" +
    "\011\uff84\012\uff84\013\uff84\017\uff84\020\uff84\021\uff84\022" +
    "\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84" +
    "\031\uff84\032\uff84\033\uff84\066\uff84\001\002\000\056\003" +
    "\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011\uff86\012\uff86" +
    "\013\uff86\017\uff86\020\uff86\021\uff86\022\uff86\023\264\024" +
    "\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86" +
    "\033\uff86\066\uff86\001\002\000\004\072\uff30\001\002\000" +
    "\004\072\uff2f\001\002\000\004\072\u014a\001\002\000\004" +
    "\072\uff2c\001\002\000\004\072\uff2e\001\002\000\004\072" +
    "\uff2d\001\002\000\004\066\u014b\001\002\000\026\002\uff43" +
    "\005\uff43\006\uff43\007\uff43\010\uff43\011\uff43\012\uff43\013" +
    "\uff43\015\uff43\016\uff43\001\002\000\054\003\uff58\005\uff58" +
    "\006\uff58\007\uff58\010\uff58\011\uff58\012\uff58\013\uff58\017" +
    "\uff58\020\uff58\021\uff58\022\uff58\024\uff58\025\uff58\026\uff58" +
    "\027\uff58\030\uff58\031\uff58\032\uff58\033\uff58\066\uff58\001" +
    "\002\000\006\003\u014e\061\u014f\001\002\000\014\003\252" +
    "\033\247\074\246\075\253\076\254\001\002\000\014\003" +
    "\252\033\247\074\246\075\253\076\254\001\002\000\010" +
    "\003\u0151\053\256\062\u0152\001\002\000\004\065\u015a\001" +
    "\002\000\006\003\u0153\065\u0154\001\002\000\044\003\uff4e" +
    "\005\uff4e\006\uff4e\007\uff4e\010\uff4e\011\uff4e\012\uff4e\013" +
    "\uff4e\020\uff4e\021\uff4e\022\uff4e\024\uff4e\025\uff4e\026\uff4e" +
    "\027\uff4e\033\uff4e\066\uff4e\001\002\000\044\003\uff4e\005" +
    "\uff4e\006\uff4e\007\uff4e\010\uff4e\011\uff4e\012\uff4e\013\uff4e" +
    "\020\uff4e\021\uff4e\022\uff4e\024\uff4e\025\uff4e\026\uff4e\027" +
    "\uff4e\033\uff4e\066\uff4e\001\002\000\044\003\u0157\005\005" +
    "\006\020\007\007\010\011\011\024\012\030\013\017\020" +
    "\200\021\220\022\210\024\uff56\025\uff59\026\212\027\uff54" +
    "\033\211\066\u0156\001\002\000\054\003\uff7d\005\uff7d\006" +
    "\uff7d\007\uff7d\010\uff7d\011\uff7d\012\uff7d\013\uff7d\017\uff7d" +
    "\020\uff7d\021\uff7d\022\uff7d\024\uff7d\025\uff7d\026\uff7d\027" +
    "\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d\066\uff7d\001\002" +
    "\000\060\003\uff79\005\uff79\006\uff79\007\uff79\010\uff79\011" +
    "\uff79\012\uff79\013\uff79\017\uff79\020\uff79\021\uff79\022\uff79" +
    "\024\uff79\025\uff79\026\uff79\027\uff79\030\uff79\031\uff79\032" +
    "\uff79\033\uff79\061\245\065\244\066\uff79\001\002\000\044" +
    "\003\217\005\005\006\020\007\007\010\011\011\024\012" +
    "\030\013\017\020\200\021\220\022\210\024\uff56\025\uff59" +
    "\026\212\027\uff54\033\211\066\u0159\001\002\000\054\003" +
    "\uff7a\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a\012\uff7a" +
    "\013\uff7a\017\uff7a\020\uff7a\021\uff7a\022\uff7a\024\uff7a\025" +
    "\uff7a\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a" +
    "\066\uff7a\001\002\000\044\003\uff4e\005\uff4e\006\uff4e\007" +
    "\uff4e\010\uff4e\011\uff4e\012\uff4e\013\uff4e\020\uff4e\021\uff4e" +
    "\022\uff4e\024\uff4e\025\uff4e\026\uff4e\027\uff4e\033\uff4e\066" +
    "\uff4e\001\002\000\044\003\217\005\005\006\020\007\007" +
    "\010\011\011\024\012\030\013\017\020\200\021\220\022" +
    "\210\024\uff56\025\uff59\026\212\027\uff54\033\211\066\u015c" +
    "\001\002\000\054\003\uff7b\005\uff7b\006\uff7b\007\uff7b\010" +
    "\uff7b\011\uff7b\012\uff7b\013\uff7b\017\uff7b\020\uff7b\021\uff7b" +
    "\022\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031" +
    "\uff7b\032\uff7b\033\uff7b\066\uff7b\001\002\000\006\053\256" +
    "\062\u015e\001\002\000\004\065\u015f\001\002\000\044\003" +
    "\uff4e\005\uff4e\006\uff4e\007\uff4e\010\uff4e\011\uff4e\012\uff4e" +
    "\013\uff4e\020\uff4e\021\uff4e\022\uff4e\024\uff4e\025\uff4e\026" +
    "\uff4e\027\uff4e\033\uff4e\066\uff4e\001\002\000\044\003\217" +
    "\005\005\006\020\007\007\010\011\011\024\012\030\013" +
    "\017\020\200\021\220\022\210\024\uff56\025\uff59\026\212" +
    "\027\uff54\033\211\066\u0161\001\002\000\054\003\uff7c\005" +
    "\uff7c\006\uff7c\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c" +
    "\017\uff7c\020\uff7c\021\uff7c\022\uff7c\024\uff7c\025\uff7c\026" +
    "\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c\066\uff7c" +
    "\001\002\000\004\061\u0164\001\002\000\054\003\uff55\005" +
    "\uff55\006\uff55\007\uff55\010\uff55\011\uff55\012\uff55\013\uff55" +
    "\017\uff55\020\uff55\021\uff55\022\uff55\024\uff55\025\uff55\026" +
    "\uff55\027\uff55\030\uff55\031\uff55\032\uff55\033\uff55\066\uff55" +
    "\001\002\000\010\005\u0166\051\uff6c\067\uff6c\001\002\000" +
    "\006\051\u0171\067\u0172\001\002\000\006\003\u0168\033\u0167" +
    "\001\002\000\006\003\u016c\043\u016d\001\002\000\004\043" +
    "\u016a\001\002\000\006\051\uff6d\067\uff6d\001\002\000\004" +
    "\074\u016b\001\002\000\006\051\uff6a\067\uff6a\001\002\000" +
    "\004\074\u0170\001\002\000\006\003\u016f\074\u016e\001\002" +
    "\000\006\051\uff6b\067\uff6b\001\002\000\006\051\uff68\067" +
    "\uff68\001\002\000\006\051\uff69\067\uff69\001\002\000\006" +
    "\003\u0168\033\u0167\001\002\000\014\003\252\033\247\074" +
    "\246\075\253\076\254\001\002\000\006\053\256\067\u0174" +
    "\001\002\000\004\033\u0175\001\002\000\012\003\u0179\034" +
    "\u0176\035\u0178\036\u0177\001\002\000\004\062\uff72\001\002" +
    "\000\004\062\uff70\001\002\000\004\062\uff71\001\002\000" +
    "\004\062\uff6f\001\002\000\004\062\u017b\001\002\000\004" +
    "\065\u017c\001\002\000\044\003\uff4e\005\uff4e\006\uff4e\007" +
    "\uff4e\010\uff4e\011\uff4e\012\uff4e\013\uff4e\020\uff4e\021\uff4e" +
    "\022\uff4e\024\uff4e\025\uff4e\026\uff4e\027\uff4e\033\uff4e\066" +
    "\uff4e\001\002\000\044\003\217\005\005\006\020\007\007" +
    "\010\011\011\024\012\030\013\017\020\200\021\220\022" +
    "\210\024\uff56\025\uff59\026\212\027\uff54\033\211\066\u017e" +
    "\001\002\000\054\003\uff73\005\uff73\006\uff73\007\uff73\010" +
    "\uff73\011\uff73\012\uff73\013\uff73\017\uff73\020\uff73\021\uff73" +
    "\022\uff73\024\uff73\025\uff73\026\uff73\027\uff73\030\uff73\031" +
    "\uff73\032\uff73\033\uff73\066\uff73\001\002\000\006\051\uff6e" +
    "\067\uff6e\001\002\000\004\061\u0182\001\002\000\054\003" +
    "\uff53\005\uff53\006\uff53\007\uff53\010\uff53\011\uff53\012\uff53" +
    "\013\uff53\017\uff53\020\uff53\021\uff53\022\uff53\024\uff53\025" +
    "\uff53\026\uff53\027\uff53\030\uff53\031\uff53\032\uff53\033\uff53" +
    "\066\uff53\001\002\000\004\033\u0183\001\002\000\004\062" +
    "\u0184\001\002\000\004\065\u0185\001\002\000\010\030\u0189" +
    "\031\uff65\066\uff65\001\002\000\006\031\u0195\066\uff5c\001" +
    "\002\000\010\030\u0189\031\uff66\066\uff66\001\002\000\010" +
    "\030\uff63\031\uff63\066\uff63\001\002\000\006\074\u018a\077" +
    "\u018c\001\002\000\004\070\uff61\001\002\000\004\070\u018f" +
    "\001\002\000\004\073\u018d\001\002\000\004\077\u018e\001" +
    "\002\000\004\070\uff60\001\002\000\052\003\uff4e\005\uff4e" +
    "\006\uff4e\007\uff4e\010\uff4e\011\uff4e\012\uff4e\013\uff4e\020" +
    "\uff4e\021\uff4e\022\uff4e\024\uff4e\025\uff4e\026\uff4e\027\uff4e" +
    "\030\uff4e\031\uff4e\032\uff4e\033\uff4e\066\uff4e\001\002\000" +
    "\052\003\217\005\005\006\020\007\007\010\011\011\024" +
    "\012\030\013\017\020\200\021\220\022\210\024\uff56\025" +
    "\uff59\026\212\027\uff54\030\uff5e\031\uff5e\032\u0191\033\211" +
    "\066\uff5e\001\002\000\004\072\u0193\001\002\000\010\030" +
    "\uff62\031\uff62\066\uff62\001\002\000\010\030\uff5f\031\uff5f" +
    "\066\uff5f\001\002\000\010\030\uff64\031\uff64\066\uff64\001" +
    "\002\000\004\070\u0198\001\002\000\004\066\u0197\001\002" +
    "\000\054\003\uff67\005\uff67\006\uff67\007\uff67\010\uff67\011" +
    "\uff67\012\uff67\013\uff67\017\uff67\020\uff67\021\uff67\022\uff67" +
    "\024\uff67\025\uff67\026\uff67\027\uff67\030\uff67\031\uff67\032" +
    "\uff67\033\uff67\066\uff67\001\002\000\046\003\uff4e\005\uff4e" +
    "\006\uff4e\007\uff4e\010\uff4e\011\uff4e\012\uff4e\013\uff4e\020" +
    "\uff4e\021\uff4e\022\uff4e\024\uff4e\025\uff4e\026\uff4e\027\uff4e" +
    "\032\uff4e\033\uff4e\066\uff4e\001\002\000\046\003\217\005" +
    "\005\006\020\007\007\010\011\011\024\012\030\013\017" +
    "\020\200\021\220\022\210\024\uff56\025\uff59\026\212\027" +
    "\uff54\032\u0191\033\211\066\uff5e\001\002\000\004\066\uff5d" +
    "\001\002\000\004\033\u01a6\001\002\000\006\003\u019e\033" +
    "\u019d\001\002\000\006\003\u01a1\062\u01a2\001\002\000\004" +
    "\062\u019f\001\002\000\004\072\u01a0\001\002\000\054\003" +
    "\uff1c\005\uff1c\006\uff1c\007\uff1c\010\uff1c\011\uff1c\012\uff1c" +
    "\013\uff1c\017\uff1c\020\uff1c\021\uff1c\022\uff1c\024\uff1c\025" +
    "\uff1c\026\uff1c\027\uff1c\030\uff1c\031\uff1c\032\uff1c\033\uff1c" +
    "\066\uff1c\001\002\000\004\072\u01a5\001\002\000\006\003" +
    "\u01a3\072\u01a4\001\002\000\054\003\uff1a\005\uff1a\006\uff1a" +
    "\007\uff1a\010\uff1a\011\uff1a\012\uff1a\013\uff1a\017\uff1a\020" +
    "\uff1a\021\uff1a\022\uff1a\024\uff1a\025\uff1a\026\uff1a\027\uff1a" +
    "\030\uff1a\031\uff1a\032\uff1a\033\uff1a\066\uff1a\001\002\000" +
    "\054\003\uff1e\005\uff1e\006\uff1e\007\uff1e\010\uff1e\011\uff1e" +
    "\012\uff1e\013\uff1e\017\uff1e\020\uff1e\021\uff1e\022\uff1e\024" +
    "\uff1e\025\uff1e\026\uff1e\027\uff1e\030\uff1e\031\uff1e\032\uff1e" +
    "\033\uff1e\066\uff1e\001\002\000\054\003\uff1b\005\uff1b\006" +
    "\uff1b\007\uff1b\010\uff1b\011\uff1b\012\uff1b\013\uff1b\017\uff1b" +
    "\020\uff1b\021\uff1b\022\uff1b\024\uff1b\025\uff1b\026\uff1b\027" +
    "\uff1b\030\uff1b\031\uff1b\032\uff1b\033\uff1b\066\uff1b\001\002" +
    "\000\004\062\u01a7\001\002\000\004\072\u01a8\001\002\000" +
    "\054\003\uff1d\005\uff1d\006\uff1d\007\uff1d\010\uff1d\011\uff1d" +
    "\012\uff1d\013\uff1d\017\uff1d\020\uff1d\021\uff1d\022\uff1d\024" +
    "\uff1d\025\uff1d\026\uff1d\027\uff1d\030\uff1d\031\uff1d\032\uff1d" +
    "\033\uff1d\066\uff1d\001\002\000\004\033\u01aa\001\002\000" +
    "\006\051\uff42\062\uff42\001\002\000\006\051\uff41\062\uff41" +
    "\001\002\000\010\003\034\033\033\063\035\001\002\000" +
    "\062\002\ufff0\003\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0" +
    "\030\ufff0\031\ufff0\032\ufff0\033\ufff0\066\ufff0\001\002\000" +
    "\062\002\uffef\003\uffef\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\011\uffef\012\uffef\013\uffef\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\021\uffef\022\uffef\024\uffef\025\uffef\026\uffef\027\uffef" +
    "\030\uffef\031\uffef\032\uffef\033\uffef\066\uffef\001\002\000" +
    "\010\003\uffb7\051\uffb7\072\uffb7\001\002\000\010\003\uffe1" +
    "\051\uffe1\072\uffe1\001\002\000\012\003\uffa8\043\u01b5\051" +
    "\uffa8\072\uffa8\001\002\000\010\003\uffac\051\uffac\072\uffac" +
    "\001\002\000\012\003\uffa8\043\u01b5\051\uffa8\072\uffa8\001" +
    "\002\000\010\003\uffaa\051\uffaa\072\uffaa\001\002\000\004" +
    "\100\u01b6\001\002\000\006\003\u01b9\033\u01b7\001\002\000" +
    "\010\033\uffa6\051\uffa6\100\uffa6\001\002\000\010\033\u01bb" +
    "\051\u01ba\100\u01bc\001\002\000\010\033\uffa4\051\uffa4\100" +
    "\uffa4\001\002\000\004\003\u01bd\001\002\000\010\033\uffa7" +
    "\051\uffa7\100\uffa7\001\002\000\010\003\uffa9\051\uffa9\072" +
    "\uffa9\001\002\000\010\033\uffa5\051\uffa5\100\uffa5\001\002" +
    "\000\010\003\uffab\051\uffab\072\uffab\001\002\000\006\003" +
    "\125\033\124\001\002\000\062\002\ufff2\003\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\015" +
    "\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\024\ufff2" +
    "\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\066\ufff2\001\002\000\062\002\ufff1\003\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\015" +
    "\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\024\ufff1" +
    "\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033" +
    "\ufff1\066\ufff1\001\002\000\010\003\uffc0\051\uffc0\072\uffc0" +
    "\001\002\000\026\002\uffff\005\uffff\006\uffff\007\uffff\010" +
    "\uffff\011\uffff\012\uffff\013\uffff\015\uffff\016\uffff\001\002" +
    "\000\004\014\uff4d\001\002\000\004\014\u01c6\001\002\000" +
    "\004\061\u01c7\001\002\000\022\003\166\005\161\006\164" +
    "\007\172\010\170\011\162\012\171\013\165\001\002\000" +
    "\006\051\173\062\u01c9\001\002\000\004\065\uff4c\001\002" +
    "\000\004\065\u01cb\001\002\000\044\003\uff4e\005\uff4e\006" +
    "\uff4e\007\uff4e\010\uff4e\011\uff4e\012\uff4e\013\uff4e\017\uff4e" +
    "\020\uff4e\021\uff4e\022\uff4e\024\uff4e\025\uff4e\026\uff4e\027" +
    "\uff4e\033\uff4e\001\002\000\044\003\217\005\005\006\020" +
    "\007\007\010\011\011\024\012\030\013\017\017\u01cd\020" +
    "\200\021\220\022\210\024\uff56\025\uff59\026\212\027\uff54" +
    "\033\211\001\002\000\014\003\u0147\033\u0144\074\u0145\075" +
    "\u0148\076\u0149\001\002\000\004\072\u01cf\001\002\000\004" +
    "\066\u01d0\001\002\000\004\072\u01d1\001\002\000\026\002" +
    "\uff4b\005\uff4b\006\uff4b\007\uff4b\010\uff4b\011\uff4b\012\uff4b" +
    "\013\uff4b\015\uff4b\016\uff4b\001\002\000\010\003\uffc7\051" +
    "\uffc7\072\uffc7\001\002\000\006\003\u01b3\033\u01b1\001\002" +
    "\000\062\002\uffee\003\uffee\005\uffee\006\uffee\007\uffee\010" +
    "\uffee\011\uffee\012\uffee\013\uffee\015\uffee\016\uffee\017\uffee" +
    "\020\uffee\021\uffee\022\uffee\024\uffee\025\uffee\026\uffee\027" +
    "\uffee\030\uffee\031\uffee\032\uffee\033\uffee\066\uffee\001\002" +
    "\000\062\002\uffed\003\uffed\005\uffed\006\uffed\007\uffed\010" +
    "\uffed\011\uffed\012\uffed\013\uffed\015\uffed\016\uffed\017\uffed" +
    "\020\uffed\021\uffed\022\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\031\uffed\032\uffed\033\uffed\066\uffed\001\002" +
    "\000\010\003\uffad\051\uffad\072\uffad\001\002\000\010\003" +
    "\uffd9\051\uffd9\072\uffd9\001\002\000\006\003\u01dc\033\u01db" +
    "\001\002\000\062\002\ufff9\003\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\015\ufff9\016\ufff9" +
    "\017\ufff9\020\ufff9\021\ufff9\022\ufff9\024\ufff9\025\ufff9\026" +
    "\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\066\ufff9" +
    "\001\002\000\062\002\ufffa\003\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\015\ufffa\016\ufffa" +
    "\017\ufffa\020\ufffa\021\ufffa\022\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\066\ufffa" +
    "\001\002\000\012\003\uffe7\043\u01df\051\uffe7\072\uffe7\001" +
    "\002\000\012\003\uffe7\043\u01df\051\uffe7\072\uffe7\001\002" +
    "\000\010\003\uffec\051\uffec\072\uffec\001\002\000\010\003" +
    "\uffe9\051\uffe9\072\uffe9\001\002\000\012\003\u01e3\033\u01e0" +
    "\074\u01e1\102\u01e4\001\002\000\012\003\uff0c\041\uff0c\051" +
    "\uff0c\072\uff0c\001\002\000\012\003\uff0a\041\uff0a\051\uff0a" +
    "\072\uff0a\001\002\000\010\003\uffe8\051\uffe8\072\uffe8\001" +
    "\002\000\012\003\uff09\041\uff09\051\uff09\072\uff09\001\002" +
    "\000\012\003\uff0b\041\uff0b\051\uff0b\072\uff0b\001\002\000" +
    "\012\003\uff0d\041\u01e7\051\uff0d\072\uff0d\001\002\000\010" +
    "\003\uff0f\051\uff0f\072\uff0f\001\002\000\012\003\u01e3\033" +
    "\u01e0\074\u01e1\102\u01e4\001\002\000\012\003\uff0d\041\u01e7" +
    "\051\uff0d\072\uff0d\001\002\000\010\003\uff0e\051\uff0e\072" +
    "\uff0e\001\002\000\010\003\uffea\051\uffea\072\uffea\001\002" +
    "\000\010\003\uffeb\051\uffeb\072\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01e9\000\034\002\030\003\015\004\005\012\024\017" +
    "\014\025\007\031\022\034\025\037\020\076\003\102\026" +
    "\127\013\130\012\001\001\000\002\001\001\000\004\005" +
    "\u01ea\001\001\000\002\001\001\000\004\013\u01d6\001\001" +
    "\000\002\001\001\000\004\035\u01d1\001\001\000\002\001" +
    "\001\000\030\003\015\004\005\012\024\017\014\025\007" +
    "\031\022\034\025\037\020\076\003\102\026\127\u01c2\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\u01b1\001\001\000\004\032\u01af\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\052\001\001\000\004\041" +
    "\047\001\001\000\006\022\037\024\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\110\001\001" +
    "\000\004\036\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\064\001\001\000\004\015\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\122\001\001\000\004\014\117\001\001\000\002\001" +
    "\001\000\004\015\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\131\001\001\000\004\021\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\154\001\001\000\004\033\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\143\001\001\000\004" +
    "\010\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\142\157" +
    "\001\001\000\006\077\166\100\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\100\u01a8\001\001\000\004\143\174\001\001\000\002\001" +
    "\001\000\004\044\176\001\001\000\044\003\212\004\005" +
    "\012\024\017\014\025\007\031\022\034\025\037\020\055" +
    "\214\062\213\110\205\111\215\112\200\113\201\135\204" +
    "\136\203\137\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\067\u0180\001\001\000\004" +
    "\063\u0162\001\001\000\004\061\u014b\001\001\000\002\001" +
    "\001\000\004\101\u0145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\114\240\117\226\001\001\000" +
    "\006\114\225\117\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\115" +
    "\230\001\001\000\004\117\231\001\001\000\002\001\001" +
    "\000\004\115\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\350\001\001\000\010\046\254" +
    "\047\250\051\247\001\001\000\004\054\346\001\001\000" +
    "\006\052\335\054\333\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\047\321\051\247\001\001" +
    "\000\002\001\001\000\004\044\260\001\001\000\044\003" +
    "\212\004\005\012\024\017\014\025\007\031\022\034\025" +
    "\037\020\055\214\062\213\110\205\111\215\112\200\113" +
    "\201\135\204\136\203\137\202\001\001\000\004\056\262" +
    "\001\001\000\002\001\001\000\004\060\265\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\046\306\047\250\051\247\001\001\000\010\046\271\047" +
    "\250\051\247\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\301\001\001\000\004\044" +
    "\276\001\001\000\044\003\212\004\005\012\024\017\014" +
    "\025\007\031\022\034\025\037\020\055\214\062\213\110" +
    "\205\111\215\112\200\113\201\135\204\136\203\137\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\003" +
    "\212\004\005\012\024\017\014\025\007\031\022\034\025" +
    "\037\020\055\214\062\213\110\205\111\215\112\200\113" +
    "\201\135\204\136\203\137\202\001\001\000\002\001\001" +
    "\000\004\044\304\001\001\000\044\003\212\004\005\012" +
    "\024\017\014\025\007\031\022\034\025\037\020\055\214" +
    "\062\213\110\205\111\215\112\200\113\201\135\204\136" +
    "\203\137\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\311\001\001\000\044\003" +
    "\212\004\005\012\024\017\014\025\007\031\022\034\025" +
    "\037\020\055\214\062\213\110\205\111\215\112\200\113" +
    "\201\135\204\136\203\137\202\001\001\000\002\001\001" +
    "\000\010\046\314\047\250\051\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\317\001\001\000\044" +
    "\003\212\004\005\012\024\017\014\025\007\031\022\034" +
    "\025\037\020\055\214\062\213\110\205\111\215\112\200" +
    "\113\201\135\204\136\203\137\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\047\323\051\247\001\001" +
    "\000\002\001\001\000\004\051\326\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\330\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\344\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\347\001\001\000\002\001" +
    "\001\000\044\003\212\004\005\012\024\017\014\025\007" +
    "\031\022\034\025\037\020\055\214\062\213\110\205\111" +
    "\215\112\200\113\201\135\204\136\203\137\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\046\354\047" +
    "\250\051\247\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\372\001\001\000\004\133" +
    "\361\001\001\000\004\044\362\001\001\000\046\003\212" +
    "\004\005\012\024\017\014\025\007\031\022\034\025\037" +
    "\020\055\214\062\213\110\205\111\215\112\200\113\201" +
    "\134\363\135\204\136\203\137\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\046\367" +
    "\047\250\051\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\003\212\004\005\012\024" +
    "\017\014\025\007\031\022\034\025\037\020\055\214\062" +
    "\213\110\205\111\215\112\200\113\201\135\204\136\203" +
    "\137\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\046\376\047\250\051\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\043\u011e\122\u012c\123\u0122\001\001\000\002\001\001" +
    "\000\012\103\u010d\104\u0107\105\u010c\110\u0106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\103\u0117\104\u0107\105\u010c\110\u0106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\104\u0116\105\u010c\110\u0106\001" +
    "\001\000\010\104\u0111\105\u010c\110\u0106\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\105\u0115\110\u0106\001" +
    "\001\000\006\105\u0114\110\u0106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\043\u011e\122\u0129" +
    "\123\u0122\001\001\000\010\043\u011e\122\u0120\123\u0122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\u0124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\043\u011e\122\u0130\123\u0122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\046" +
    "\u013d\047\250\051\247\001\001\000\010\046\u0135\047\250" +
    "\051\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\131\u0138\001\001\000\004\044\u0139\001\001\000\046" +
    "\003\212\004\005\012\024\017\014\025\007\031\022\034" +
    "\025\037\020\055\214\062\213\110\205\111\215\112\200" +
    "\113\201\132\u013a\135\204\136\203\137\202\001\001\000" +
    "\002\001\001\000\004\056\u013c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\u0140\001" +
    "\001\000\044\003\212\004\005\012\024\017\014\025\007" +
    "\031\022\034\025\037\020\055\214\062\213\110\205\111" +
    "\215\112\200\113\201\135\204\136\203\137\202\001\001" +
    "\000\004\056\u0142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\046\u015c\047\250\051\247\001\001\000\010\046\u014f\047" +
    "\250\051\247\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\u0157\001\001\000\004\044" +
    "\u0154\001\001\000\044\003\212\004\005\012\024\017\014" +
    "\025\007\031\022\034\025\037\020\055\214\062\213\110" +
    "\205\111\215\112\200\113\201\135\204\136\203\137\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\003" +
    "\212\004\005\012\024\017\014\025\007\031\022\034\025" +
    "\037\020\055\214\062\213\110\205\111\215\112\200\113" +
    "\201\135\204\136\203\137\202\001\001\000\002\001\001" +
    "\000\004\044\u015a\001\001\000\044\003\212\004\005\012" +
    "\024\017\014\025\007\031\022\034\025\037\020\055\214" +
    "\062\213\110\205\111\215\112\200\113\201\135\204\136" +
    "\203\137\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\u015f\001\001\000\044\003" +
    "\212\004\005\012\024\017\014\025\007\031\022\034\025" +
    "\037\020\055\214\062\213\110\205\111\215\112\200\113" +
    "\201\135\204\136\203\137\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\065\u0164\001" +
    "\001\000\002\001\001\000\004\066\u0168\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\066\u017e\001\001\000\010\046\u0172\047\250\051\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\064" +
    "\u0179\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\u017c\001\001\000\044\003\212\004\005" +
    "\012\024\017\014\025\007\031\022\034\025\037\020\055" +
    "\214\062\213\110\205\111\215\112\200\113\201\135\204" +
    "\136\203\137\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\070\u0185\071" +
    "\u0186\072\u0187\001\001\000\004\075\u0195\001\001\000\004" +
    "\072\u0193\001\001\000\002\001\001\000\004\073\u018a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\u018f\001" +
    "\001\000\046\003\212\004\005\012\024\017\014\025\007" +
    "\031\022\034\025\037\020\055\214\062\213\074\u0191\110" +
    "\205\111\215\112\200\113\201\135\204\136\203\137\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\u0198\001\001\000\046\003" +
    "\212\004\005\012\024\017\014\025\007\031\022\034\025" +
    "\037\020\055\214\062\213\074\u0199\110\205\111\215\112" +
    "\200\113\201\135\204\136\203\137\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u01ae\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\u01bd\001\001\000\002\001\001\000\004" +
    "\027\u01b3\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\u01b7\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u01c1\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\140\u01c4\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\077\u01c7\100" +
    "\162\001\001\000\002\001\001\000\004\141\u01c9\001\001" +
    "\000\002\001\001\000\004\044\u01cb\001\001\000\044\003" +
    "\212\004\005\012\024\017\014\025\007\031\022\034\025" +
    "\037\020\055\214\062\213\110\205\111\215\112\200\113" +
    "\201\135\204\136\203\137\202\001\001\000\004\101\u01cd" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\u01d5" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\u01dc\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u01e9\001\001\000" +
    "\004\006\u01dd\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\124\u01e1\126\u01e4\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\125\u01e5\001\001\000\002\001\001\000" +
    "\004\126\u01e7\001\001\000\004\125\u01e8\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<MyError> listaErrorSintacticos = new LinkedList<MyError>();
    public Nodo raiz;
    public ArrayList<Variable> variables = new ArrayList();
    public ArrayList<Tabla> tabla = new ArrayList();
    public String ambito="global";
    public int profundidad = 0;
    public static int contTemp = 0;
    public static ArrayList<Cuadruplo> cuads = new ArrayList();
    public int direccion = 0;
    public boolean esMetodo = false;

    public boolean noExiste(String id) {
        boolean esValido = true;
        for (int i = 0; i < tabla.size(); i++) {
            if( ((Tabla)tabla.get(i)).getId().equals(id) && ((Tabla)tabla.get(i)).getAmbito().equals(ambito) ){
                esValido = false;
            }
        }
        return esValido;
    }

    public String buscarTipo(String id) {
        String tipo = "";
        for (int i = 0; i < tabla.size(); i++) {
            if( ((Tabla)tabla.get(i)).getId().equals(id)){
                tipo+=((Tabla)tabla.get(i)).getTipo();
            }
        }
        return tipo;
    }

    public void quitarAmbito() {
        int index = ambito.lastIndexOf('.');
        ambito = ambito.substring(0, index);
    }

    public static boolean isNumeric(String str) {
        try {
            int d = Integer.parseInt(str);  
        }
        catch(NumberFormatException nfe) {
            return false;
        }
        return true;  
    }

 public String getOp(String s){
        int num = 0;
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '='){
                num = i;
                break;
            }    
        }
        s = s.substring(num+1, s.length());
        return s;
    }
    
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("\u001B[31m" + "Syntax Error: " + lexema + " at " + fila + ":" + columna);
        
        MyError datos = new MyError(lexema, fila, columna, "Error Sintactico", "Caracter no esperado");
        listaErrorSintacticos.add(datos);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("\u001B[31m" + "Syntax Error: " + lexema + " at " + fila + ":" + columna);


        MyError datos = new MyError(lexema, fila, columna, "Error Sintactico", "Simbolo no esperado, Panic Mode");
        listaErrorSintacticos.add(datos);
    }

     public void swap(ArrayList a){
        Nodo temp;
        ArrayList <Nodo> nodos = new ArrayList();
        
        for(int i = 1; i < a.size(); i++){
            nodos.add(((Nodo)a.get(i)).getHijoAt(1));
            nodos.add(((Nodo)a.get(i)).getHijoAt(0));
            ((Nodo)a.get(i)).setHijos(nodos);
        }
    }

    public ArrayList orderPrecedence(ArrayList a){
        ArrayList b = new ArrayList();
        for(int i = 0;i < a.size(); i++){
            if(((Nodo)a.get(i)).Tipo.equals("&&"))
                b.add(a.get(i));
        }
        for(int i = 0;i < a.size(); i++){
            if(((Nodo)a.get(i)).Tipo.equals("||"))
                b.add(a.get(i));
        }
        return b;
        
    }

   public boolean isOrdered(ArrayList a){
        
        boolean b = true;
        for(int i = 0; i < a.size()-1; i++){
            if(((Nodo)a.get(i)).Tipo.equals("||") && ((Nodo)a.get(i+1)).Tipo.equals("&&"))
                b = false;
        }
        return b;
        
    }
    public String splitOp(String s){
        int cont1 = 0;

        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '['){
                cont1 = i;
            }
            else if(s.charAt(i) == ']'){
                s = s.substring(0,cont1) + s.substring(i+1, s.length());
                i = cont1;
            }
            
        }
        
        s = s.replace(",", "");
        s = s.replace("[", "");
        s = s.replace("]", "");
        s = s.replace(" ","");
        return s;
            
    }

     public void cuadsExpr(ArrayList a){
                 
                ArrayList order = orderPrecedence(a);
                String operator = "", id = "";
                if (order.isEmpty()){
                    for(int i = 0; i < a.size(); i++){
                        operator = ((Nodo)a.get(i)).Tipo;
                        ArrayList hijos = (((Nodo)a.get(i)).getHijos());
                        Cuadruplo cuad = new Cuadruplo(operator,((Nodo)hijos.get(0)).getTipo(),((Nodo)hijos.get(1)).getTipo(),"t_" + contTemp++);
                        cuads.add(cuad);  
                    }
                } 
              
                if(isOrdered(a) == false){
                    for(int i = 0; i < order.size(); i++){
                    operator = ((Nodo)order.get(i)).Tipo;
                        if(operator.equals("&&") || operator.equals("||")){
                            ArrayList hijos = (((Nodo)order.get(i)).getHijos());
                            for(int j = 0; j < hijos.size(); j++){
                                operator = (((Nodo)hijos.get(j)).Tipo);
                                ArrayList hijos2 = (((Nodo)hijos.get(j)).getHijos());

                                if (i >= 1 && j >= 1){
                                   
                                   operator = ((Nodo)order.get(i)).Tipo;
                                   Cuadruplo cuad = new Cuadruplo(operator,"t_" + (contTemp-2),"t_" + (contTemp-1),"t_" + contTemp++);
                                   cuads.add(cuad); 
                                }
                                
                                else {
                                    operator = (((Nodo)hijos.get(j)).Tipo);
                                    // Agrego el cuadruplo de operacion relacional (comparar valores)
                                    Cuadruplo cuad = new Cuadruplo(operator,((Nodo)hijos2.get(0)).getTipo(),((Nodo)hijos2.get(1)).getTipo(),"t_" + contTemp++);
                                    cuads.add(cuad);
                                }
                                    
                                
                            }
                            
                            if(i < 1){
                                operator = (((Nodo)order.get(i)).Tipo);
                                Cuadruplo cuad = new Cuadruplo(operator,"t_" + (contTemp-2),"t_" + (contTemp-1),"t_" + contTemp++);
                                cuads.add(cuad);
                            }
                        } 
                    }   
                }
                
                else if(isOrdered(a) == true){
                    swap(order);
                    for(int i = 0; i < order.size(); i++){
                    operator = ((Nodo)order.get(i)).Tipo;
                        if(operator.equals("&&") || operator.equals("||")){
                            ArrayList hijos = (((Nodo)order.get(i)).getHijos());
                            for(int j = 0; j < hijos.size(); j++){
                                operator = (((Nodo)hijos.get(j)).Tipo);
                                ArrayList hijos2 = (((Nodo)hijos.get(j)).getHijos());

                                if (i >= 1 && j >= 1){
                                   
                                   operator = ((Nodo)order.get(i)).Tipo;
                                   Cuadruplo cuad = new Cuadruplo(operator,"t_" + (contTemp-2),"t_" + (contTemp-1),"t_" + contTemp++);
                                   cuads.add(cuad);
                                }
                                
                                else {
                                    operator = (((Nodo)hijos.get(j)).Tipo);
                                    // Agrego el cuadruplo de operacion relacional (comparar valores)
                                    Cuadruplo cuad = new Cuadruplo(operator,((Nodo)hijos2.get(0)).getTipo(),((Nodo)hijos2.get(1)).getTipo(),"t_" + contTemp++);
                                    cuads.add(cuad);
                                }
                            }
                            
                            if(i < 1){
                                operator = (((Nodo)order.get(i)).Tipo);
                                Cuadruplo cuad = new Cuadruplo(operator,"t_" + (contTemp-2),"t_" + (contTemp-1),"t_" + contTemp++);
                                cuads.add(cuad);
                            }

                        } 
                    
                    }   
                }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // id_textASIG ::= error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected printing content"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("id_textASIG",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // id_textASIG ::= INTEGER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id.toString();  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("id_textASIG",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // id_textASIG ::= TEXT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id.toString();  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("id_textASIG",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // id_textASIG ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id.toString();  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("id_textASIG",84, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // more_contentASIG ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("more_contentASIG",83, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // more_contentASIG ::= ADD_OP id_textASIG more_contentASIG 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 String s = a + "|" + b;
                                                        RESULT = s;                                                      
                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("more_contentASIG",83, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // content_printASIG ::= id_textASIG more_contentASIG 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 String s = a + "|" + b;
                                                RESULT = s; 
                                           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("content_printASIG",82, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // id_text ::= error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected printing content"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("id_text",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // id_text ::= TEXT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id.toString();  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("id_text",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // id_text ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id.toString();  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("id_text",77, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // more_content ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("more_content",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // more_content ::= ADD_OP id_text more_content 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 String s = a + "|" + b;
                                                        RESULT = s;                                                      
                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("more_content",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // content_print ::= id_text more_content 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 String s = a + "|" + b;
                                                RESULT = s; 
                                           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("content_print",74, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // salida ::= PRINT LPAR content_print RPAR error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected - (dash) at end of line"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("salida",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // salida ::= PRINT LPAR content_print error DASH 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected ')'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("salida",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // salida ::= PRINT error content_print RPAR DASH 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected '('"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("salida",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // salida ::= PRINT LPAR content_print RPAR DASH 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 ArrayList arreglo = new ArrayList();
                                                    Nodo salida = new Nodo("salida",c.toString());
                                                    arreglo.add(salida);
                                                    RESULT = arreglo; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("salida",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // entry ::= READ LPAR ID RPAR error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected - (dash) at end of line"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entry",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // entry ::= READ LPAR ID error DASH 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected ')'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entry",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // entry ::= READ LPAR error RPAR DASH 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected in-variable"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entry",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // entry ::= READ error ID RPAR DASH 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected '('"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entry",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // entry ::= READ LPAR ID RPAR DASH 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		  ArrayList arreglo = new ArrayList();
                                            Nodo entrada = new Nodo("entrada",id.toString());
                                            arreglo.add(entrada);
                                            RESULT = arreglo; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entry",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // factor ::= LPAR arithmetic_exp RPAR 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = ae.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // factor ::= FALSE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // factor ::= TRUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // factor ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		   /*if( this.parser.buscarTipo(id.toString()).length() == 0 ){
                                                System.out.println("\u001B[31m" + "Assigned variable "+ id.toString() +" does not exist.");
                                                RESULT = "Error - "+id.toString();
                                            }
                                            else*/
                                                RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // factor ::= INTEGER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // factor ::= func 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = f.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",67, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // term ::= term DIV_OP factor 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int divleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int divright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int factleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  String d = term.toString() + "/" + fact.toString();
                                                RESULT = d; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("term",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // term ::= term MULT_OP factor 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int timleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int timright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tim = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int factleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  String mult = term.toString() + "*" + fact.toString();
                                                 
                                                RESULT = mult; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("term",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // term ::= factor 
            {
              Object RESULT =null;
		int factleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = fact.toString();
                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("term",66, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // arithmetic_exp ::= arithmetic_exp MINUS_OP term 
            {
              Object RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object se1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int minleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  String sub = se1.toString() + "-" + term.toString();
                                                            RESULT = sub; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_exp",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // arithmetic_exp ::= arithmetic_exp ADD_OP term 
            {
              Object RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object se1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  String add = se1.toString() + "+" + term.toString();
                                                            RESULT = add; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_exp",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // arithmetic_exp ::= term 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = term; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_exp",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // assign_var ::= ID ASSIGN arithmetic_exp DASH 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		   String sArit = id.toString() + "=" + ae;
                                                        ArrayList arreglo = new ArrayList();
                                                        Nodo op_aritmetica= new Nodo("aritmetica",sArit);
                                                        arreglo.add(op_aritmetica);
                                                        RESULT = arreglo; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("assign_var",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // varRet ::= error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected return variable"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varRet",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // varRet ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = "false"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varRet",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // varRet ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = "true"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varRet",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // varRet ::= INTEGER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varRet",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // varRet ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varRet",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // params_type ::= error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected type"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // params_type ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // params_type ::= BOOLPTR 
            {
              Object RESULT =null;
		 RESULT = "bool*"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // params_type ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "bool"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // params_type ::= CHARPTR 
            {
              Object RESULT =null;
		 RESULT = "char*"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // params_type ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // params_type ::= INTPTR 
            {
              Object RESULT =null;
		 RESULT = "int*"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // params_type ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // types ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = "false"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("types",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // types ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = "true"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("types",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // types ::= INTEGER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("types",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // types ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("types",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // moreIds ::= types 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 ArrayList ids = new ArrayList();
                    ids.add(id.toString());
                    RESULT = ids; 
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("moreIds",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // moreIds ::= moreIds COMMA types 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 ArrayList idsArray = (ArrayList)ids;
                                            idsArray.add("," + id.toString());
                                            RESULT = idsArray; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("moreIds",81, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ids ::= 
            {
              Object RESULT =null;
		ArrayList idsArray = new ArrayList(); RESULT = idsArray; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ids",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // ids ::= moreIds 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		ArrayList idsArray = (ArrayList)ids;
                                
                                RESULT = idsArray; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ids",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // parameters ::= params_type ID 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		ArrayList arregloParams = new ArrayList();
                                arregloParams.add(param.toString());
                                RESULT = arregloParams;
                                Tabla nuevaVar = new Tabla((String)id, param.toString(), this.parser.ambito , 0, 0, 1,"");
                                this.parser.tabla.add( nuevaVar ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parameters",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // parameters ::= parameters COMMA params_type ID 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		ArrayList arregloParams = (ArrayList)params;
                                                arregloParams.add(param.toString());
                                                RESULT = arregloParams;
                                                Tabla nuevaVar = new Tabla((String)id, param.toString(), this.parser.ambito , 0, 0, 1,"");
                                                this.parser.tabla.add( nuevaVar ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parameters",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // dec_main ::= MAIN ARROW LPAR NT$9 parameters RPAR NT$10 LKEY body RETURN varRet DASH RKEY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 Nodo nodo = new Nodo("main", "");
                                                                                    String tipoRetorno = "";
                                                                                    if(this.parser.isNumeric(ret.toString()))
                                                                                        tipoRetorno = "int";
                                                                                    else if(ret.toString().length() > 0)
                                                                                        tipoRetorno = this.parser.buscarTipo(ret.toString());
                                                                                    else
                                                                                        tipoRetorno = "Variable de retorno no ha sido declarada";

                                                                                    String tipoFunc = "";
                                                                                    String parametrosFunc = "";
                                                                                    ArrayList arregloParams = (ArrayList)params;
                                                                                    for(int i = 0; i < arregloParams.size(); i++){
                                                                                        parametrosFunc+=((String)arregloParams.get(i));
                                                                                        if(i != arregloParams.size()-1)
                                                                                            parametrosFunc+=" x ";
                                                                                    }
                                                                                    this.parser.quitarAmbito();
                                                                                    tipoFunc+=parametrosFunc+ " -> " + tipoRetorno;
                                                                                    Tabla nuevaVar = new Tabla("main", tipoFunc, this.parser.ambito, this.parser.profundidad, 0, 0,"");
                                                                                    this.parser.tabla.add( nuevaVar );
                                                                                    ArrayList arregloNodos = (ArrayList) body;
                                                                                    for(int i = 0; i < arregloNodos.size(); i++){
                                                                                        Nodo temp = ((Nodo)arregloNodos.get(i));
                                                                                        nodo.addHijo(temp);
                                                                                    }
                                                                                    Nodo nodoRet = new Nodo("return", ret.toString());
                                                                                    nodo.addHijo(nodoRet);
                                                                                    ArrayList arregloFuncion = new ArrayList();
                                                                                    arregloFuncion.add(nodo);
                                                                                    this.parser.esMetodo = false;
                                                                                    RESULT = arregloFuncion;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_main",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
 this.parser.esMetodo = true; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",97, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NT$9 ::= 
            {
              Object RESULT =null;
 this.parser.ambito+=".main"; this.parser.profundidad=0; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",96, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // func ::= ID ARROW ID LPAR ids RPAR error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected - (dash) at end of line"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("func",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // func ::= ID ARROW ID LPAR ids error DASH 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected ')'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("func",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // func ::= ID ARROW ID error ids RPAR DASH 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected '('"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("func",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // func ::= ID error ID LPAR ids RPAR DASH 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected '=>'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("func",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // func ::= ID LPAR ids RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  ArrayList arreglo = new ArrayList();
                                            Nodo func = new Nodo("callFunc",id.toString());
                                            arreglo.add(func);
                                            ArrayList idsArray = (ArrayList)ids;
                                            String variables = "";
                                            for (int i = 0; i < idsArray.size(); i++) {
                                                variables+=idsArray.get(i)+" ";
                                            }
                                            String llamado = id.toString()+"("+variables+")";
                                            String s = llamado.replaceAll(" ","");
                                            RESULT = s; 
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("func",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // dec_function ::= FUNCTION ID NT$7 ARROW LPAR parameters RPAR NT$8 LKEY body RETURN varRet DASH RKEY DASH 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-13)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 Nodo nodo = new Nodo("funcion", nombre.toString());
                            String tipoRetorno = "";
                            if(this.parser.isNumeric(ret.toString()))
                                tipoRetorno = "int";
                            else if(ret.toString().length() > 0)
                                tipoRetorno = this.parser.buscarTipo(ret.toString());
                            else
                                tipoRetorno = "Variable de retorno no ha sido declarada";
                            
                            String tipoFunc = "";
                            String parametrosFunc = "";
                            ArrayList arregloParams = (ArrayList)params;
                            for(int i = 0; i < arregloParams.size(); i++){
                                parametrosFunc+=((String)arregloParams.get(i));
                                if(i != arregloParams.size()-1)
                                    parametrosFunc+=" x ";
                            }
                            this.parser.quitarAmbito();
                            tipoFunc+=parametrosFunc+ " -> " + tipoRetorno;
                            Tabla nuevaVar = new Tabla(nombre.toString(), tipoFunc, this.parser.ambito, this.parser.profundidad, 0, 0,"");
                            this.parser.tabla.add( nuevaVar );
                            
                            ArrayList arregloNodos = (ArrayList) body;
                            for(int i = 0; i < arregloNodos.size(); i++){
                                Nodo temp = ((Nodo)arregloNodos.get(i));
                                nodo.addHijo(temp);
                            }
                            Nodo nodoRet = new Nodo("return", ret.toString());
                            nodo.addHijo(nodoRet);
                            Nodo fin = new Nodo("finFunc", nombre.toString());
                            nodo.addHijo(fin);
                            ArrayList arregloFuncion = new ArrayList();
                            arregloFuncion.add(nodo);
                            this.parser.esMetodo = false;
                            RESULT = arregloFuncion; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_function",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
 this.parser.esMetodo = true; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",95, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$7 ::= 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 this.parser.ambito+="."+nombre.toString(); this.parser.profundidad=0; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",94, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // body ::= 
            {
              Object RESULT =null;
		
            ArrayList arreglo = new ArrayList();
            RESULT = arreglo;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // body ::= body assign_var 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null){
                                ArrayList arregloNodos = (ArrayList) b;
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo assign_var = (Nodo)arregloCommand.get(0);
                                arregloNodos.add( assign_var );
                                RESULT = arregloNodos;
                             } else {
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo assign_var = (Nodo)arregloCommand.get(0);
                                RESULT = a;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // body ::= body salida 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null){
                                ArrayList arregloNodos = (ArrayList) b;
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo salida = (Nodo)arregloCommand.get(0);
                                arregloNodos.add( salida );
                                RESULT = arregloNodos;
                             } else {
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo salida = (Nodo)arregloCommand.get(0);
                                RESULT = a;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // body ::= body entry 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null){
                                ArrayList arregloNodos = (ArrayList) b;
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo entrada = (Nodo)arregloCommand.get(0);
                                arregloNodos.add( entrada );
                                RESULT = arregloNodos;
                             } else {
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo entrada = (Nodo)arregloCommand.get(0);
                                RESULT = a;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // body ::= body func 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null){
                                ArrayList arregloNodos = (ArrayList) b;
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo func = (Nodo)arregloCommand.get(0);
                                arregloNodos.add( func );
                                RESULT = arregloNodos;
                             } else {
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo func = (Nodo)arregloCommand.get(0);
                                RESULT = a;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // body ::= body NT$6 switch 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 this.parser.quitarAmbito();
                    if(b != null){
                        ArrayList arregloNodos = (ArrayList) b;
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo switchVar = (Nodo)arregloCommand.get(0);
                        arregloNodos.add( switchVar );
                        RESULT = arregloNodos;
                     } else {
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo switchVar = (Nodo)arregloCommand.get(0);
                        RESULT = a;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NT$6 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 this.parser.ambito+=".switch"; this.parser.profundidad++; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",93, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // body ::= body NT$5 for 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 this.parser.quitarAmbito();
                    if(b != null){
                        ArrayList arregloNodos = (ArrayList) b;
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo forVar = (Nodo)arregloCommand.get(0);
                        arregloNodos.add( forVar );
                        RESULT = arregloNodos;
                    } else {
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo forVar = (Nodo)arregloCommand.get(0);
                        RESULT = a;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // NT$5 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 this.parser.ambito+=".for"; this.parser.profundidad++; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",92, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // body ::= body doWhile 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null){
                            ArrayList arregloNodos = (ArrayList) b;
                            ArrayList arregloCommand = (ArrayList) a;
                            Nodo doWhile = (Nodo)arregloCommand.get(0);
                            arregloNodos.add( doWhile );
                            RESULT = arregloNodos;
                         } else {
                            ArrayList arregloCommand = (ArrayList) a;
                            Nodo doWhile = (Nodo)arregloCommand.get(0);
                            RESULT = a;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // body ::= body NT$4 while 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 this.parser.quitarAmbito();
                    if(b != null){
                        ArrayList arregloNodos = (ArrayList) b;
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo whileVar = (Nodo)arregloCommand.get(0);
                        arregloNodos.add( whileVar );
                        RESULT = arregloNodos;
                     } else {
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo whileVar = (Nodo)arregloCommand.get(0);
                        RESULT = a;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$4 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 this.parser.ambito+=".while"; this.parser.profundidad++; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",91, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // body ::= body if 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null){
                        ArrayList arregloNodos = (ArrayList) b;
                        ArrayList arregloCommand = (ArrayList) a;
                        for(int i = 0; i < arregloCommand.size(); i++){
                            Nodo temp = (Nodo)arregloCommand.get(i);
                            arregloNodos.add( temp );
                        }
                        RESULT = arregloNodos;
                     } else {
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo ifVar = (Nodo)arregloCommand.get(0);
                        RESULT = a;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // body ::= body declaracion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null){
                                ArrayList arregloNodos = (ArrayList) b;
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo declaracionVar = (Nodo)arregloCommand.get(0);
                                arregloNodos.add( declaracionVar );
                                RESULT = arregloNodos;
                             } else {
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo declaracionVar = (Nodo)arregloCommand.get(0);
                                RESULT = a;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // default ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("default",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // default ::= DEFAULT COLON body caseBreak 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("default",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // caseBreak ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caseBreak",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // caseBreak ::= BREAK DASH 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caseBreak",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // varCase ::= SIMCOM LETTER SIMCOM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varCase",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // varCase ::= INTEGER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varCase",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // declaracionCase ::= CASE varCase COLON body caseBreak 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object vc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Nodo nodo = new Nodo("case","");
                                                        ArrayList nodos = new ArrayList();
                                                        ArrayList arregloNodos = (ArrayList) body;
                                                        if(arregloNodos != null){
                                                            for(int i = 0; i < arregloNodos.size(); i++){
                                                                Nodo temp = ((Nodo)arregloNodos.get(i));
                                                                nodo.addHijo(temp);
                                                            } 
                                                        }
                                                        nodos.add(nodo);
                                                        RESULT = nodos; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionCase",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // case ::= declaracionCase 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = dec; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("case",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // case ::= case declaracionCase 
            {
              Object RESULT =null;
		int casesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object cases = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int currCaseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int currCaseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object currCase = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(cases != null){
                                                    ArrayList arregloNodos = (ArrayList) cases;
                                                    ArrayList arregloCommand = (ArrayList) currCase;
                                                    Nodo caseE = (Nodo)arregloCommand.get(0);
                                                    arregloNodos.add( caseE );
                                                    RESULT = arregloNodos;
                                                 } else {
                                                    ArrayList arregloCommand = (ArrayList) currCase;
                                                    Nodo caseE = (Nodo)arregloCommand.get(0);
                                                    RESULT = currCase;}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("case",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // caseExist ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caseExist",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // caseExist ::= case 
            {
              Object RESULT =null;
		int caseEleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int caseEright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object caseE = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = caseE; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caseExist",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // switch ::= SWITCH LPAR ID RPAR LKEY caseExist default RKEY 
            {
              Object RESULT =null;
		int caseEleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int caseEright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object caseE = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 Nodo nodo = new Nodo("switch", "");
                                                                ArrayList arregloNodos = new ArrayList();
                                                                ArrayList arregloCase = (ArrayList) caseE;
                                                                if(arregloCase != null) {
                                                                    for(int i = 0; i < arregloCase.size(); i++){
                                                                        Nodo temp = ((Nodo)arregloCase.get(i));
                                                                        nodo.addHijo(temp);
                                                                    }
                                                                }
                                                                arregloNodos.add(nodo);
                                                                RESULT = arregloNodos; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("switch",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // instanciacionIntegerFor ::= ID ASSIGN error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected a number."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntegerFor",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // instanciacionIntegerFor ::= ID error INTEGER 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected '='."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntegerFor",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // instanciacionIntegerFor ::= error ASSIGN INTEGER 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntegerFor",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // instanciacionIntegerFor ::= ID ASSIGN INTEGER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int inteleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int interight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object inte = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo nodo = new Nodo(id.toString(), inte.toString()); RESULT=nodo; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntegerFor",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // declaracionFor ::= 
            {
              Object RESULT =null;
		 ArrayList array = new ArrayList(); RESULT=array; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionFor",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // declaracionFor ::= INT instanciacionIntegerFor 
            {
              Object RESULT =null;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object node = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		   
                                            ArrayList array = new ArrayList();
                                            Nodo nodo = (Nodo)node;
                                            array.add(nodo);
                                            RESULT=array;
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionFor",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // declaracionFor ::= declaracionFor COMMA instanciacionIntegerFor 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int nodeleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int noderight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object node = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                ArrayList arreglo = (ArrayList)array;
                                                                                Nodo nodo = (Nodo)node;
                                                                                arreglo.add(nodo);
                                                                                RESULT=arreglo;
                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionFor",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // autoAssign ::= error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Unexpected character."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("autoAssign",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // autoAssign ::= MULTFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("autoAssign",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // autoAssign ::= MINUSFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("autoAssign",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // autoAssign ::= ADDFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("autoAssign",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // for ::= FOR LPAR declaracionFor SEMICOLON conditionalExpr SEMICOLON ID autoAssign RPAR LKEY body RKEY 
            {
              Object RESULT =null;
		int decForleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int decForright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object decFor = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Nodo nodo = new Nodo("for", "");
                                                                                                            Nodo condicion = new Nodo("condicion", "");
                                                                                                            Nodo cuerpo = new Nodo("cuerpo", "");
                                                                                                            Nodo declaracionFor = new Nodo("declaracionFor", "");
                                                                                                            ArrayList arregloBody = (ArrayList) body;
                                                                                                            if(arregloBody != null){
                                                                                                                for(int i = 0; i < arregloBody.size(); i++){
                                                                                                                    Nodo temp = ((Nodo)arregloBody.get(i));
                                                                                                                    cuerpo.addHijo(temp);
                                                                                                                }
                                                                                                            }
                                                                                                            Nodo conds = (Nodo) cond;
                                                                                                            condicion.addHijo(conds);

                                                                                                            ArrayList arregloDecFor = (ArrayList) decFor;
                                                                                                            if(arregloDecFor != null){
                                                                                                                for(int i = 0; i < arregloDecFor.size(); i++){
                                                                                                                    Nodo temp = ((Nodo)arregloDecFor.get(i));
                                                                                                                    declaracionFor.addHijo(temp);
                                                                                                                }
                                                                                                            }
                                                                                                            
                                                                                                            nodo.addHijo(declaracionFor);
                                                                                                            nodo.addHijo(condicion);
                                                                                                            nodo.addHijo(cuerpo);
                                                                                                            ArrayList arregloNodos = new ArrayList();
                                                                                                            arregloNodos.add(nodo);
                                                                                                            RESULT = arregloNodos; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // doWhile ::= DO error body RKEY WHILE LPAR conditionalExpr RPAR DASH 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		 System.out.println("\u001B[31m" + "Expected '{'."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("doWhile",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // doWhile ::= error LKEY body RKEY WHILE LPAR conditionalExpr RPAR DASH 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		 System.out.println("\u001B[31m" + "Expected do."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("doWhile",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // doWhile ::= DO LKEY NT$2 body NT$3 RKEY WHILE LPAR conditionalExpr RPAR DASH 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 Nodo nodo = new Nodo("do while", "");
                                                                        Nodo condicion = new Nodo("condicion", "");
                                                                        Nodo cuerpo = new Nodo("cuerpo", "");
                                                                        ArrayList arregloBody = (ArrayList) body;
                                                                        if(arregloBody != null){
                                                                            for(int i = 0; i < arregloBody.size(); i++){
                                                                                Nodo temp = ((Nodo)arregloBody.get(i));
                                                                                cuerpo.addHijo(temp);
                                                                            }
                                                                        }
                                                                        Nodo conds = (Nodo) cond;
                                                                        condicion.addHijo(conds);

                                                                        nodo.addHijo(condicion);
                                                                        nodo.addHijo(cuerpo);
                                                                        ArrayList arregloNodos = new ArrayList();
                                                                        arregloNodos.add(nodo);
                                                                        RESULT = arregloNodos; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("doWhile",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 this.parser.quitarAmbito(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",90, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$2 ::= 
            {
              Object RESULT =null;
 this.parser.ambito+=".dowhile"; this.parser.profundidad++; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",89, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // while ::= WHILE LPAR conditionalExpr RPAR LKEY body error 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println("\u001B[31m" + "Expected '}'."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("while",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // while ::= WHILE LPAR conditionalExpr RPAR error body RKEY 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println("\u001B[31m" + "Expected '{'."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("while",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // while ::= WHILE LPAR conditionalExpr error LKEY body RKEY 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println("\u001B[31m" + "Expected ')'."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("while",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // while ::= WHILE error conditionalExpr RPAR LKEY body RKEY 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println("\u001B[31m" + "Expected '('."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("while",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // while ::= WHILE LPAR conditionalExpr RPAR LKEY body RKEY 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Nodo nodo = new Nodo("while", "");
                                                                    Nodo condicion = new Nodo("condicion", "");
                                                                    Nodo cuerpo = new Nodo("cuerpo", "");
                                                                    ArrayList arregloBody = (ArrayList) body;
                                                                    if(arregloBody != null){
                                                                        for(int i = 0; i < arregloBody.size(); i++){
                                                                            Nodo temp = ((Nodo)arregloBody.get(i));
                                                                            cuerpo.addHijo(temp);
                                                                        }
                                                                    }
                                                                    Nodo conds = (Nodo) cond;
                                                                    condicion.addHijo(conds);

                                                                    nodo.addHijo(condicion);
                                                                    nodo.addHijo(cuerpo);
                                                                    ArrayList arregloNodos = new ArrayList();
                                                                    arregloNodos.add(nodo);
                                                                    RESULT = arregloNodos; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("while",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ifSinElse ::= IF LPAR conditionalExpr RPAR LKEY body error 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println("\u001B[31m" + "Expected '}'."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSinElse",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ifSinElse ::= IF LPAR conditionalExpr RPAR error body RKEY 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println("\u001B[31m" + "Expected '{'."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSinElse",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ifSinElse ::= IF LPAR conditionalExpr error LKEY body RKEY 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println("\u001B[31m" + "Expected ')'."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSinElse",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ifSinElse ::= IF error conditionalExpr RPAR LKEY body RKEY 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println("\u001B[31m" + "Expected '('."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSinElse",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ifSinElse ::= error LPAR conditionalExpr RPAR LKEY body RKEY 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println("\u001B[31m" + "Expected if."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSinElse",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ifSinElse ::= IF LPAR conditionalExpr RPAR LKEY body RKEY 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		Nodo nodo = new Nodo("else if", "");
                                                            ArrayList arregloBody = (ArrayList) body;
                                                            if(arregloBody != null){
                                                                for(int i = 0; i < arregloBody.size(); i++){
                                                                    Nodo temp = ((Nodo)arregloBody.get(i));
                                                                    nodo.addHijo(temp);
                                                                }
                                                            }
                                                            ArrayList arregloNodos = new ArrayList();
                                                            arregloNodos.add(nodo);
                                                            RESULT = arregloNodos;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSinElse",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // else ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // else ::= else ELSE ifSinElse 
            {
              Object RESULT =null;
		int ifSinElseleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int ifSinElseright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ifSinElse = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = ifSinElse; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // if ::= IF error conditionalExpr RPAR LKEY body RKEY else 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("\u001B[31m" + "Expected '('."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // if ::= error LPAR conditionalExpr RPAR LKEY body RKEY else 
            {
              Object RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("\u001B[31m" + "Expected if."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // if ::= IF LPAR conditionalExpr RPAR LKEY NT$0 body NT$1 RKEY else 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int elseIfleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int elseIfright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object elseIf = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                                                            
                                                                            if(elseIf != null){
                                                                            Nodo nodo = new Nodo("if", "");
                                                                            Nodo cuerpo = new Nodo("cuerpo", "");
                                                                            Nodo condicion = new Nodo("condicion", "");

                                                                            Nodo conds = (Nodo) cond;
                                                                            condicion.addHijo(conds);

                                                                            ArrayList arregloBody = (ArrayList) body;
                                                                            if(arregloBody != null){
                                                                                for(int i = 0; i < arregloBody.size(); i++){
                                                                                    Nodo temp = ((Nodo)arregloBody.get(i));
                                                                                    cuerpo.addHijo(temp);
                                                                                }
                                                                            }
                                                                            nodo.addHijo(condicion);
                                                                            nodo.addHijo(cuerpo);
                                                                            ArrayList arregloNodos = new ArrayList();
                                                                            arregloNodos.add(nodo);
                                                                            ArrayList arregloElse = (ArrayList) elseIf;
                                                                            if(arregloElse != null){
                                                                                for(int i = 0; i < arregloElse.size(); i++){
                                                                                    Nodo temp = ((Nodo)arregloElse.get(i));
                                                                                    arregloNodos.add(temp);
                                                                                }
                                                                            }
                                                                            RESULT = arregloNodos;
                                                                        } else {
                                                                            Nodo nodo = new Nodo("if", "");
                                                                            Nodo cuerpo = new Nodo("cuerpo", "");
                                                                            Nodo condicion = new Nodo("condicion", "");

                                                                            Nodo conds = (Nodo) cond;
                                                                            condicion.addHijo(conds);

                                                                            ArrayList arregloBody = (ArrayList) body;
                                                                            if(arregloBody != null){
                                                                                for(int i = 0; i < arregloBody.size(); i++){
                                                                                    Nodo temp = ((Nodo)arregloBody.get(i));
                                                                                    cuerpo.addHijo(temp);
                                                                                }
                                                                            }
                                                                            nodo.addHijo(condicion);
                                                                            nodo.addHijo(cuerpo);
                                                                            ArrayList arregloNodos = new ArrayList();
                                                                            arregloNodos.add(nodo);
                                                                            RESULT = arregloNodos; } 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
 this.parser.quitarAmbito(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",88, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$0 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
 this.parser.ambito+=".if"; this.parser.profundidad++; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",87, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // comparator ::= NOTEQUAL_OP 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = comp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // comparator ::= GREATEREQUAL_OP 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = comp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // comparator ::= LESSEQUAL_OP 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = comp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // comparator ::= GREATERTHAN_OP 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = comp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // comparator ::= LESSTHAN_OP 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = comp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // comparator ::= EQUAL_OP 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = comp; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // logicalExprID ::= error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Unexpected character."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExprID",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // logicalExprID ::= INTEGER 
            {
              Object RESULT =null;
		int inteleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int interight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object inte = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = inte; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExprID",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // logicalExprID ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExprID",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // logicalExprComp ::= 
            {
              Object RESULT =null;
		ArrayList arregloExpresiones = new ArrayList();
        RESULT = arregloExpresiones; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExprComp",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // logicalExprComp ::= comparator logicalExprID 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 ArrayList arregloExpresiones = new ArrayList();
                                                            Nodo expresion = new Nodo(expr.toString(), "");
                                                            Nodo condition = new Nodo(comp.toString(), "");
                                                            arregloExpresiones.add(condition);
                                                            arregloExpresiones.add(expresion);
                                                            RESULT = arregloExpresiones;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExprComp",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // logicalExpr ::= error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Unexpected character."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExpr",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // logicalExpr ::= FALSE 
            {
              Object RESULT =null;
		 Nodo fal = new Nodo("false", "");RESULT = fal; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExpr",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // logicalExpr ::= TRUE 
            {
              Object RESULT =null;
		 Nodo tru = new Nodo("true", ""); RESULT = tru; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExpr",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // logicalExpr ::= INTEGER comparator logicalExprID 
            {
              Object RESULT =null;
		int inteleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int interight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object inte = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo expresion1 = new Nodo(inte.toString(), "");
                                            Nodo expresion2 = new Nodo(expr.toString(), "");
                                            Nodo condition = new Nodo(comp.toString(), "");
                                            condition.addHijo(expresion1);
                                            condition.addHijo(expresion2);
                                            RESULT = condition; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExpr",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // logicalExpr ::= ID logicalExprComp 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo expresion1 = new Nodo(id.toString(), "");
                                                    ArrayList arregloExpresion = (ArrayList) arreglo;
                                                    if(arregloExpresion.size() > 0){
                                                        Nodo condition = new Nodo( ((Nodo)arregloExpresion.get(0)).getTipo(), "");
                                                        Nodo expresion2 = new Nodo( ((Nodo)arregloExpresion.get(1)).getTipo(), "");
                                                        condition.addHijo(expresion1);
                                                        condition.addHijo(expresion2);
                                                        RESULT = condition;
                                                    } else{
                                                        Nodo condition = new Nodo( "true", "");
                                                        condition.addHijo(expresion1);
                                                        RESULT = condition;
                                                    } 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExpr",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // andORor ::= error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Unknown character."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("andORor",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // andORor ::= OR_OP 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = or.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("andORor",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // andORor ::= AND_OP 
            {
              Object RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = and.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("andORor",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // andExpr ::= andExpr AND_OP LPAR logicalExpr RPAR 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int andorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int andorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object andor = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 Nodo expresion1 = (Nodo)expr1;
                                                                Nodo expresion2 = (Nodo)expr2;
                                                                Nodo condition = new Nodo(andor.toString(), "");
                                                                condition.addHijo(expresion1);
                                                                condition.addHijo(expresion2);
                                                                RESULT =  condition;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("andExpr",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // andExpr ::= logicalExpr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		   Nodo expresion = (Nodo)expr;
                            RESULT = expresion; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("andExpr",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // andExpr ::= andExpr AND_OP logicalExpr 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int andorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int andorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object andor = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo expresion1 = (Nodo)expr1;
                                                            Nodo expresion2 = (Nodo)expr2;
                                                            Nodo condition = new Nodo(andor.toString(), "");
                                                            condition.addHijo(expresion1);
                                                            condition.addHijo(expresion2);
                                                            RESULT =  condition;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("andExpr",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // conditionalExpr ::= conditionalExpr OR_OP LPAR andExpr RPAR 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int andorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int andorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object andor = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  Nodo expresion1 = (Nodo)expr1;
                                                                    Nodo expresion2 = (Nodo)expr2;
                                                                    Nodo condition = new Nodo(andor.toString(), "");
                                                                    condition.addHijo(expresion1);
                                                                    condition.addHijo(expresion2);
                                                                    RESULT =  condition;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("conditionalExpr",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // conditionalExpr ::= andExpr 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		   Nodo expresion = (Nodo)expr;
                        RESULT = expresion; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("conditionalExpr",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // conditionalExpr ::= conditionalExpr OR_OP andExpr 
            {
              Object RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object expr1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int andorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int andorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object andor = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object expr2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  Nodo expresion1 = (Nodo)expr1;
                                                                        Nodo expresion2 = (Nodo)expr2;
                                                                        Nodo condition = new Nodo(andor.toString(), "");
                                                                        condition.addHijo(expresion1);
                                                                        condition.addHijo(expresion2);
                                                                        RESULT =  condition;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("conditionalExpr",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // contenidoString ::= error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidoString",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // contenidoString ::= contenidoString COMMA error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidoString",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // contenidoString ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidoString",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // contenidoString ::= contenidoString ID 
            {
              Object RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object cont = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = cont.toString() + " " + id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidoString",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // iniciacionString ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionString",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // iniciacionString ::= ASSIGN DOBCOM contenidoString DOBCOM 
            {
              Object RESULT =null;
		int contleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int contright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object cont = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = cont.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionString",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // instanciacionString ::= error iniciacionString 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionString",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // instanciacionString ::= ID iniciacionString 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int integerleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo var = new Nodo(id.toString(), integer.toString());
                                                            RESULT = var; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionString",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // asignacionString ::= STRING instanciacionString 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		ArrayList arregloInstancias = new ArrayList();
                                        Nodo newChar = new Nodo("string", "");
                                        Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                        arregloInstancias.add(newChar);
                                        arregloInstancias.add(newID);
                                        int temp = this.parser.direccion;
                                        if(this.parser.esMetodo)
                                            this.parser.direccion++;
                                        else
                                            temp = -1;
                                        Tabla nuevaVar = new Tabla(((Nodo)id).getTipo(), "string", this.parser.ambito, this.parser.profundidad, temp, 0,"");
                                        this.parser.tabla.add( nuevaVar );
                                        RESULT = arregloInstancias; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionString",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // asignacionString ::= asignacionString COMMA instanciacionString 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(b != null){
                                                                        ArrayList arregloNodos = (ArrayList) b;
                                                                        Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                                                        arregloNodos.add( newID );
                                                                        int temp = this.parser.direccion;
                                                                        if(this.parser.esMetodo)
                                                                            this.parser.direccion++;
                                                                        else
                                                                            temp = -1;
                                                                        Tabla nuevaVar = new Tabla(((Nodo)id).getTipo(), "string", this.parser.ambito, this.parser.profundidad, temp, 0,"");
                                                                        this.parser.tabla.add( nuevaVar );
                                                                        RESULT = arregloNodos;
                                                                     } else {
                                                                        ArrayList arregloInstancias = new ArrayList();
                                                                        Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                                                        arregloInstancias.add(newID);
                                                                        int temp = this.parser.direccion;
                                                                        if(this.parser.esMetodo)
                                                                            this.parser.direccion++;
                                                                        else
                                                                            temp = -1;
                                                                        Tabla nuevaVar = new Tabla(((Nodo)id).getTipo(), "string", this.parser.ambito, this.parser.profundidad, temp, 0,"");
                                                                        this.parser.tabla.add( nuevaVar );
                                                                        RESULT = arregloInstancias;}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionString",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // boolLista ::= boolLista COMMA bool 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("boolLista",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // boolLista ::= bool 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("boolLista",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // instanciacionBoolPtr ::= LBRAC boolLista RBRAC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBoolPtr",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // instanciacionBoolPtr ::= LBRAC RBRAC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBoolPtr",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // iniciacionBoolPtr ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionBoolPtr",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // iniciacionBoolPtr ::= ASSIGN instanciacionBoolPtr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionBoolPtr",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // instanciacionBoolPtr ::= error iniciacionBoolPtr 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBoolPtr",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // instanciacionBoolPtr ::= ID iniciacionBoolPtr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBoolPtr",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // asignacionBoolPtr ::= BOOLPTR instanciacionBoolPtr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		ArrayList arregloInstancias = new ArrayList();
                                        Nodo newChar = new Nodo("bool ptr", "");
                                        Nodo newID = new Nodo((String)id, "");
                                        arregloInstancias.add(newChar);
                                        arregloInstancias.add(newID);
                                        int temp = this.parser.direccion;
                                        if(this.parser.esMetodo)
                                            this.parser.direccion++;
                                        else
                                            temp = -1;
                                        Tabla nuevaVar = new Tabla((String)id, "bool*", this.parser.ambito, this.parser.profundidad, temp, 0,"");
                                        this.parser.tabla.add( nuevaVar );
                                        RESULT = arregloInstancias; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionBoolPtr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // asignacionBoolPtr ::= asignacionBoolPtr COMMA instanciacionBoolPtr 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(b != null){
                                                                        ArrayList arregloNodos = (ArrayList) b;
                                                                        Nodo newID = new Nodo((String)id, "");
                                                                        arregloNodos.add( newID );
                                                                        int temp = this.parser.direccion;
                                                                        if(this.parser.esMetodo)
                                                                            this.parser.direccion++;
                                                                        else
                                                                            temp = -1;
                                                                        Tabla nuevaVar = new Tabla((String)id, "bool*", this.parser.ambito, this.parser.profundidad, temp, 0,"");
                                                                        this.parser.tabla.add( nuevaVar );
                                                                        RESULT = arregloNodos;
                                                                     } else {
                                                                        ArrayList arregloInstancias = new ArrayList();
                                                                        Nodo newID = new Nodo((String)id, "");
                                                                        arregloInstancias.add(newID);
                                                                        int temp = this.parser.direccion;
                                                                        if(this.parser.esMetodo)
                                                                            this.parser.direccion++;
                                                                        else
                                                                            temp = -1;
                                                                        Tabla nuevaVar = new Tabla((String)id, "bool*", this.parser.ambito, this.parser.profundidad, temp, 0,"");
                                                                        this.parser.tabla.add( nuevaVar );
                                                                        RESULT = arregloInstancias;}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionBoolPtr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bool ::= error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected either true/false."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bool",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bool ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = "false"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bool",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bool ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = "true"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bool",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // iniciacionBool ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionBool",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // iniciacionBool ::= ASSIGN bool 
            {
              Object RESULT =null;
		int letterleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int letterright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object letter = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = letter.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionBool",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // instanciacionBool ::= error iniciacionBool 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBool",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // instanciacionBool ::= ID iniciacionBool 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int integerleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo var = new Nodo(id.toString(), integer.toString());
                                                            RESULT = var; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBool",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // asignacionBool ::= BOOL instanciacionBool 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		ArrayList arregloInstancias = new ArrayList();
                                Nodo newChar = new Nodo("bool", "");
                                Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                arregloInstancias.add(newChar);
                                arregloInstancias.add(newID);
                                int temp = this.parser.direccion;
                                if(this.parser.esMetodo)
                                    this.parser.direccion++;
                                else
                                    temp = -1;
                                Tabla nuevaVar = new Tabla(((Nodo)id).getTipo(), "bool", this.parser.ambito, this.parser.profundidad, temp, 0,"");
                                this.parser.tabla.add( nuevaVar );
                                RESULT = arregloInstancias; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionBool",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // asignacionBool ::= asignacionBool COMMA instanciacionBool 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(b != null){
                                                                    ArrayList arregloNodos = (ArrayList) b;
                                                                    Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                                                    arregloNodos.add( newID );
                                                                    int temp = this.parser.direccion;
                                                                    if(this.parser.esMetodo)
                                                                        this.parser.direccion++;
                                                                    else
                                                                        temp = -1;
                                                                    Tabla nuevaVar = new Tabla(((Nodo)id).getTipo(), "bool", this.parser.ambito, this.parser.profundidad, temp, 0,"");
                                                                    this.parser.tabla.add( nuevaVar );
                                                                    RESULT = arregloNodos;
                                                                 } else {
                                                                    ArrayList arregloInstancias = new ArrayList();
                                                                    Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                                                    arregloInstancias.add(newID);
                                                                    int temp = this.parser.direccion;
                                                                    if(this.parser.esMetodo)
                                                                        this.parser.direccion++;
                                                                    else
                                                                        temp = -1;
                                                                    Tabla nuevaVar = new Tabla(((Nodo)id).getTipo(), "bool", this.parser.ambito, this.parser.profundidad, temp, 0,"");
                                                                    this.parser.tabla.add( nuevaVar );
                                                                    RESULT = arregloInstancias;}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionBool",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instanciacionCharPtr ::= LBRAC charComillas RBRAC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionCharPtr",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instanciacionCharPtr ::= LBRAC RBRAC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionCharPtr",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // iniciacionCharPtr ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionCharPtr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // iniciacionCharPtr ::= ASSIGN instanciacionCharPtr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionCharPtr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instanciacionCharPointer ::= error iniciacionCharPtr 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionCharPointer",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instanciacionCharPointer ::= ID iniciacionCharPtr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionCharPointer",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asignacionCharPtr ::= CHARPTR instanciacionCharPointer 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		ArrayList arregloInstancias = new ArrayList();
                                            Nodo newChar = new Nodo("char ptr", "");
                                            Nodo newID = new Nodo((String)id, "");
                                            arregloInstancias.add(newChar);
                                            arregloInstancias.add(newID);
                                            int temp = this.parser.direccion;
                                            if(this.parser.esMetodo)
                                                this.parser.direccion++;
                                            else
                                                temp = -1;
                                            Tabla nuevaVar = new Tabla((String)id, "char*", this.parser.ambito, this.parser.profundidad, temp, 0,"");
                                            this.parser.tabla.add( nuevaVar );
                                            RESULT = arregloInstancias; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionCharPtr",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asignacionCharPtr ::= asignacionCharPtr COMMA instanciacionCharPointer 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null){
                                                                            ArrayList arregloNodos = (ArrayList) b;
                                                                            Nodo newID = new Nodo((String)id, "");
                                                                            arregloNodos.add( newID );
                                                                            int temp = this.parser.direccion;
                                                                            if(this.parser.esMetodo)
                                                                                this.parser.direccion++;
                                                                            else
                                                                                temp = -1;
                                                                            Tabla nuevaVar = new Tabla((String)id, "char*", this.parser.ambito, this.parser.profundidad, temp, 0,"");
                                                                            this.parser.tabla.add( nuevaVar );
                                                                            RESULT = arregloNodos;
                                                                         } else {
                                                                            ArrayList arregloInstancias = new ArrayList();
                                                                            Nodo newID = new Nodo((String)id, "");
                                                                            arregloInstancias.add(newID);
                                                                            int temp = this.parser.direccion;
                                                                            if(this.parser.esMetodo)
                                                                                this.parser.direccion++;
                                                                            else
                                                                                temp = -1;
                                                                            Tabla nuevaVar = new Tabla((String)id, "char*", this.parser.ambito, this.parser.profundidad, temp, 0,"");
                                                                            this.parser.tabla.add( nuevaVar );
                                                                            RESULT = arregloInstancias;}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionCharPtr",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // charLista ::= error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected a char."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charLista",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // charLista ::= charLista COMMA error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected a char."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charLista",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // charLista ::= charLista COMMA LETTER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charLista",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // charLista ::= LETTER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charLista",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // charComillas ::= DOBCOM error DOBCOM 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected a char."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // charComillas ::= DOBCOM LETTER error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected a '.'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // charComillas ::= error LETTER DOBCOM 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected a '.'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // charComillas ::= DOBCOM LETTER DOBCOM 
            {
              Object RESULT =null;
		int letterleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int letterright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object letter = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = letter.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // charComillas ::= SIMCOM error SIMCOM 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected a char."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // charComillas ::= SIMCOM LETTER error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected a '.'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // charComillas ::= error LETTER SIMCOM 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected a '.'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // charComillas ::= SIMCOM LETTER SIMCOM 
            {
              Object RESULT =null;
		int letterleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int letterright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object letter = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = letter.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // iniciacionChar ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionChar",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // iniciacionChar ::= ASSIGN charComillas 
            {
              Object RESULT =null;
		int letterleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int letterright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object letter = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = letter.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionChar",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instanciacionChar ::= error iniciacionChar 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionChar",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instanciacionChar ::= ID iniciacionChar 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int integerleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo var = new Nodo(id.toString(), integer.toString());
                                                            RESULT = var; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionChar",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asignacionChar ::= CHAR instanciacionChar 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		ArrayList arregloInstancias = new ArrayList();
                                    Nodo newChar = new Nodo("char", "");
                                    Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                    arregloInstancias.add(newChar);
                                    arregloInstancias.add(newID);
                                    int temp = this.parser.direccion;
                                    if(this.parser.esMetodo)
                                        this.parser.direccion++;
                                    else
                                        temp = -1;
                                    Tabla nuevaVar = new Tabla(((Nodo)id).getTipo(), "char", this.parser.ambito, this.parser.profundidad, temp, 0,"");
                                    this.parser.tabla.add( nuevaVar );
                                    RESULT = arregloInstancias; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionChar",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacionChar ::= asignacionChar COMMA instanciacionChar 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null){
                                                                    ArrayList arregloNodos = (ArrayList) b;
                                                                    Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                                                    arregloNodos.add( newID );
                                                                    int temp = this.parser.direccion;
                                                                    if(this.parser.esMetodo)
                                                                        this.parser.direccion++;
                                                                    else
                                                                        temp = -1;
                                                                    Tabla nuevaVar = new Tabla(((Nodo)id).getTipo(), "char", this.parser.ambito, this.parser.profundidad, temp, 0,"");
                                                                    this.parser.tabla.add( nuevaVar );
                                                                    RESULT = arregloNodos;
                                                                 } else {
                                                                    ArrayList arregloInstancias = new ArrayList();
                                                                    Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                                                    arregloInstancias.add(newID);
                                                                    int temp = this.parser.direccion;
                                                                    if(this.parser.esMetodo)
                                                                        this.parser.direccion++;
                                                                    else
                                                                        temp = -1;
                                                                    Tabla nuevaVar = new Tabla(((Nodo)id).getTipo(), "char", this.parser.ambito, this.parser.profundidad, temp, 0,"");
                                                                    this.parser.tabla.add( nuevaVar );
                                                                    RESULT = arregloInstancias;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionChar",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instanciacionIntPtr ::= LBRAC integerLista RBRAC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntPtr",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instanciacionIntPtr ::= LBRAC RBRAC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntPtr",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // iniciacionIntegerPtr ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionIntegerPtr",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // iniciacionIntegerPtr ::= ASSIGN instanciacionIntPtr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionIntegerPtr",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instanciacionIntegerPtr ::= error iniciacionIntegerPtr 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntegerPtr",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instanciacionIntegerPtr ::= ID iniciacionIntegerPtr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = id.toString(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntegerPtr",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // asignacionIntegerPtr ::= INTPTR instanciacionIntegerPtr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		ArrayList arregloInstancias = new ArrayList();
                                    Nodo newInt = new Nodo("int ptr", "");
                                    Nodo newID = new Nodo((String)id, "");
                                    arregloInstancias.add(newInt);
                                    arregloInstancias.add(newID);
                                    int temp = this.parser.direccion;
                                    if(this.parser.esMetodo)
                                        this.parser.direccion++;
                                    else
                                        temp = -1;
                                    Tabla nuevaVar = new Tabla((String)id, "int*", this.parser.ambito, this.parser.profundidad, temp, 0,"");
                                    this.parser.tabla.add( nuevaVar );
                                    RESULT = arregloInstancias; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionIntegerPtr",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignacionIntegerPtr ::= asignacionIntegerPtr COMMA instanciacionIntegerPtr 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(b != null){
                                                                                    ArrayList arregloNodos = (ArrayList) b;
                                                                                    Nodo newID = new Nodo((String)id, "");
                                                                                    arregloNodos.add( newID );
                                                                                    int temp = this.parser.direccion;
                                                                                    if(this.parser.esMetodo)
                                                                                        this.parser.direccion++;
                                                                                    else
                                                                                        temp = -1;
                                                                                    Tabla nuevaVar = new Tabla((String)id, "int*", this.parser.ambito, this.parser.profundidad, temp, 0,"");
                                                                                    this.parser.tabla.add( nuevaVar );
                                                                                    RESULT = arregloNodos;
                                                                                 } else {
                                                                                    ArrayList arregloInstancias = new ArrayList();
                                                                                    Nodo newID = new Nodo((String)id, "");
                                                                                    arregloInstancias.add(newID);
                                                                                    int temp = this.parser.direccion;
                                                                                    if(this.parser.esMetodo)
                                                                                        this.parser.direccion++;
                                                                                    else
                                                                                        temp = -1;
                                                                                    Tabla nuevaVar = new Tabla((String)id, "int*", this.parser.ambito, this.parser.profundidad, temp, 0,"");
                                                                                    this.parser.tabla.add( nuevaVar );
                                                                                    RESULT = arregloInstancias;}
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionIntegerPtr",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // integerLista ::= error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected a number."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("integerLista",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // integerLista ::= integerLista COMMA error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected a number."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("integerLista",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // integerLista ::= integerLista COMMA INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("integerLista",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // integerLista ::= INTEGER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("integerLista",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // iniciacionInteger ::= 
            {
              Object RESULT =null;
		 RESULT = ""; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionInteger",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // iniciacionInteger ::= ASSIGN content_printASIG 
            {
              Object RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = integer; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionInteger",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instanciacionInteger ::= error iniciacionInteger 
            {
              Object RESULT =null;
		 System.out.println("Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionInteger",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instanciacionInteger ::= ID iniciacionInteger 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int integerleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 Nodo var = new Nodo(id.toString(), integer.toString());
                                                            RESULT = var; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionInteger",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignacionInteger ::= INT instanciacionInteger 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		ArrayList arregloInstancias = new ArrayList();
                                    Nodo newInt = new Nodo("int", "");
                                    Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                    arregloInstancias.add(newInt);
                                    arregloInstancias.add(newID);
                                    int temp = this.parser.direccion;
                                    if(this.parser.esMetodo)
                                        this.parser.direccion++;
                                    else
                                        temp = -1;
                                    Tabla nuevaVar = new Tabla( ((Nodo)id).getTipo(), "int", this.parser.ambito, this.parser.profundidad, temp, 0,"");
                                    this.parser.tabla.add( nuevaVar );
                                    RESULT = arregloInstancias; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionInteger",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // asignacionInteger ::= asignacionInteger COMMA instanciacionInteger 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  if(b != null){
                                                                                ArrayList arregloNodos = (ArrayList) b;
                                                                                Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                                                                arregloNodos.add( newID );
                                                                                int temp = this.parser.direccion;
                                                                                if(this.parser.esMetodo)
                                                                                    this.parser.direccion++;
                                                                                else
                                                                                    temp = -1;
                                                                                Tabla nuevaVar = new Tabla( ((Nodo)id).getTipo(), "int", this.parser.ambito, this.parser.profundidad, temp, 0,"");
                                                                                this.parser.tabla.add( nuevaVar );
                                                                                RESULT = arregloNodos;
                                                                             } else {
                                                                                ArrayList arregloInstancias = new ArrayList();
                                                                                Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                                                                arregloInstancias.add(newID);
                                                                                int temp = this.parser.direccion;
                                                                                if(this.parser.esMetodo)
                                                                                    this.parser.direccion++;
                                                                                else
                                                                                    temp = -1;
                                                                                Tabla nuevaVar = new Tabla( ((Nodo)id).getTipo(), "int", this.parser.ambito, this.parser.profundidad, temp, 0,"");
                                                                                this.parser.tabla.add( nuevaVar );
                                                                                RESULT = arregloInstancias;} 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionInteger",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion ::= asignacionString error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected - (dash) at end of line."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion ::= asignacionString DASH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		ArrayList declaracionArreglo = new ArrayList();
                                Nodo declaracion = new Nodo("declaracion","");
                                ArrayList arregloNodos = (ArrayList) a;
                                for(int i = 0; i < arregloNodos.size(); i++){
                                    Nodo temp = ((Nodo)arregloNodos.get(i));
                                    declaracion.addHijo(temp);
                                }
                                declaracionArreglo.add(declaracion);
                                RESULT = declaracionArreglo;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion ::= asignacionBoolPtr error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected - (dash) at end of line."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion ::= asignacionBoolPtr DASH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		ArrayList declaracionArreglo = new ArrayList();
                                Nodo declaracion = new Nodo("declaracion","");
                                ArrayList arregloNodos = (ArrayList) a;
                                for(int i = 0; i < arregloNodos.size(); i++){
                                    Nodo temp = ((Nodo)arregloNodos.get(i));
                                    declaracion.addHijo(temp);
                                }
                                declaracionArreglo.add(declaracion);
                                RESULT = declaracionArreglo;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion ::= asignacionBool error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected - (dash) at end of line."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion ::= asignacionBool DASH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		ArrayList declaracionArreglo = new ArrayList();
                                Nodo declaracion = new Nodo("declaracion","");
                                ArrayList arregloNodos = (ArrayList) a;
                                for(int i = 0; i < arregloNodos.size(); i++){
                                    Nodo temp = ((Nodo)arregloNodos.get(i));
                                    declaracion.addHijo(temp);
                                }
                                declaracionArreglo.add(declaracion);
                                RESULT = declaracionArreglo;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion ::= asignacionCharPtr error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected - (dash) at end of line."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= asignacionCharPtr DASH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		ArrayList declaracionArreglo = new ArrayList();
                                    Nodo declaracion = new Nodo("declaracion","");
                                    ArrayList arregloNodos = (ArrayList) a;
                                    for(int i = 0; i < arregloNodos.size(); i++){
                                        Nodo temp = ((Nodo)arregloNodos.get(i));
                                        declaracion.addHijo(temp);
                                    }
                                    declaracionArreglo.add(declaracion);
                                    RESULT = declaracionArreglo;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= asignacionChar error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected - (dash) at end of line."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= asignacionChar DASH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		ArrayList declaracionArreglo = new ArrayList();
                                    Nodo declaracion = new Nodo("declaracion","");
                                    ArrayList arregloNodos = (ArrayList) a;
                                    for(int i = 0; i < arregloNodos.size(); i++){
                                        Nodo temp = ((Nodo)arregloNodos.get(i));
                                        declaracion.addHijo(temp);
                                    }
                                    declaracionArreglo.add(declaracion);
                                    RESULT = declaracionArreglo;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= asignacionIntegerPtr error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected - (dash) at end of line." ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= asignacionIntegerPtr DASH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		ArrayList declaracionArreglo = new ArrayList();
                                    Nodo declaracion = new Nodo("declaracion","");
                                    ArrayList arregloNodos = (ArrayList) a;
                                    for(int i = 0; i < arregloNodos.size(); i++){
                                        Nodo temp = ((Nodo)arregloNodos.get(i));
                                        declaracion.addHijo(temp);
                                    }
                                    declaracionArreglo.add(declaracion);
                                    RESULT = declaracionArreglo;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= asignacionInteger error 
            {
              Object RESULT =null;
		 System.out.println("\u001B[31m" + "Expected - (dash) at end of line."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= asignacionInteger DASH 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 ArrayList declaracionArreglo = new ArrayList();
                                            Nodo declaracion = new Nodo("declaracion","");
                                            ArrayList arregloNodos = (ArrayList) a;
                                            for(int i = 0; i < arregloNodos.size(); i++){
                                                Nodo temp = ((Nodo)arregloNodos.get(i));
                                                declaracion.addHijo(temp);
                                            }
                                            declaracionArreglo.add(declaracion);
                                            RESULT = declaracionArreglo; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // linea ::= declaracion 
            {
              Object RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object declaracion = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = declaracion; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("linea",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // linea ::= dec_main 
            {
              Object RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = main; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("linea",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // linea ::= dec_function 
            {
              Object RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object funcion = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = funcion; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("linea",85, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= linea 
            {
              Object RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = line; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",86, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= programa linea 
            {
              Object RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object prog = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		if(prog != null){ 
                                            ArrayList arregloNodos = (ArrayList) prog;
                                            ArrayList arregloCommand = (ArrayList) line;
                                            Nodo programa = (Nodo)arregloCommand.get(0);
                                            arregloNodos.add( programa ); 
                                            RESULT = arregloNodos; 
                                        } else  if(line != null)
                                            RESULT = line; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",86, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= programa 
            {
              Object RESULT =null;
		int funcionesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int funcionesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object funciones = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 this.parser.raiz = new Nodo("Programa", "");
                        ArrayList arregloNodos = (ArrayList) funciones;
                        for(int i = 0; i < arregloNodos.size(); i++){
                        Nodo temp = ((Nodo)arregloNodos.get(i));
                            this.parser.raiz.addHijo(temp);
                        }  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

