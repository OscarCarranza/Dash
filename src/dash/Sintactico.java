
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package dash;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\002" +
    "\000\002\005\007\000\002\005\013\000\002\005\013\000" +
    "\002\005\007\000\002\005\017\000\002\005\017\000\002" +
    "\005\013\000\002\005\007\000\002\005\013\000\002\005" +
    "\013\000\002\006\005\000\002\006\007\000\002\007\003" +
    "\000\002\007\006\000\002\010\005\000\002\010\007\000" +
    "\002\011\003\000\002\011\006\000\002\012\003\000\002" +
    "\012\003\000\002\013\005\000\002\013\007\000\002\014" +
    "\003\000\002\014\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\016\005\013\006\010\007\011\010\004\011" +
    "\006\012\012\001\002\000\004\063\015\001\002\000\004" +
    "\002\000\001\002\000\004\063\015\001\002\000\004\002" +
    "\124\001\002\000\004\063\015\001\002\000\004\063\015" +
    "\001\002\000\004\063\015\001\002\000\004\063\015\001" +
    "\002\000\006\022\016\063\017\001\002\000\032\022\uffff" +
    "\027\uffff\047\uffff\050\uffff\056\uffff\057\uffff\060\uffff\061" +
    "\uffff\062\uffff\063\uffff\064\uffff\065\uffff\001\002\000\006" +
    "\056\ufffc\063\015\001\002\000\032\022\ufffe\027\ufffe\047" +
    "\ufffe\050\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe" +
    "\063\ufffe\064\ufffe\065\ufffe\001\002\000\004\056\030\001" +
    "\002\000\010\027\022\056\ufffd\063\017\001\002\000\004" +
    "\063\015\001\002\000\006\060\024\063\017\001\002\000" +
    "\006\056\ufffc\063\015\001\002\000\004\056\027\001\002" +
    "\000\020\050\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062" +
    "\ufffd\063\017\001\002\000\004\002\ufffa\001\002\000\004" +
    "\002\ufffb\001\002\000\006\022\032\063\017\001\002\000" +
    "\004\063\015\001\002\000\006\027\034\063\017\001\002" +
    "\000\004\063\015\001\002\000\006\047\036\063\017\001" +
    "\002\000\012\050\ufffc\061\ufffc\062\ufffc\063\015\001\002" +
    "\000\006\056\ufffc\063\015\001\002\000\004\056\041\001" +
    "\002\000\004\002\ufff2\001\002\000\010\050\047\061\045" +
    "\062\046\001\002\000\010\035\050\050\ufffc\063\015\001" +
    "\002\000\010\035\uffe5\050\uffe5\063\uffe5\001\002\000\012" +
    "\035\uffe9\050\uffe9\056\uffe9\063\uffe9\001\002\000\012\035" +
    "\uffe8\050\uffe8\056\uffe8\063\uffe8\001\002\000\006\056\uffe7" +
    "\063\uffe7\001\002\000\010\061\ufffc\062\ufffc\063\015\001" +
    "\002\000\004\050\052\001\002\000\006\056\uffe6\063\uffe6" +
    "\001\002\000\006\061\045\062\046\001\002\000\010\035" +
    "\uffe4\050\uffe4\063\uffe4\001\002\000\006\022\056\063\017" +
    "\001\002\000\006\056\ufffc\063\015\001\002\000\004\056" +
    "\101\001\002\000\010\027\061\056\ufffd\063\017\001\002" +
    "\000\004\063\015\001\002\000\010\063\017\064\063\065" +
    "\064\001\002\000\004\063\015\001\002\000\004\063\015" +
    "\001\002\000\006\057\066\063\017\001\002\000\004\063" +
    "\015\001\002\000\006\063\017\065\070\001\002\000\006" +
    "\056\ufffc\063\015\001\002\000\004\056\072\001\002\000" +
    "\004\002\ufff6\001\002\000\006\057\074\063\017\001\002" +
    "\000\004\063\015\001\002\000\006\063\017\064\076\001" +
    "\002\000\006\056\ufffc\063\015\001\002\000\004\056\100" +
    "\001\002\000\004\002\ufff7\001\002\000\004\002\ufff8\001" +
    "\002\000\006\022\103\063\017\001\002\000\004\063\015" +
    "\001\002\000\006\027\105\063\017\001\002\000\004\063" +
    "\015\001\002\000\006\047\107\063\017\001\002\000\010" +
    "\050\ufffc\060\ufffc\063\015\001\002\000\006\056\ufffc\063" +
    "\015\001\002\000\004\056\112\001\002\000\004\002\ufff9" +
    "\001\002\000\006\050\116\060\114\001\002\000\010\035" +
    "\uffef\050\uffef\063\uffef\001\002\000\010\035\117\050\ufffc" +
    "\063\015\001\002\000\006\056\ufff1\063\ufff1\001\002\000" +
    "\006\060\ufffc\063\015\001\002\000\004\050\121\001\002" +
    "\000\006\056\ufff0\063\ufff0\001\002\000\004\060\123\001" +
    "\002\000\010\035\uffee\050\uffee\063\uffee\001\002\000\004" +
    "\002\001\001\002\000\006\022\126\063\017\001\002\000" +
    "\006\056\ufffc\063\015\001\002\000\004\056\136\001\002" +
    "\000\010\027\131\056\ufffd\063\017\001\002\000\004\063" +
    "\015\001\002\000\010\061\045\062\046\063\017\001\002" +
    "\000\006\056\ufffc\063\015\001\002\000\004\056\135\001" +
    "\002\000\004\002\ufff3\001\002\000\004\002\ufff4\001\002" +
    "\000\006\022\140\063\017\001\002\000\004\063\015\001" +
    "\002\000\006\027\142\063\017\001\002\000\004\063\015" +
    "\001\002\000\006\047\144\063\017\001\002\000\010\050" +
    "\ufffc\057\ufffc\063\015\001\002\000\006\056\ufffc\063\015" +
    "\001\002\000\004\056\147\001\002\000\004\002\ufff5\001" +
    "\002\000\006\050\153\057\152\001\002\000\010\035\154" +
    "\050\ufffc\063\015\001\002\000\010\035\uffeb\050\uffeb\063" +
    "\uffeb\001\002\000\006\056\uffed\063\uffed\001\002\000\006" +
    "\057\ufffc\063\015\001\002\000\004\050\156\001\002\000" +
    "\006\056\uffec\063\uffec\001\002\000\004\057\160\001\002" +
    "\000\010\035\uffea\050\uffea\063\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\156\000\006\002\006\005\004\001\001\000\004\003" +
    "\136\001\001\000\002\001\001\000\004\003\124\001\001" +
    "\000\002\001\001\000\004\003\101\001\001\000\004\003" +
    "\054\001\001\000\004\003\030\001\001\000\004\003\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\020\004\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\022\001\001\000\002\001" +
    "\001\000\006\003\025\004\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\032\001\001\000\002\001\001" +
    "\000\004\003\034\001\001\000\004\013\036\001\001\000" +
    "\006\003\025\004\041\001\001\000\006\003\025\004\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\043\014\042\001\001\000\006\003\025\004\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\025\004\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\057\004\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\061\001\001\000\002\001\001\000\004\003\072\001\001" +
    "\000\004\003\064\001\001\000\002\001\001\000\004\003" +
    "\066\001\001\000\002\001\001\000\006\003\025\004\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\074\001\001\000\002\001\001\000\006" +
    "\003\025\004\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\103" +
    "\001\001\000\002\001\001\000\004\003\105\001\001\000" +
    "\004\006\107\001\001\000\006\003\025\004\112\001\001" +
    "\000\006\003\025\004\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\114\001\001\000\002\001\001" +
    "\000\006\003\025\004\117\001\001\000\002\001\001\000" +
    "\006\003\025\004\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\127\004\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\131\001" +
    "\001\000\004\012\132\001\001\000\006\003\025\004\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\140\001\001\000\002" +
    "\001\001\000\004\003\142\001\001\000\004\010\144\001" +
    "\001\000\006\003\025\004\147\001\001\000\006\003\025" +
    "\004\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\150\001\001\000\006\003\025\004\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\025\004" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<MyError> listaErrorSintacticos = new LinkedList<MyError>();

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
        MyError datos = new MyError(lexema, fila, columna, "Error Sintactico", "Caracter no esperado");
        listaErrorSintacticos.add(datos);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        MyError datos = new MyError(lexema, fila, columna, "Error Sintactico", "Simbolo no esperado, Panic Mode");
        listaErrorSintacticos.add(datos);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= declaracion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("INT="+a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // spaces ::= BLANK 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("spaces",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // spaces ::= spaces BLANK 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("spaces",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // spacesOpcional ::= spaces 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("spacesOpcional",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // spacesOpcional ::= 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("spacesOpcional",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= INT spaces ID spacesOpcional DASH 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println("INT="+a+" ID="+b+" DASH="+c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= INT spaces ID spaces ASSIGN spaces INTEGER spacesOpcional DASH 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("INT="+a+" ID="+b+" DASH="+c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= INTPTR spaces ID spaces ASSIGN spaces instanciacionIntPtr spacesOpcional DASH 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 System.out.println("INT="+a+" ID="+b+" DASH="+c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= CHAR spaces ID spacesOpcional DASH 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= CHAR spaces ID spaces ASSIGN spaces SIMCOM spaces LETTER spaces SIMCOM spacesOpcional DASH 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= CHAR spaces ID spaces ASSIGN spaces DOBCOM spaces LETTER spaces DOBCOM spacesOpcional DASH 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= CHARPTR spaces ID spaces ASSIGN spaces instanciacionCharPtr spacesOpcional DASH 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= BOOL spaces ID spacesOpcional DASH 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion ::= BOOL spaces ID spaces ASSIGN spaces bool spacesOpcional DASH 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion ::= BOOLPTR spaces ID spaces ASSIGN spaces instanciacionBoolPtr spacesOpcional DASH 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instanciacionIntPtr ::= LBRAC spacesOpcional RBRAC 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntPtr",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instanciacionIntPtr ::= LBRAC spacesOpcional integerLista spacesOpcional RBRAC 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntPtr",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // integerLista ::= INTEGER 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("integerLista",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // integerLista ::= integerLista COMMMA spacesOpcional INTEGER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("integerLista",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instanciacionCharPtr ::= LBRAC spacesOpcional RBRAC 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionCharPtr",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instanciacionCharPtr ::= LBRAC spacesOpcional charLista spacesOpcional RBRAC 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionCharPtr",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // charLista ::= LETTER 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charLista",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // charLista ::= charLista COMMMA spacesOpcional LETTER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charLista",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bool ::= TRUE 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bool",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bool ::= FALSE 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bool",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instanciacionBoolPtr ::= LBRAC spacesOpcional RBRAC 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBoolPtr",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instanciacionBoolPtr ::= LBRAC spacesOpcional boolLista spacesOpcional RBRAC 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBoolPtr",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // boolLista ::= bool 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("boolLista",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // boolLista ::= boolLista COMMMA spacesOpcional bool 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("boolLista",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
