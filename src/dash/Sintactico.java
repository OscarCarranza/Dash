
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 28 01:19:23 CST 2018
//----------------------------------------------------

package dash;

import java_cup.runtime.Symbol;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 28 01:19:23 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\243\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\122\003\000\002\122\003\000\002\122\003" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\004\005\000\002\004\004\000\002\005" +
    "\004\000\002\006\004\000\002\006\002\000\002\010\003" +
    "\000\002\010\005\000\002\031\005\000\002\031\004\000" +
    "\002\032\004\000\002\033\004\000\002\033\002\000\002" +
    "\007\004\000\002\007\005\000\002\012\005\000\002\012" +
    "\004\000\002\013\004\000\002\014\004\000\002\014\002" +
    "\000\002\015\005\000\002\015\005\000\002\016\003\000" +
    "\002\016\005\000\002\034\005\000\002\034\004\000\002" +
    "\035\004\000\002\036\004\000\002\036\002\000\002\011" +
    "\004\000\002\011\005\000\002\017\005\000\002\017\004" +
    "\000\002\020\004\000\002\021\004\000\002\021\002\000" +
    "\002\022\003\000\002\022\003\000\002\037\005\000\002" +
    "\037\004\000\002\023\004\000\002\041\004\000\002\041" +
    "\002\000\002\023\004\000\002\023\005\000\002\024\003" +
    "\000\002\024\005\000\002\025\005\000\002\025\004\000" +
    "\002\026\004\000\002\027\006\000\002\027\002\000\002" +
    "\030\004\000\002\030\003\000\002\045\005\000\002\045" +
    "\003\000\002\045\007\000\002\046\003\000\002\046\003" +
    "\000\002\047\004\000\002\047\005\000\002\047\003\000" +
    "\002\047\003\000\002\050\004\000\002\050\002\000\002" +
    "\051\003\000\002\051\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\053\012\000\002\054\005\000" +
    "\002\054\002\000\002\056\011\000\002\057\011\000\002" +
    "\060\013\000\002\061\016\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\063\005\000\002\063\004" +
    "\000\002\063\002\000\002\064\005\000\002\065\012\000" +
    "\002\066\003\000\002\066\002\000\002\067\004\000\002" +
    "\067\003\000\002\070\007\000\002\071\003\000\002\071" +
    "\005\000\002\072\003\000\002\072\002\000\002\073\006" +
    "\000\002\073\002\000\002\043\004\000\002\043\004\000" +
    "\002\043\004\000\002\043\004\000\002\043\004\000\002" +
    "\043\004\000\002\043\004\000\002\043\004\000\002\043" +
    "\004\000\002\043\004\000\002\043\004\000\002\043\002" +
    "\000\002\074\017\000\002\106\010\000\002\100\016\000" +
    "\002\075\006\000\002\075\004\000\002\120\004\000\002" +
    "\121\005\000\002\121\002\000\002\076\003\000\002\076" +
    "\003\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\076\003\000\002\077\003\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\107\006\000\002\101\003\000\002\101\005\000\002\101" +
    "\005\000\002\101\004\000\002\101\004\000\002\102\003" +
    "\000\002\102\005\000\002\102\005\000\002\103\003\000" +
    "\002\103\003\000\002\103\003\000\002\103\003\000\002" +
    "\103\005\000\002\110\007\000\002\111\007\000\002\112" +
    "\004\000\002\113\005\000\002\113\002\000\002\115\003" +
    "\000\002\115\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013b\000\024\005\005\006\017\007\007\010\011\011" +
    "\023\012\027\013\016\015\012\016\021\001\002\000\026" +
    "\002\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\015\ufffe\016\ufffe\001\002\000\004\033\u0138" +
    "\001\002\000\006\051\u0136\072\u0137\001\002\000\004\033" +
    "\075\001\002\000\006\051\u0132\072\u0133\001\002\000\004" +
    "\033\053\001\002\000\004\033\u0125\001\002\000\026\002" +
    "\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff" +
    "\013\uffff\015\uffff\016\uffff\001\002\000\006\051\u0122\072" +
    "\u0123\001\002\000\026\002\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\013\ufffc\015\ufffc\016\ufffc\001" +
    "\002\000\004\033\u0119\001\002\000\004\033\110\001\002" +
    "\000\006\051\u0115\072\u0116\001\002\000\004\033\124\001" +
    "\002\000\006\051\106\072\107\001\002\000\004\033\101" +
    "\001\002\000\006\051\072\072\073\001\002\000\006\051" +
    "\051\072\052\001\002\000\026\002\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\015\ufffd\016" +
    "\ufffd\001\002\000\006\033\033\063\034\001\002\000\026" +
    "\002\032\005\005\006\017\007\007\010\011\011\023\012" +
    "\027\013\016\015\012\016\021\001\002\000\026\002\000" +
    "\005\000\006\000\007\000\010\000\011\000\012\000\013" +
    "\000\015\000\016\000\001\002\000\004\002\001\001\002" +
    "\000\010\043\047\051\uffcb\072\uffcb\001\002\000\010\064" +
    "\041\075\040\076\042\001\002\000\006\051\uffce\072\uffce" +
    "\001\002\000\006\051\043\064\044\001\002\000\006\051" +
    "\uffc8\064\uffc8\001\002\000\010\051\uffd1\064\uffd1\072\uffd1" +
    "\001\002\000\006\051\uffca\072\uffca\001\002\000\010\051" +
    "\uffd0\064\uffd0\072\uffd0\001\002\000\006\075\040\076\042" +
    "\001\002\000\006\051\uffc9\072\uffc9\001\002\000\006\051" +
    "\uffc7\064\uffc7\001\002\000\006\051\uffcd\072\uffcd\001\002" +
    "\000\006\033\033\063\034\001\002\000\006\051\uffcc\072" +
    "\uffcc\001\002\000\004\033\053\001\002\000\060\002\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032" +
    "\ufff8\033\ufff8\066\ufff8\001\002\000\010\043\056\051\uffd9" +
    "\072\uffd9\001\002\000\006\051\uffdd\072\uffdd\001\002\000" +
    "\006\051\uffdb\072\uffdb\001\002\000\004\063\057\001\002" +
    "\000\010\064\062\077\061\100\064\001\002\000\006\051" +
    "\uffda\072\uffda\001\002\000\004\073\070\001\002\000\006" +
    "\051\uffd8\072\uffd8\001\002\000\004\064\067\001\002\000" +
    "\004\073\065\001\002\000\004\100\066\001\002\000\010" +
    "\051\uffe0\064\uffe0\072\uffe0\001\002\000\006\051\uffd7\072" +
    "\uffd7\001\002\000\004\077\071\001\002\000\010\051\uffe1" +
    "\064\uffe1\072\uffe1\001\002\000\004\033\075\001\002\000" +
    "\060\002\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\012\ufff9\013\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\066\ufff9\001\002\000\006\051" +
    "\uffe6\072\uffe6\001\002\000\010\043\077\051\uffe2\072\uffe2" +
    "\001\002\000\006\051\uffe4\072\uffe4\001\002\000\006\077" +
    "\061\100\064\001\002\000\006\051\uffe3\072\uffe3\001\002" +
    "\000\010\043\104\051\uffd2\072\uffd2\001\002\000\006\051" +
    "\uffd5\072\uffd5\001\002\000\006\051\uffd4\072\uffd4\001\002" +
    "\000\006\075\040\076\042\001\002\000\006\051\uffd3\072" +
    "\uffd3\001\002\000\004\033\110\001\002\000\060\002\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032" +
    "\ufffa\033\ufffa\066\ufffa\001\002\000\010\043\113\051\uffe9" +
    "\072\uffe9\001\002\000\006\051\uffed\072\uffed\001\002\000" +
    "\006\051\uffeb\072\uffeb\001\002\000\004\063\114\001\002" +
    "\000\006\064\120\074\116\001\002\000\006\051\uffea\072" +
    "\uffea\001\002\000\006\051\uffef\064\uffef\001\002\000\006" +
    "\051\121\064\122\001\002\000\006\051\uffe8\072\uffe8\001" +
    "\002\000\004\074\123\001\002\000\006\051\uffe7\072\uffe7" +
    "\001\002\000\006\051\uffee\064\uffee\001\002\000\004\014" +
    "\125\001\002\000\004\061\126\001\002\000\020\005\127" +
    "\006\132\007\137\010\135\011\130\012\136\013\133\001" +
    "\002\000\004\033\uff7e\001\002\000\004\033\uff7a\001\002" +
    "\000\004\033\u0114\001\002\000\004\033\uff7d\001\002\000" +
    "\004\033\uff78\001\002\000\006\051\140\062\141\001\002" +
    "\000\004\033\uff7b\001\002\000\004\033\uff79\001\002\000" +
    "\004\033\uff7c\001\002\000\020\005\127\006\132\007\137" +
    "\010\135\011\130\012\136\013\133\001\002\000\004\065" +
    "\142\001\002\000\044\005\uff87\006\uff87\007\uff87\010\uff87" +
    "\011\uff87\012\uff87\013\uff87\015\uff87\017\uff87\020\uff87\021" +
    "\uff87\022\uff87\024\uff87\025\uff87\026\uff87\027\uff87\033\uff87" +
    "\001\002\000\044\005\005\006\017\007\007\010\011\011" +
    "\023\012\027\013\016\015\012\017\152\020\144\021\164" +
    "\022\154\024\167\025\150\026\156\027\153\033\155\001" +
    "\002\000\004\061\u010e\001\002\000\054\005\uff88\006\uff88" +
    "\007\uff88\010\uff88\011\uff88\012\uff88\013\uff88\015\uff88\017" +
    "\uff88\020\uff88\021\uff88\022\uff88\024\uff88\025\uff88\026\uff88" +
    "\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88\066\uff88\001" +
    "\002\000\054\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b" +
    "\012\uff8b\013\uff8b\015\uff8b\017\uff8b\020\uff8b\021\uff8b\022" +
    "\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b" +
    "\032\uff8b\033\uff8b\066\uff8b\001\002\000\054\005\uff8a\006" +
    "\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013\uff8a\015\uff8a" +
    "\017\uff8a\020\uff8a\021\uff8a\022\uff8a\024\uff8a\025\uff8a\026" +
    "\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\066\uff8a" +
    "\001\002\000\004\061\u0108\001\002\000\054\005\uff89\006" +
    "\uff89\007\uff89\010\uff89\011\uff89\012\uff89\013\uff89\015\uff89" +
    "\017\uff89\020\uff89\021\uff89\022\uff89\024\uff89\025\uff89\026" +
    "\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89\066\uff89" +
    "\001\002\000\012\033\u0101\074\u0102\075\u0104\076\u0105\001" +
    "\002\000\004\061\351\001\002\000\004\061\331\001\002" +
    "\000\006\014\271\043\272\001\002\000\004\065\261\001" +
    "\002\000\054\005\uff92\006\uff92\007\uff92\010\uff92\011\uff92" +
    "\012\uff92\013\uff92\015\uff92\017\uff92\020\uff92\021\uff92\022" +
    "\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92" +
    "\032\uff92\033\uff92\066\uff92\001\002\000\054\005\uff8f\006" +
    "\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f\015\uff8f" +
    "\017\uff8f\020\uff8f\021\uff8f\022\uff8f\024\uff8f\025\uff8f\026" +
    "\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\066\uff8f" +
    "\001\002\000\054\005\uff91\006\uff91\007\uff91\010\uff91\011" +
    "\uff91\012\uff91\013\uff91\015\uff91\017\uff91\020\uff91\021\uff91" +
    "\022\uff91\024\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031" +
    "\uff91\032\uff91\033\uff91\066\uff91\001\002\000\054\005\uff90" +
    "\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90\015" +
    "\uff90\017\uff90\020\uff90\021\uff90\022\uff90\024\uff90\025\uff90" +
    "\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90\066" +
    "\uff90\001\002\000\054\005\uff8c\006\uff8c\007\uff8c\010\uff8c" +
    "\011\uff8c\012\uff8c\013\uff8c\015\uff8c\017\uff8c\020\uff8c\021" +
    "\uff8c\022\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c" +
    "\031\uff8c\032\uff8c\033\uff8c\066\uff8c\001\002\000\004\061" +
    "\246\001\002\000\054\005\uff8e\006\uff8e\007\uff8e\010\uff8e" +
    "\011\uff8e\012\uff8e\013\uff8e\015\uff8e\017\uff8e\020\uff8e\021" +
    "\uff8e\022\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e" +
    "\031\uff8e\032\uff8e\033\uff8e\066\uff8e\001\002\000\054\005" +
    "\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d" +
    "\015\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\024\uff8d\025" +
    "\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d" +
    "\066\uff8d\001\002\000\004\061\170\001\002\000\010\005" +
    "\172\051\uffa0\067\uffa0\001\002\000\006\051\177\067\200" +
    "\001\002\000\004\033\173\001\002\000\004\043\175\001" +
    "\002\000\006\051\uffa1\067\uffa1\001\002\000\004\074\176" +
    "\001\002\000\006\051\uff9f\067\uff9f\001\002\000\004\033" +
    "\173\001\002\000\012\033\202\074\201\075\204\076\205" +
    "\001\002\000\016\050\230\054\237\055\236\056\235\057" +
    "\234\060\232\001\002\000\026\050\230\052\uffb5\053\uffb5" +
    "\054\237\055\236\056\235\057\234\060\232\062\uffb5\067" +
    "\uffb5\001\002\000\012\052\uffbe\053\uffbe\062\uffbe\067\uffbe" +
    "\001\002\000\012\052\uffb8\053\uffb8\062\uffb8\067\uffb8\001" +
    "\002\000\012\052\uffb7\053\uffb7\062\uffb7\067\uffb7\001\002" +
    "\000\010\052\212\053\210\067\211\001\002\000\014\033" +
    "\202\061\225\074\201\075\204\076\205\001\002\000\014" +
    "\033\uffbb\061\uffbb\074\uffbb\075\uffbb\076\uffbb\001\002\000" +
    "\004\033\213\001\002\000\014\033\uffbc\061\uffbc\074\uffbc" +
    "\075\uffbc\076\uffbc\001\002\000\010\034\215\035\216\036" +
    "\214\001\002\000\004\062\uffa3\001\002\000\004\062\uffa5" +
    "\001\002\000\004\062\uffa4\001\002\000\004\062\220\001" +
    "\002\000\004\065\221\001\002\000\044\005\uff87\006\uff87" +
    "\007\uff87\010\uff87\011\uff87\012\uff87\013\uff87\015\uff87\020" +
    "\uff87\021\uff87\022\uff87\024\uff87\025\uff87\026\uff87\027\uff87" +
    "\033\uff87\066\uff87\001\002\000\044\005\005\006\017\007" +
    "\007\010\011\011\023\012\027\013\016\015\012\020\144" +
    "\021\164\022\154\024\167\025\150\026\156\027\153\033" +
    "\155\066\223\001\002\000\054\005\uffa6\006\uffa6\007\uffa6" +
    "\010\uffa6\011\uffa6\012\uffa6\013\uffa6\015\uffa6\017\uffa6\020" +
    "\uffa6\021\uffa6\022\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6" +
    "\030\uffa6\031\uffa6\032\uffa6\033\uffa6\066\uffa6\001\002\000" +
    "\012\052\uffbf\053\uffbf\062\uffbf\067\uffbf\001\002\000\012" +
    "\033\202\074\201\075\204\076\205\001\002\000\004\062" +
    "\227\001\002\000\012\052\uffbd\053\uffbd\062\uffbd\067\uffbd" +
    "\001\002\000\006\033\uffb2\074\uffb2\001\002\000\006\033" +
    "\240\074\241\001\002\000\006\033\uffad\074\uffad\001\002" +
    "\000\012\052\uffba\053\uffba\062\uffba\067\uffba\001\002\000" +
    "\006\033\uffae\074\uffae\001\002\000\006\033\uffaf\074\uffaf" +
    "\001\002\000\006\033\uffb0\074\uffb0\001\002\000\006\033" +
    "\uffb1\074\uffb1\001\002\000\012\052\uffb4\053\uffb4\062\uffb4" +
    "\067\uffb4\001\002\000\012\052\uffb3\053\uffb3\062\uffb3\067" +
    "\uffb3\001\002\000\012\052\uffb6\053\uffb6\062\uffb6\067\uffb6" +
    "\001\002\000\006\033\240\074\241\001\002\000\012\052" +
    "\uffb9\053\uffb9\062\uffb9\067\uffb9\001\002\000\006\051\uffa2" +
    "\067\uffa2\001\002\000\006\033\247\102\250\001\002\000" +
    "\006\041\uff60\062\uff60\001\002\000\006\041\uff5f\062\uff5f" +
    "\001\002\000\004\062\257\001\002\000\006\041\253\062" +
    "\uff61\001\002\000\006\033\247\102\250\001\002\000\004" +
    "\062\uff63\001\002\000\006\041\253\062\uff61\001\002\000" +
    "\004\062\uff62\001\002\000\004\072\260\001\002\000\054" +
    "\005\uff64\006\uff64\007\uff64\010\uff64\011\uff64\012\uff64\013" +
    "\uff64\015\uff64\017\uff64\020\uff64\021\uff64\022\uff64\024\uff64" +
    "\025\uff64\026\uff64\027\uff64\030\uff64\031\uff64\032\uff64\033" +
    "\uff64\066\uff64\001\002\000\044\005\uff87\006\uff87\007\uff87" +
    "\010\uff87\011\uff87\012\uff87\013\uff87\015\uff87\020\uff87\021" +
    "\uff87\022\uff87\024\uff87\025\uff87\026\uff87\027\uff87\033\uff87" +
    "\066\uff87\001\002\000\044\005\005\006\017\007\007\010" +
    "\011\011\023\012\027\013\016\015\012\020\144\021\164" +
    "\022\154\024\167\025\150\026\156\027\153\033\155\066" +
    "\263\001\002\000\004\025\264\001\002\000\004\061\265" +
    "\001\002\000\012\033\202\074\201\075\204\076\205\001" +
    "\002\000\010\052\212\053\210\062\267\001\002\000\004" +
    "\072\270\001\002\000\054\005\uffa7\006\uffa7\007\uffa7\010" +
    "\uffa7\011\uffa7\012\uffa7\013\uffa7\015\uffa7\017\uffa7\020\uffa7" +
    "\021\uffa7\022\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030" +
    "\uffa7\031\uffa7\032\uffa7\033\uffa7\066\uffa7\001\002\000\004" +
    "\061\322\001\002\000\020\033\301\041\304\042\274\061" +
    "\277\074\273\075\276\076\300\001\002\000\016\037\uff6a" +
    "\040\uff6a\041\uff6a\042\uff6a\062\uff6a\072\uff6a\001\002\000" +
    "\014\033\301\061\277\074\273\075\276\076\300\001\002" +
    "\000\016\037\306\040\307\041\uff72\042\uff72\062\uff72\072" +
    "\uff72\001\002\000\016\037\uff68\040\uff68\041\uff68\042\uff68" +
    "\062\uff68\072\uff68\001\002\000\020\033\301\041\304\042" +
    "\274\061\277\074\273\075\276\076\300\001\002\000\016" +
    "\037\uff67\040\uff67\041\uff67\042\uff67\062\uff67\072\uff67\001" +
    "\002\000\016\037\uff69\040\uff69\041\uff69\042\uff69\062\uff69" +
    "\072\uff69\001\002\000\016\037\uff6d\040\uff6d\041\uff6d\042" +
    "\uff6d\062\uff6d\072\uff6d\001\002\000\010\041\312\042\313" +
    "\072\314\001\002\000\014\033\301\061\277\074\273\075" +
    "\276\076\300\001\002\000\016\037\306\040\307\041\uff6f" +
    "\042\uff6f\062\uff6f\072\uff6f\001\002\000\014\033\301\061" +
    "\277\074\273\075\276\076\300\001\002\000\014\033\301" +
    "\061\277\074\273\075\276\076\300\001\002\000\016\037" +
    "\uff6b\040\uff6b\041\uff6b\042\uff6b\062\uff6b\072\uff6b\001\002" +
    "\000\016\037\uff6c\040\uff6c\041\uff6c\042\uff6c\062\uff6c\072" +
    "\uff6c\001\002\000\014\033\301\061\277\074\273\075\276" +
    "\076\300\001\002\000\014\033\301\061\277\074\273\075" +
    "\276\076\300\001\002\000\054\005\uff73\006\uff73\007\uff73" +
    "\010\uff73\011\uff73\012\uff73\013\uff73\015\uff73\017\uff73\020" +
    "\uff73\021\uff73\022\uff73\024\uff73\025\uff73\026\uff73\027\uff73" +
    "\030\uff73\031\uff73\032\uff73\033\uff73\066\uff73\001\002\000" +
    "\016\037\306\040\307\041\uff70\042\uff70\062\uff70\072\uff70" +
    "\001\002\000\016\037\306\040\307\041\uff71\042\uff71\062" +
    "\uff71\072\uff71\001\002\000\010\041\312\042\313\062\320" +
    "\001\002\000\016\037\uff66\040\uff66\041\uff66\042\uff66\062" +
    "\uff66\072\uff66\001\002\000\016\037\306\040\307\041\uff6e" +
    "\042\uff6e\062\uff6e\072\uff6e\001\002\000\004\033\uff7f\001" +
    "\002\000\004\062\327\001\002\000\004\033\325\001\002" +
    "\000\006\051\326\062\uff81\001\002\000\004\033\uff80\001" +
    "\002\000\004\072\330\001\002\000\054\005\uff85\006\uff85" +
    "\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85\015\uff85\017" +
    "\uff85\020\uff85\021\uff85\022\uff85\024\uff85\025\uff85\026\uff85" +
    "\027\uff85\030\uff85\031\uff85\032\uff85\033\uff85\066\uff85\001" +
    "\002\000\012\033\202\074\201\075\204\076\205\001\002" +
    "\000\010\052\212\053\210\062\333\001\002\000\004\065" +
    "\334\001\002\000\044\005\uff87\006\uff87\007\uff87\010\uff87" +
    "\011\uff87\012\uff87\013\uff87\015\uff87\020\uff87\021\uff87\022" +
    "\uff87\024\uff87\025\uff87\026\uff87\027\uff87\033\uff87\066\uff87" +
    "\001\002\000\044\005\005\006\017\007\007\010\011\011" +
    "\023\012\027\013\016\015\012\020\144\021\164\022\154" +
    "\024\167\025\150\026\156\027\153\033\155\066\336\001" +
    "\002\000\056\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa" +
    "\012\uffaa\013\uffaa\015\uffaa\017\uffaa\020\uffaa\021\uffaa\022" +
    "\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa" +
    "\031\uffaa\032\uffaa\033\uffaa\066\uffaa\001\002\000\056\005" +
    "\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac" +
    "\015\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\340\024" +
    "\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac" +
    "\033\uffac\066\uffac\001\002\000\004\022\342\001\002\000" +
    "\056\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab" +
    "\013\uffab\015\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023" +
    "\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab" +
    "\032\uffab\033\uffab\066\uffab\001\002\000\004\061\343\001" +
    "\002\000\012\033\202\074\201\075\204\076\205\001\002" +
    "\000\010\052\212\053\210\062\345\001\002\000\004\065" +
    "\346\001\002\000\044\005\uff87\006\uff87\007\uff87\010\uff87" +
    "\011\uff87\012\uff87\013\uff87\015\uff87\020\uff87\021\uff87\022" +
    "\uff87\024\uff87\025\uff87\026\uff87\027\uff87\033\uff87\066\uff87" +
    "\001\002\000\044\005\005\006\017\007\007\010\011\011" +
    "\023\012\027\013\016\015\012\020\144\021\164\022\154" +
    "\024\167\025\150\026\156\027\153\033\155\066\350\001" +
    "\002\000\056\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9" +
    "\012\uffa9\013\uffa9\015\uffa9\017\uffa9\020\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\033\uffa9\066\uffa9\001\002\000\004\033" +
    "\352\001\002\000\004\062\353\001\002\000\004\065\354" +
    "\001\002\000\010\030\360\031\uff9c\066\uff9c\001\002\000" +
    "\006\031\373\066\uff93\001\002\000\010\030\360\031\uff9d" +
    "\066\uff9d\001\002\000\010\030\uff9a\031\uff9a\066\uff9a\001" +
    "\002\000\006\074\361\077\363\001\002\000\004\070\uff98" +
    "\001\002\000\004\070\366\001\002\000\004\073\364\001" +
    "\002\000\004\077\365\001\002\000\004\070\uff97\001\002" +
    "\000\052\005\uff87\006\uff87\007\uff87\010\uff87\011\uff87\012" +
    "\uff87\013\uff87\015\uff87\020\uff87\021\uff87\022\uff87\024\uff87" +
    "\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033" +
    "\uff87\066\uff87\001\002\000\052\005\005\006\017\007\007" +
    "\010\011\011\023\012\027\013\016\015\012\020\144\021" +
    "\164\022\154\024\167\025\150\026\156\027\153\030\uff95" +
    "\031\uff95\032\371\033\155\066\uff95\001\002\000\010\030" +
    "\uff99\031\uff99\066\uff99\001\002\000\010\030\uff96\031\uff96" +
    "\066\uff96\001\002\000\010\030\uff9b\031\uff9b\066\uff9b\001" +
    "\002\000\004\070\376\001\002\000\004\066\375\001\002" +
    "\000\054\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012" +
    "\uff9e\013\uff9e\015\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e" +
    "\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032" +
    "\uff9e\033\uff9e\066\uff9e\001\002\000\046\005\uff87\006\uff87" +
    "\007\uff87\010\uff87\011\uff87\012\uff87\013\uff87\015\uff87\020" +
    "\uff87\021\uff87\022\uff87\024\uff87\025\uff87\026\uff87\027\uff87" +
    "\032\uff87\033\uff87\066\uff87\001\002\000\046\005\005\006" +
    "\017\007\007\010\011\011\023\012\027\013\016\015\012" +
    "\020\144\021\164\022\154\024\167\025\150\026\156\027" +
    "\153\032\371\033\155\066\uff95\001\002\000\004\066\uff94" +
    "\001\002\000\004\072\uff77\001\002\000\004\072\uff74\001" +
    "\002\000\004\072\u0106\001\002\000\004\072\uff76\001\002" +
    "\000\004\072\uff75\001\002\000\004\066\u0107\001\002\000" +
    "\026\002\uff84\005\uff84\006\uff84\007\uff84\010\uff84\011\uff84" +
    "\012\uff84\013\uff84\015\uff84\016\uff84\001\002\000\012\033" +
    "\202\074\201\075\204\076\205\001\002\000\010\052\212" +
    "\053\210\062\u010a\001\002\000\004\065\u010b\001\002\000" +
    "\044\005\uff87\006\uff87\007\uff87\010\uff87\011\uff87\012\uff87" +
    "\013\uff87\015\uff87\020\uff87\021\uff87\022\uff87\024\uff87\025" +
    "\uff87\026\uff87\027\uff87\033\uff87\066\uff87\001\002\000\044" +
    "\005\005\006\017\007\007\010\011\011\023\012\027\013" +
    "\016\015\012\020\144\021\164\022\154\024\167\025\150" +
    "\026\156\027\153\033\155\066\u010d\001\002\000\054\005" +
    "\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8" +
    "\015\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\024\uffa8\025" +
    "\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8" +
    "\066\uffa8\001\002\000\004\033\u010f\001\002\000\004\062" +
    "\u0110\001\002\000\004\072\u0111\001\002\000\054\005\uff65" +
    "\006\uff65\007\uff65\010\uff65\011\uff65\012\uff65\013\uff65\015" +
    "\uff65\017\uff65\020\uff65\021\uff65\022\uff65\024\uff65\025\uff65" +
    "\026\uff65\027\uff65\030\uff65\031\uff65\032\uff65\033\uff65\066" +
    "\uff65\001\002\000\004\033\u0113\001\002\000\006\051\uff83" +
    "\062\uff83\001\002\000\006\051\uff82\062\uff82\001\002\000" +
    "\006\033\033\063\034\001\002\000\060\002\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\024\ufff6" +
    "\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033" +
    "\ufff6\066\ufff6\001\002\000\006\051\uffcf\072\uffcf\001\002" +
    "\000\006\051\uffec\072\uffec\001\002\000\010\043\u011c\051" +
    "\uffc2\072\uffc2\001\002\000\006\051\uffc5\072\uffc5\001\002" +
    "\000\006\051\uffc4\072\uffc4\001\002\000\004\100\u011d\001" +
    "\002\000\004\033\u011e\001\002\000\006\033\uffc0\100\uffc0" +
    "\001\002\000\006\033\u0120\100\u0121\001\002\000\006\033" +
    "\uffc1\100\uffc1\001\002\000\006\051\uffc3\072\uffc3\001\002" +
    "\000\004\033\101\001\002\000\060\002\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\066\ufff7\001\002\000\006\051\uffd6\072\uffd6\001\002\000" +
    "\004\014\u0126\001\002\000\004\061\u0127\001\002\000\020" +
    "\005\127\006\132\007\137\010\135\011\130\012\136\013" +
    "\133\001\002\000\006\051\140\062\u0129\001\002\000\004" +
    "\065\u012a\001\002\000\044\005\uff87\006\uff87\007\uff87\010" +
    "\uff87\011\uff87\012\uff87\013\uff87\015\uff87\017\uff87\020\uff87" +
    "\021\uff87\022\uff87\024\uff87\025\uff87\026\uff87\027\uff87\033" +
    "\uff87\001\002\000\044\005\005\006\017\007\007\010\011" +
    "\011\023\012\027\013\016\015\012\017\u012c\020\144\021" +
    "\164\022\154\024\167\025\150\026\156\027\153\033\155" +
    "\001\002\000\012\033\u0101\074\u0102\075\u0104\076\u0105\001" +
    "\002\000\004\072\u012e\001\002\000\004\066\u012f\001\002" +
    "\000\004\072\u0130\001\002\000\060\002\uff86\005\uff86\006" +
    "\uff86\007\uff86\010\uff86\011\uff86\012\uff86\013\uff86\015\uff86" +
    "\016\uff86\017\uff86\020\uff86\021\uff86\022\uff86\024\uff86\025" +
    "\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86" +
    "\066\uff86\001\002\000\006\051\uffdc\072\uffdc\001\002\000" +
    "\004\033\u0119\001\002\000\060\002\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\066" +
    "\ufff5\001\002\000\006\051\uffc6\072\uffc6\001\002\000\006" +
    "\051\uffe5\072\uffe5\001\002\000\004\033\u0138\001\002\000" +
    "\060\002\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb" +
    "\012\ufffb\013\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021" +
    "\ufffb\022\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb" +
    "\031\ufffb\032\ufffb\033\ufffb\066\ufffb\001\002\000\010\043" +
    "\u013b\051\ufff0\072\ufff0\001\002\000\006\051\ufff4\072\ufff4" +
    "\001\002\000\006\051\ufff2\072\ufff2\001\002\000\004\074" +
    "\u013c\001\002\000\006\051\ufff1\072\ufff1\001\002\000\006" +
    "\051\ufff3\072\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013b\000\032\002\027\003\014\004\005\012\023\017" +
    "\013\025\007\031\021\034\024\037\017\074\003\100\025" +
    "\122\012\001\001\000\002\001\001\000\004\005\u013c\001" +
    "\001\000\002\001\001\000\004\013\u0134\001\001\000\002" +
    "\001\001\000\004\035\u0130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\u0119\001\001\000\004\032\u0117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\034\001\001\000\030\003\014\004\005" +
    "\012\023\017\013\025\007\031\021\034\024\037\017\074" +
    "\003\100\025\122\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\045\001\001\000\006\022\036\024" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\047\001\001\000" +
    "\002\001\001\000\004\035\053\001\001\000\002\001\001" +
    "\000\004\036\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\057\001\001\000\004\015\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\075\001\001\000\002\001\001\000" +
    "\004\015\077\001\001\000\002\001\001\000\004\021\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\104\001\001\000\002\001\001\000\004\032\110\001\001" +
    "\000\002\001\001\000\004\033\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\114\001\001\000\004" +
    "\010\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\075\133\076\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\076\u0111\001\001\000" +
    "\002\001\001\000\004\043\142\001\001\000\046\003\156" +
    "\004\005\012\023\017\013\025\007\031\021\034\024\037" +
    "\017\053\160\057\161\060\157\061\164\065\165\074\144" +
    "\106\150\107\162\110\145\111\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\077\u0102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\170\001\001\000\002\001\001\000\004" +
    "\064\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\064\244\001\001" +
    "\000\006\045\205\047\202\001\001\000\004\052\242\001" +
    "\001\000\006\050\232\052\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\206\001" +
    "\001\000\004\047\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\221\001\001\000" +
    "\046\003\156\004\005\012\023\017\013\025\007\031\021" +
    "\034\024\037\017\053\160\057\161\060\157\061\164\065" +
    "\165\074\144\106\150\107\162\110\145\111\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\243\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\112\250\115\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\113\253\001\001\000\004\115\254\001\001\000\002\001" +
    "\001\000\004\113\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\261\001\001\000" +
    "\046\003\156\004\005\012\023\017\013\025\007\031\021" +
    "\034\024\037\017\053\160\057\161\060\157\061\164\065" +
    "\165\074\144\106\150\107\162\110\145\111\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\045\265\047" +
    "\202\001\001\000\004\046\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\101\302\102" +
    "\274\103\301\001\001\000\002\001\001\000\006\102\320" +
    "\103\301\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\101\316\102\274\103\301\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\102\304\103\301\001\001\000\002\001\001\000\004" +
    "\103\310\001\001\000\004\103\307\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\102\315\103\301\001\001" +
    "\000\006\102\314\103\301\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\120\322\121\323\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\045\331\047\202\001\001\000\004\046\206\001\001" +
    "\000\002\001\001\000\004\043\334\001\001\000\046\003" +
    "\156\004\005\012\023\017\013\025\007\031\021\034\024" +
    "\037\017\053\160\057\161\060\157\061\164\065\165\074" +
    "\144\106\150\107\162\110\145\111\146\001\001\000\004" +
    "\054\336\001\001\000\002\001\001\000\004\056\340\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\045\343" +
    "\047\202\001\001\000\004\046\206\001\001\000\002\001" +
    "\001\000\004\043\346\001\001\000\046\003\156\004\005" +
    "\012\023\017\013\025\007\031\021\034\024\037\017\053" +
    "\160\057\161\060\157\061\164\065\165\074\144\106\150" +
    "\107\162\110\145\111\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\066\354\067\355\070\356\001\001\000\004\073\373\001" +
    "\001\000\004\070\371\001\001\000\002\001\001\000\004" +
    "\071\361\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\366\001\001\000\050\003\156\004\005\012\023\017" +
    "\013\025\007\031\021\034\024\037\017\053\160\057\161" +
    "\060\157\061\164\065\165\072\367\074\144\106\150\107" +
    "\162\110\145\111\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\376\001\001\000\050" +
    "\003\156\004\005\012\023\017\013\025\007\031\021\034" +
    "\024\037\017\053\160\057\161\060\157\061\164\065\165" +
    "\072\377\074\144\106\150\107\162\110\145\111\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\045\u0108\047\202" +
    "\001\001\000\004\046\206\001\001\000\002\001\001\000" +
    "\004\043\u010b\001\001\000\046\003\156\004\005\012\023" +
    "\017\013\025\007\031\021\034\024\037\017\053\160\057" +
    "\161\060\157\061\164\065\165\074\144\106\150\107\162" +
    "\110\145\111\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u0116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\u011a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\u011e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u0123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\075\u0127\076\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\u012a\001\001\000\046\003" +
    "\156\004\005\012\023\017\013\025\007\031\021\034\024" +
    "\037\017\053\160\057\161\060\157\061\164\065\165\074" +
    "\144\106\150\107\162\110\145\111\146\001\001\000\004" +
    "\077\u012c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\u0133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\u0138\001\001\000\002\001\001" +
    "\000\004\006\u0139\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<MyError> listaErrorSintacticos = new LinkedList<MyError>();

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
        MyError datos = new MyError(lexema, fila, columna, "Error Sintactico", "Caracter no esperado");
        listaErrorSintacticos.add(datos);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        MyError datos = new MyError(lexema, fila, columna, "Error Sintactico", "Simbolo no esperado, Panic Mode");
        listaErrorSintacticos.add(datos);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // id_text ::= TEXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("id_text",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // id_text ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("id_text",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // more_content ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("more_content",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // more_content ::= ADD_OP id_text more_content 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("more_content",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // content_print ::= id_text more_content 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("content_print",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // salida ::= PRINT LPAR content_print RPAR DASH 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("salida",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // entry ::= READ LPAR ID RPAR DASH 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entry",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // factor ::= LPAR arithmetic_exp RPAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // factor ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // factor ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // factor ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // factor ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // term ::= term DIV_OP factor 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int divleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int divright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int factleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("term",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // term ::= term MULT_OP factor 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int timleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int timright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tim = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int factleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("term",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // term ::= factor 
            {
              Object RESULT =null;
		int factleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("term",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // arithmetic_exp ::= MINUS_OP term 
            {
              Object RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_exp",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // arithmetic_exp ::= ADD_OP term 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_exp",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // arithmetic_exp ::= arithmetic_exp MINUS_OP term 
            {
              Object RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object se1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int minleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_exp",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // arithmetic_exp ::= arithmetic_exp ADD_OP term 
            {
              Object RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object se1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_exp",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // arithmetic_exp ::= term 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_exp",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // assign_var ::= ID ASSIGN arithmetic_exp DASH 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("assign_var",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // varRet ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varRet",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // varRet ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varRet",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // varRet ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varRet",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // varRet ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varRet",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // params_type ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // params_type ::= BOOLPTR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // params_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // params_type ::= CHARPTR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // params_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // params_type ::= INTPTR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // params_type ::= INT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // moreIds ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("moreIds",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // moreIds ::= moreIds ID COMMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("moreIds",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ids ::= moreIds ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ids",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // parameters ::= params_type ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parameters",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // parameters ::= parameters COMMA params_type ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parameters",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // dec_main ::= MAIN ID ARROW LPAR parameters RPAR LKEY body RETURN varRet DASH RKEY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_main",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // func ::= ID ARROW LPAR ids RPAR DASH 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("func",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // dec_function ::= FUNCTION ID ARROW LPAR parameters RPAR LKEY body RETURN varRet DASH RKEY DASH 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_function",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // body ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // body ::= body dec_function 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // body ::= body func 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // body ::= body salida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // body ::= body entry 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // body ::= body assign_var 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // body ::= body switch 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // body ::= body for 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // body ::= body doWhile 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // body ::= body while 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // body ::= body if 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // body ::= body declaracion 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // default ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("default",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // default ::= DEFAULT COLON body caseBreak 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("default",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // caseBreak ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caseBreak",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // caseBreak ::= BREAK 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caseBreak",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // varCase ::= SIMCOM LETTER SIMCOM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varCase",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // varCase ::= INTEGER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varCase",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // declaracionCase ::= CASE varCase COLON body caseBreak 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionCase",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // case ::= declaracionCase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("case",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // case ::= case declaracionCase 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("case",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // caseExist ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caseExist",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // caseExist ::= case 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caseExist",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // switch ::= SWITCH LPAR ID RPAR LKEY caseExist default RKEY 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("switch",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // instanciacionIntegerFor ::= ID ASSIGN INTEGER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntegerFor",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // declaracionFor ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionFor",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // declaracionFor ::= INT instanciacionIntegerFor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionFor",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // declaracionFor ::= declaracionFor COMMA instanciacionIntegerFor 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionFor",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // autoAssign ::= MULTFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("autoAssign",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // autoAssign ::= MINUSFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("autoAssign",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // autoAssign ::= ADDFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("autoAssign",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // for ::= FOR LPAR declaracionFor SEMICOLON conditionalExpr SEMICOLON ID autoAssign RPAR LKEY body RKEY 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // doWhile ::= DO LKEY body RKEY WHILE LPAR conditionalExpr RPAR DASH 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("doWhile",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // while ::= WHILE LPAR conditionalExpr RPAR LKEY body RKEY 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("while",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ifSinElse ::= IF LPAR conditionalExpr RPAR LKEY body RKEY 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSinElse",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // else ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // else ::= else ELSE ifSinElse 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // if ::= IF LPAR conditionalExpr RPAR LKEY body RKEY else 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comparator ::= NOTEQUAL_OP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comparator ::= GREATEREQUAL_OP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comparator ::= LESSEQUAL_OP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comparator ::= GREATERTHAN_OP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // comparator ::= LESSTHAN_OP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // comparator ::= EQUAL_OP 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // logicalExprID ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExprID",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // logicalExprID ::= ID 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExprID",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // logicalExprComp ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExprComp",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // logicalExprComp ::= comparator logicalExprID 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExprComp",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // logicalExpr ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExpr",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // logicalExpr ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExpr",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // logicalExpr ::= INTEGER comparator logicalExprID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExpr",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // logicalExpr ::= ID logicalExprComp 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExpr",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // andORor ::= OR_OP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("andORor",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // andORor ::= AND_OP 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("andORor",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // conditionalExpr ::= conditionalExpr andORor LPAR logicalExpr RPAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("conditionalExpr",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // conditionalExpr ::= logicalExpr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("conditionalExpr",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // conditionalExpr ::= conditionalExpr andORor logicalExpr 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("conditionalExpr",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // contenidoString ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidoString",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // contenidoString ::= contenidoString ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidoString",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // iniciacionString ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionString",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // iniciacionString ::= ASSIGN DOBCOM contenidoString DOBCOM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionString",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instanciacionString ::= ID iniciacionString 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionString",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asignacionString ::= STRING instanciacionString 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionString",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asignacionString ::= asignacionString COMMA instanciacionString 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionString",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // boolLista ::= boolLista COMMA bool 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("boolLista",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // boolLista ::= bool 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("boolLista",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instanciacionBoolPtr ::= LBRAC boolLista RBRAC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBoolPtr",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instanciacionBoolPtr ::= LBRAC RBRAC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBoolPtr",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // iniciacionBoolPtr ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionBoolPtr",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // iniciacionBoolPtr ::= ASSIGN instanciacionBoolPtr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionBoolPtr",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instanciacionBoolPtr ::= ID iniciacionBoolPtr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBoolPtr",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacionBoolPtr ::= BOOLPTR instanciacionBoolPtr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionBoolPtr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asignacionBoolPtr ::= asignacionBoolPtr COMMA instanciacionBoolPtr 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionBoolPtr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bool ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bool",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bool ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bool",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // iniciacionBool ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionBool",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // iniciacionBool ::= ASSIGN bool 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionBool",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instanciacionBool ::= ID iniciacionBool 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBool",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignacionBool ::= BOOL instanciacionBool 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionBool",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignacionBool ::= asignacionBool COMMA instanciacionBool 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionBool",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instanciacionCharPtr ::= LBRAC charComillas RBRAC 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionCharPtr",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instanciacionCharPtr ::= LBRAC RBRAC 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionCharPtr",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // iniciacionCharPtr ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionCharPtr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // iniciacionCharPtr ::= ASSIGN instanciacionCharPtr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionCharPtr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instanciacionCharPointer ::= ID iniciacionCharPtr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionCharPointer",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // asignacionCharPtr ::= CHARPTR instanciacionCharPointer 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionCharPtr",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignacionCharPtr ::= asignacionCharPtr COMMA instanciacionCharPointer 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionCharPtr",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // charLista ::= charLista COMMA LETTER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charLista",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // charLista ::= LETTER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charLista",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // charComillas ::= DOBCOM LETTER DOBCOM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // charComillas ::= SIMCOM LETTER SIMCOM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // iniciacionChar ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionChar",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // iniciacionChar ::= ASSIGN charComillas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionChar",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instanciacionChar ::= ID iniciacionChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionChar",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // asignacionChar ::= CHAR instanciacionChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionChar",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asignacionChar ::= asignacionChar COMMA instanciacionChar 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionChar",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instanciacionIntPtr ::= LBRAC integerLista RBRAC 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntPtr",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instanciacionIntPtr ::= LBRAC RBRAC 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntPtr",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // iniciacionIntegerPtr ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionIntegerPtr",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // iniciacionIntegerPtr ::= ASSIGN instanciacionIntPtr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionIntegerPtr",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instanciacionIntegerPtr ::= ID iniciacionIntegerPtr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntegerPtr",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // asignacionIntegerPtr ::= INTPTR instanciacionIntegerPtr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionIntegerPtr",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // asignacionIntegerPtr ::= asignacionIntegerPtr COMMA instanciacionIntegerPtr 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionIntegerPtr",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // integerLista ::= integerLista COMMA INTEGER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("integerLista",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // integerLista ::= INTEGER 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("integerLista",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // iniciacionInteger ::= 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionInteger",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // iniciacionInteger ::= ASSIGN INTEGER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionInteger",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instanciacionInteger ::= ID iniciacionInteger 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionInteger",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // asignacionInteger ::= INT instanciacionInteger 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionInteger",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // asignacionInteger ::= asignacionInteger COMMA instanciacionInteger 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionInteger",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= asignacionString DASH 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= asignacionBoolPtr DASH 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= asignacionBool DASH 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= asignacionCharPtr DASH 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= asignacionChar DASH 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= asignacionIntegerPtr DASH 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= asignacionInteger DASH 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // linea ::= declaracion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("linea",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // linea ::= dec_main 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("linea",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // linea ::= dec_function 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("linea",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= linea 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INICIO linea 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

