
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package dash;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Nodos.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\336\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\122\003\000\002\122\003\000\002\122\003" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\004\005\000\002\004\004\000" +
    "\002\005\004\000\002\005\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\002\000\002\010\003\000\002\010" +
    "\005\000\002\010\005\000\002\010\003\000\002\031\005" +
    "\000\002\031\004\000\002\032\004\000\002\032\004\000" +
    "\002\033\004\000\002\033\002\000\002\007\004\000\002" +
    "\007\005\000\002\012\005\000\002\012\004\000\002\013" +
    "\004\000\002\013\004\000\002\014\004\000\002\014\002" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\016\003\000\002\016" +
    "\005\000\002\016\005\000\002\016\003\000\002\034\005" +
    "\000\002\034\004\000\002\035\004\000\002\035\004\000" +
    "\002\036\004\000\002\036\002\000\002\011\004\000\002" +
    "\011\005\000\002\017\005\000\002\017\004\000\002\020" +
    "\004\000\002\020\004\000\002\021\004\000\002\021\002" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\037\005\000\002\037\004\000\002\023\004\000\002" +
    "\023\004\000\002\041\004\000\002\041\002\000\002\023" +
    "\004\000\002\023\005\000\002\024\003\000\002\024\005" +
    "\000\002\025\005\000\002\025\004\000\002\026\004\000" +
    "\002\026\004\000\002\027\006\000\002\027\002\000\002" +
    "\030\004\000\002\030\003\000\002\030\005\000\002\030" +
    "\003\000\002\045\005\000\002\045\003\000\002\045\007" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\047\004\000\002\047\005\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\050\004\000\002\050" +
    "\002\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\053\012\000\002\054\005\000\002\054\002\000\002\056" +
    "\011\000\002\057\011\000\002\060\013\000\002\061\016" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\063\005\000\002\063\004\000\002\063\002\000\002" +
    "\064\005\000\002\065\012\000\002\066\003\000\002\066" +
    "\002\000\002\067\004\000\002\067\003\000\002\070\007" +
    "\000\002\071\003\000\002\071\005\000\002\072\004\000" +
    "\002\072\002\000\002\073\006\000\002\073\002\000\002" +
    "\043\004\000\002\043\004\000\002\043\004\000\002\043" +
    "\004\000\002\043\004\000\002\043\004\000\002\043\004" +
    "\000\002\043\004\000\002\043\004\000\002\043\002\000" +
    "\002\074\017\000\002\074\017\000\002\074\017\000\002" +
    "\074\017\000\002\074\017\000\002\074\017\000\002\074" +
    "\017\000\002\074\017\000\002\074\017\000\002\074\017" +
    "\000\002\106\010\000\002\106\010\000\002\106\010\000" +
    "\002\106\010\000\002\106\010\000\002\100\015\000\002" +
    "\100\015\000\002\100\015\000\002\100\015\000\002\100" +
    "\015\000\002\100\015\000\002\100\015\000\002\100\015" +
    "\000\002\075\006\000\002\075\004\000\002\120\004\000" +
    "\002\121\005\000\002\121\002\000\002\076\003\000\002" +
    "\076\003\000\002\076\003\000\002\076\003\000\002\076" +
    "\003\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\077\003\000\002\077\003\000\002\077\003\000" +
    "\002\077\003\000\002\077\003\000\002\107\006\000\002" +
    "\101\003\000\002\101\005\000\002\101\005\000\002\101" +
    "\004\000\002\101\004\000\002\102\003\000\002\102\005" +
    "\000\002\102\005\000\002\103\003\000\002\103\003\000" +
    "\002\103\003\000\002\103\003\000\002\103\005\000\002" +
    "\110\007\000\002\110\007\000\002\110\007\000\002\110" +
    "\007\000\002\110\007\000\002\111\007\000\002\111\007" +
    "\000\002\111\007\000\002\111\007\000\002\112\004\000" +
    "\002\113\005\000\002\113\002\000\002\115\003\000\002" +
    "\115\003\000\002\115\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d0\000\024\005\005\006\017\007\007\010\011\011" +
    "\023\012\027\013\016\015\012\016\021\001\002\000\026" +
    "\002\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\015\ufffe\016\ufffe\001\002\000\006\003\u01cb" +
    "\033\u01ca\001\002\000\010\003\u01c9\051\u01c7\072\u01c8\001" +
    "\002\000\006\003\117\033\116\001\002\000\010\003\u01c3" +
    "\051\u01c2\072\u01c4\001\002\000\006\003\060\033\057\001" +
    "\002\000\006\003\u017b\033\u017a\001\002\000\026\002\uffff" +
    "\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013" +
    "\uffff\015\uffff\016\uffff\001\002\000\010\003\u0178\051\u0176" +
    "\072\u0177\001\002\000\026\002\ufffc\005\ufffc\006\ufffc\007" +
    "\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\015\ufffc\016\ufffc" +
    "\001\002\000\006\003\u016a\033\u0168\001\002\000\006\003" +
    "\137\033\136\001\002\000\010\003\u0164\051\u0163\072\u0165" +
    "\001\002\000\006\003\156\014\157\001\002\000\010\003" +
    "\135\051\133\072\134\001\002\000\006\003\125\033\124" +
    "\001\002\000\010\003\113\051\112\072\114\001\002\000" +
    "\026\002\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\012\ufffd\013\ufffd\015\ufffd\016\ufffd\001\002\000\010\003" +
    "\056\051\054\072\055\001\002\000\010\003\034\033\033" +
    "\063\035\001\002\000\026\002\032\005\005\006\017\007" +
    "\007\010\011\011\023\012\027\013\016\015\012\016\021" +
    "\001\002\000\026\002\000\005\000\006\000\007\000\010" +
    "\000\011\000\012\000\013\000\015\000\016\000\001\002" +
    "\000\004\002\001\001\002\000\012\003\uffb2\043\051\051" +
    "\uffb2\072\uffb2\001\002\000\012\003\uffb2\043\051\051\uffb2" +
    "\072\uffb2\001\002\000\012\003\041\064\043\075\042\076" +
    "\044\001\002\000\010\003\uffb6\051\uffb6\072\uffb6\001\002" +
    "\000\006\051\045\064\046\001\002\000\006\051\uffaf\064" +
    "\uffaf\001\002\000\012\003\uffb8\051\uffb8\064\uffb8\072\uffb8" +
    "\001\002\000\012\003\uffba\051\uffba\064\uffba\072\uffba\001" +
    "\002\000\010\003\uffb1\051\uffb1\072\uffb1\001\002\000\012" +
    "\003\uffb9\051\uffb9\064\uffb9\072\uffb9\001\002\000\010\003" +
    "\041\075\042\076\044\001\002\000\010\003\uffb0\051\uffb0" +
    "\072\uffb0\001\002\000\006\051\uffae\064\uffae\001\002\000" +
    "\010\003\uffb4\051\uffb4\072\uffb4\001\002\000\010\003\034" +
    "\033\033\063\035\001\002\000\010\003\uffb3\051\uffb3\072" +
    "\uffb3\001\002\000\010\003\uffb5\051\uffb5\072\uffb5\001\002" +
    "\000\006\003\060\033\057\001\002\000\062\002\ufff5\003" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5" +
    "\032\ufff5\033\ufff5\066\ufff5\001\002\000\062\002\ufff4\003" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\066\ufff4\001\002\000\012\003\uffc3\043" +
    "\063\051\uffc3\072\uffc3\001\002\000\012\003\uffc3\043\063" +
    "\051\uffc3\072\uffc3\001\002\000\010\003\uffc8\051\uffc8\072" +
    "\uffc8\001\002\000\010\003\uffc5\051\uffc5\072\uffc5\001\002" +
    "\000\004\063\064\001\002\000\012\003\066\064\070\077" +
    "\067\100\072\001\002\000\010\003\uffc4\051\uffc4\072\uffc4" +
    "\001\002\000\004\073\106\001\002\000\006\003\101\073" +
    "\102\001\002\000\010\003\uffc2\051\uffc2\072\uffc2\001\002" +
    "\000\004\064\100\001\002\000\006\003\073\073\074\001" +
    "\002\000\004\100\077\001\002\000\006\003\075\100\076" +
    "\001\002\000\012\003\uffce\051\uffce\064\uffce\072\uffce\001" +
    "\002\000\012\003\uffd0\051\uffd0\064\uffd0\072\uffd0\001\002" +
    "\000\012\003\uffcd\051\uffcd\064\uffcd\072\uffcd\001\002\000" +
    "\010\003\uffc1\051\uffc1\072\uffc1\001\002\000\004\077\105" +
    "\001\002\000\006\003\103\077\104\001\002\000\012\003" +
    "\uffd2\051\uffd2\064\uffd2\072\uffd2\001\002\000\012\003\uffd4" +
    "\051\uffd4\064\uffd4\072\uffd4\001\002\000\012\003\uffd1\051" +
    "\uffd1\064\uffd1\072\uffd1\001\002\000\006\077\107\100\110" +
    "\001\002\000\012\003\uffd3\051\uffd3\064\uffd3\072\uffd3\001" +
    "\002\000\012\003\uffcf\051\uffcf\064\uffcf\072\uffcf\001\002" +
    "\000\010\003\uffc6\051\uffc6\072\uffc6\001\002\000\006\003" +
    "\117\033\116\001\002\000\062\002\ufff6\003\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\024\ufff6" +
    "\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033" +
    "\ufff6\066\ufff6\001\002\000\062\002\ufff7\003\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033" +
    "\ufff7\066\ufff7\001\002\000\010\003\uffda\051\uffda\072\uffda" +
    "\001\002\000\012\003\uffd5\043\121\051\uffd5\072\uffd5\001" +
    "\002\000\012\003\uffd5\043\121\051\uffd5\072\uffd5\001\002" +
    "\000\010\003\uffd7\051\uffd7\072\uffd7\001\002\000\010\003" +
    "\066\077\067\100\072\001\002\000\010\003\uffd6\051\uffd6" +
    "\072\uffd6\001\002\000\010\003\uffd8\051\uffd8\072\uffd8\001" +
    "\002\000\012\003\uffbb\043\130\051\uffbb\072\uffbb\001\002" +
    "\000\012\003\uffbb\043\130\051\uffbb\072\uffbb\001\002\000" +
    "\010\003\uffbf\051\uffbf\072\uffbf\001\002\000\010\003\uffbd" +
    "\051\uffbd\072\uffbd\001\002\000\010\003\041\075\042\076" +
    "\044\001\002\000\010\003\uffbc\051\uffbc\072\uffbc\001\002" +
    "\000\010\003\uffbe\051\uffbe\072\uffbe\001\002\000\006\003" +
    "\137\033\136\001\002\000\062\002\ufff9\003\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\015" +
    "\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\024\ufff9" +
    "\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033" +
    "\ufff9\066\ufff9\001\002\000\062\002\ufff8\003\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\024\ufff8" +
    "\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033" +
    "\ufff8\066\ufff8\001\002\000\012\003\uffdd\043\142\051\uffdd" +
    "\072\uffdd\001\002\000\012\003\uffdd\043\142\051\uffdd\072" +
    "\uffdd\001\002\000\010\003\uffe2\051\uffe2\072\uffe2\001\002" +
    "\000\010\003\uffdf\051\uffdf\072\uffdf\001\002\000\004\063" +
    "\143\001\002\000\010\003\146\064\150\074\145\001\002" +
    "\000\010\003\uffde\051\uffde\072\uffde\001\002\000\006\051" +
    "\uffe6\064\uffe6\001\002\000\006\051\uffe3\064\uffe3\001\002" +
    "\000\006\051\151\064\152\001\002\000\010\003\uffdc\051" +
    "\uffdc\072\uffdc\001\002\000\006\003\154\074\153\001\002" +
    "\000\010\003\uffdb\051\uffdb\072\uffdb\001\002\000\006\051" +
    "\uffe5\064\uffe5\001\002\000\006\051\uffe4\064\uffe4\001\002" +
    "\000\010\003\uffe0\051\uffe0\072\uffe0\001\002\000\004\061" +
    "\u015a\001\002\000\006\003\160\061\161\001\002\000\022" +
    "\003\167\005\162\006\165\007\173\010\171\011\163\012" +
    "\172\013\166\001\002\000\022\003\167\005\162\006\165" +
    "\007\173\010\171\011\163\012\172\013\166\001\002\000" +
    "\004\033\uff4d\001\002\000\004\033\uff49\001\002\000\004" +
    "\033\u0151\001\002\000\004\033\uff4c\001\002\000\004\033" +
    "\uff47\001\002\000\004\033\uff46\001\002\000\010\003\175" +
    "\051\174\062\176\001\002\000\004\033\uff4a\001\002\000" +
    "\004\033\uff48\001\002\000\004\033\uff4b\001\002\000\022" +
    "\003\167\005\162\006\165\007\173\010\171\011\163\012" +
    "\172\013\166\001\002\000\004\065\u0149\001\002\000\006" +
    "\003\177\065\200\001\002\000\042\005\uff6a\006\uff6a\007" +
    "\uff6a\010\uff6a\011\uff6a\012\uff6a\013\uff6a\017\uff6a\020\uff6a" +
    "\021\uff6a\022\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a\033" +
    "\uff6a\001\002\000\044\003\uff6a\005\uff6a\006\uff6a\007\uff6a" +
    "\010\uff6a\011\uff6a\012\uff6a\013\uff6a\017\uff6a\020\uff6a\021" +
    "\uff6a\022\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a\033\uff6a" +
    "\001\002\000\044\003\220\005\005\006\017\007\007\010" +
    "\011\011\023\012\027\013\016\017\206\020\202\021\221" +
    "\022\210\024\224\025\205\026\212\027\207\033\211\001" +
    "\002\000\006\003\u0136\061\u0137\001\002\000\054\003\uff6c" +
    "\005\uff6c\006\uff6c\007\uff6c\010\uff6c\011\uff6c\012\uff6c\013" +
    "\uff6c\017\uff6c\020\uff6c\021\uff6c\022\uff6c\024\uff6c\025\uff6c" +
    "\026\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c\033\uff6c\066" +
    "\uff6c\001\002\000\054\003\uff6b\005\uff6b\006\uff6b\007\uff6b" +
    "\010\uff6b\011\uff6b\012\uff6b\013\uff6b\017\uff6b\020\uff6b\021" +
    "\uff6b\022\uff6b\024\uff6b\025\uff6b\026\uff6b\027\uff6b\030\uff6b" +
    "\031\uff6b\032\uff6b\033\uff6b\066\uff6b\001\002\000\004\061" +
    "\u0130\001\002\000\014\003\334\033\331\074\332\075\335" +
    "\076\336\001\002\000\004\061\u0111\001\002\000\004\061" +
    "\u0101\001\002\000\004\043\351\001\002\000\004\065\341" +
    "\001\002\000\054\003\uff73\005\uff73\006\uff73\007\uff73\010" +
    "\uff73\011\uff73\012\uff73\013\uff73\017\uff73\020\uff73\021\uff73" +
    "\022\uff73\024\uff73\025\uff73\026\uff73\027\uff73\030\uff73\031" +
    "\uff73\032\uff73\033\uff73\066\uff73\001\002\000\054\003\uff70" +
    "\005\uff70\006\uff70\007\uff70\010\uff70\011\uff70\012\uff70\013" +
    "\uff70\017\uff70\020\uff70\021\uff70\022\uff70\024\uff70\025\uff70" +
    "\026\uff70\027\uff70\030\uff70\031\uff70\032\uff70\033\uff70\066" +
    "\uff70\001\002\000\054\003\uff72\005\uff72\006\uff72\007\uff72" +
    "\010\uff72\011\uff72\012\uff72\013\uff72\017\uff72\020\uff72\021" +
    "\uff72\022\uff72\024\uff72\025\uff72\026\uff72\027\uff72\030\uff72" +
    "\031\uff72\032\uff72\033\uff72\066\uff72\001\002\000\054\003" +
    "\uff71\005\uff71\006\uff71\007\uff71\010\uff71\011\uff71\012\uff71" +
    "\013\uff71\017\uff71\020\uff71\021\uff71\022\uff71\024\uff71\025" +
    "\uff71\026\uff71\027\uff71\030\uff71\031\uff71\032\uff71\033\uff71" +
    "\066\uff71\001\002\000\054\003\uff6d\005\uff6d\006\uff6d\007" +
    "\uff6d\010\uff6d\011\uff6d\012\uff6d\013\uff6d\017\uff6d\020\uff6d" +
    "\021\uff6d\022\uff6d\024\uff6d\025\uff6d\026\uff6d\027\uff6d\030" +
    "\uff6d\031\uff6d\032\uff6d\033\uff6d\066\uff6d\001\002\000\014" +
    "\003\334\033\331\074\332\075\335\076\336\001\002\000" +
    "\006\003\306\061\307\001\002\000\054\003\uff6f\005\uff6f" +
    "\006\uff6f\007\uff6f\010\uff6f\011\uff6f\012\uff6f\013\uff6f\017" +
    "\uff6f\020\uff6f\021\uff6f\022\uff6f\024\uff6f\025\uff6f\026\uff6f" +
    "\027\uff6f\030\uff6f\031\uff6f\032\uff6f\033\uff6f\066\uff6f\001" +
    "\002\000\054\003\uff6e\005\uff6e\006\uff6e\007\uff6e\010\uff6e" +
    "\011\uff6e\012\uff6e\013\uff6e\017\uff6e\020\uff6e\021\uff6e\022" +
    "\uff6e\024\uff6e\025\uff6e\026\uff6e\027\uff6e\030\uff6e\031\uff6e" +
    "\032\uff6e\033\uff6e\066\uff6e\001\002\000\004\061\225\001" +
    "\002\000\010\005\226\051\uff81\067\uff81\001\002\000\004" +
    "\033\301\001\002\000\006\051\230\067\231\001\002\000" +
    "\004\033\301\001\002\000\014\003\235\033\233\074\232" +
    "\075\236\076\237\001\002\000\016\050\263\054\272\055" +
    "\271\056\270\057\267\060\265\001\002\000\030\003\uff97" +
    "\050\263\052\uff97\053\uff97\054\272\055\271\056\270\057" +
    "\267\060\265\062\uff97\067\uff97\001\002\000\014\003\uffa2" +
    "\052\uffa2\053\uffa2\062\uffa2\067\uffa2\001\002\000\014\003" +
    "\uff99\052\uff99\053\uff99\062\uff99\067\uff99\001\002\000\014" +
    "\003\uff9b\052\uff9b\053\uff9b\062\uff9b\067\uff9b\001\002\000" +
    "\014\003\uff9a\052\uff9a\053\uff9a\062\uff9a\067\uff9a\001\002" +
    "\000\012\003\244\052\245\053\242\067\243\001\002\000" +
    "\016\003\235\033\233\061\260\074\232\075\236\076\237" +
    "\001\002\000\016\003\uff9f\033\uff9f\061\uff9f\074\uff9f\075" +
    "\uff9f\076\uff9f\001\002\000\004\033\246\001\002\000\016" +
    "\003\uff9e\033\uff9e\061\uff9e\074\uff9e\075\uff9e\076\uff9e\001" +
    "\002\000\016\003\uffa0\033\uffa0\061\uffa0\074\uffa0\075\uffa0" +
    "\076\uffa0\001\002\000\010\034\250\035\251\036\247\001" +
    "\002\000\004\062\uff84\001\002\000\004\062\uff86\001\002" +
    "\000\004\062\uff85\001\002\000\004\062\253\001\002\000" +
    "\004\065\254\001\002\000\042\005\uff6a\006\uff6a\007\uff6a" +
    "\010\uff6a\011\uff6a\012\uff6a\013\uff6a\020\uff6a\021\uff6a\022" +
    "\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a\033\uff6a\066\uff6a" +
    "\001\002\000\042\005\005\006\017\007\007\010\011\011" +
    "\023\012\027\013\016\020\202\021\221\022\210\024\224" +
    "\025\205\026\212\027\207\033\211\066\256\001\002\000" +
    "\054\003\uff87\005\uff87\006\uff87\007\uff87\010\uff87\011\uff87" +
    "\012\uff87\013\uff87\017\uff87\020\uff87\021\uff87\022\uff87\024" +
    "\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87" +
    "\033\uff87\066\uff87\001\002\000\014\003\uffa3\052\uffa3\053" +
    "\uffa3\062\uffa3\067\uffa3\001\002\000\014\003\235\033\233" +
    "\074\232\075\236\076\237\001\002\000\004\062\262\001" +
    "\002\000\014\003\uffa1\052\uffa1\053\uffa1\062\uffa1\067\uffa1" +
    "\001\002\000\010\003\uff93\033\uff93\074\uff93\001\002\000" +
    "\010\003\276\033\274\074\273\001\002\000\010\003\uff8e" +
    "\033\uff8e\074\uff8e\001\002\000\014\003\uff9d\052\uff9d\053" +
    "\uff9d\062\uff9d\067\uff9d\001\002\000\010\003\uff8f\033\uff8f" +
    "\074\uff8f\001\002\000\010\003\uff90\033\uff90\074\uff90\001" +
    "\002\000\010\003\uff91\033\uff91\074\uff91\001\002\000\010" +
    "\003\uff92\033\uff92\074\uff92\001\002\000\014\003\uff95\052" +
    "\uff95\053\uff95\062\uff95\067\uff95\001\002\000\014\003\uff96" +
    "\052\uff96\053\uff96\062\uff96\067\uff96\001\002\000\014\003" +
    "\uff98\052\uff98\053\uff98\062\uff98\067\uff98\001\002\000\014" +
    "\003\uff94\052\uff94\053\uff94\062\uff94\067\uff94\001\002\000" +
    "\010\003\276\033\274\074\273\001\002\000\014\003\uff9c" +
    "\052\uff9c\053\uff9c\062\uff9c\067\uff9c\001\002\000\004\043" +
    "\303\001\002\000\006\051\uff83\067\uff83\001\002\000\004" +
    "\074\304\001\002\000\006\051\uff80\067\uff80\001\002\000" +
    "\006\051\uff82\067\uff82\001\002\000\010\003\312\033\310" +
    "\102\311\001\002\000\010\003\312\033\310\102\311\001" +
    "\002\000\010\003\uff26\041\uff26\062\uff26\001\002\000\010" +
    "\003\uff25\041\uff25\062\uff25\001\002\000\010\003\uff24\041" +
    "\uff24\062\uff24\001\002\000\006\003\321\062\322\001\002" +
    "\000\010\003\uff27\041\315\062\uff27\001\002\000\010\003" +
    "\312\033\310\102\311\001\002\000\006\003\uff29\062\uff29" +
    "\001\002\000\010\003\uff27\041\315\062\uff27\001\002\000" +
    "\006\003\uff28\062\uff28\001\002\000\004\072\325\001\002" +
    "\000\006\003\324\072\323\001\002\000\054\003\uff2d\005" +
    "\uff2d\006\uff2d\007\uff2d\010\uff2d\011\uff2d\012\uff2d\013\uff2d" +
    "\017\uff2d\020\uff2d\021\uff2d\022\uff2d\024\uff2d\025\uff2d\026" +
    "\uff2d\027\uff2d\030\uff2d\031\uff2d\032\uff2d\033\uff2d\066\uff2d" +
    "\001\002\000\054\003\uff2a\005\uff2a\006\uff2a\007\uff2a\010" +
    "\uff2a\011\uff2a\012\uff2a\013\uff2a\017\uff2a\020\uff2a\021\uff2a" +
    "\022\uff2a\024\uff2a\025\uff2a\026\uff2a\027\uff2a\030\uff2a\031" +
    "\uff2a\032\uff2a\033\uff2a\066\uff2a\001\002\000\054\003\uff2b" +
    "\005\uff2b\006\uff2b\007\uff2b\010\uff2b\011\uff2b\012\uff2b\013" +
    "\uff2b\017\uff2b\020\uff2b\021\uff2b\022\uff2b\024\uff2b\025\uff2b" +
    "\026\uff2b\027\uff2b\030\uff2b\031\uff2b\032\uff2b\033\uff2b\066" +
    "\uff2b\001\002\000\004\062\327\001\002\000\004\072\330" +
    "\001\002\000\054\003\uff2c\005\uff2c\006\uff2c\007\uff2c\010" +
    "\uff2c\011\uff2c\012\uff2c\013\uff2c\017\uff2c\020\uff2c\021\uff2c" +
    "\022\uff2c\024\uff2c\025\uff2c\026\uff2c\027\uff2c\030\uff2c\031" +
    "\uff2c\032\uff2c\033\uff2c\066\uff2c\001\002\000\006\003\uff45" +
    "\072\uff45\001\002\000\006\003\uff42\072\uff42\001\002\000" +
    "\004\072\337\001\002\000\006\003\uff41\072\uff41\001\002" +
    "\000\006\003\uff44\072\uff44\001\002\000\006\003\uff43\072" +
    "\uff43\001\002\000\004\066\340\001\002\000\026\002\uff55" +
    "\005\uff55\006\uff55\007\uff55\010\uff55\011\uff55\012\uff55\013" +
    "\uff55\015\uff55\016\uff55\001\002\000\042\005\uff6a\006\uff6a" +
    "\007\uff6a\010\uff6a\011\uff6a\012\uff6a\013\uff6a\020\uff6a\021" +
    "\uff6a\022\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a\033\uff6a" +
    "\066\uff6a\001\002\000\042\005\005\006\017\007\007\010" +
    "\011\011\023\012\027\013\016\020\202\021\221\022\210" +
    "\024\224\025\205\026\212\027\207\033\211\066\343\001" +
    "\002\000\004\025\344\001\002\000\004\061\345\001\002" +
    "\000\014\003\235\033\233\074\232\075\236\076\237\001" +
    "\002\000\012\003\244\052\245\053\242\062\347\001\002" +
    "\000\004\072\350\001\002\000\054\003\uff88\005\uff88\006" +
    "\uff88\007\uff88\010\uff88\011\uff88\012\uff88\013\uff88\017\uff88" +
    "\020\uff88\021\uff88\022\uff88\024\uff88\025\uff88\026\uff88\027" +
    "\uff88\030\uff88\031\uff88\032\uff88\033\uff88\066\uff88\001\002" +
    "\000\020\033\360\041\363\042\353\061\356\074\352\075" +
    "\355\076\357\001\002\000\016\037\uff37\040\uff37\041\uff37" +
    "\042\uff37\062\uff37\072\uff37\001\002\000\014\033\360\061" +
    "\356\074\352\075\355\076\357\001\002\000\016\037\365" +
    "\040\366\041\uff3f\042\uff3f\062\uff3f\072\uff3f\001\002\000" +
    "\016\037\uff35\040\uff35\041\uff35\042\uff35\062\uff35\072\uff35" +
    "\001\002\000\020\033\360\041\363\042\353\061\356\074" +
    "\352\075\355\076\357\001\002\000\016\037\uff34\040\uff34" +
    "\041\uff34\042\uff34\062\uff34\072\uff34\001\002\000\016\037" +
    "\uff36\040\uff36\041\uff36\042\uff36\062\uff36\072\uff36\001\002" +
    "\000\016\037\uff3a\040\uff3a\041\uff3a\042\uff3a\062\uff3a\072" +
    "\uff3a\001\002\000\010\041\371\042\372\072\373\001\002" +
    "\000\014\033\360\061\356\074\352\075\355\076\357\001" +
    "\002\000\016\037\365\040\366\041\uff3c\042\uff3c\062\uff3c" +
    "\072\uff3c\001\002\000\014\033\360\061\356\074\352\075" +
    "\355\076\357\001\002\000\014\033\360\061\356\074\352" +
    "\075\355\076\357\001\002\000\016\037\uff38\040\uff38\041" +
    "\uff38\042\uff38\062\uff38\072\uff38\001\002\000\016\037\uff39" +
    "\040\uff39\041\uff39\042\uff39\062\uff39\072\uff39\001\002\000" +
    "\014\033\360\061\356\074\352\075\355\076\357\001\002" +
    "\000\014\033\360\061\356\074\352\075\355\076\357\001" +
    "\002\000\054\003\uff40\005\uff40\006\uff40\007\uff40\010\uff40" +
    "\011\uff40\012\uff40\013\uff40\017\uff40\020\uff40\021\uff40\022" +
    "\uff40\024\uff40\025\uff40\026\uff40\027\uff40\030\uff40\031\uff40" +
    "\032\uff40\033\uff40\066\uff40\001\002\000\016\037\365\040" +
    "\366\041\uff3d\042\uff3d\062\uff3d\072\uff3d\001\002\000\016" +
    "\037\365\040\366\041\uff3e\042\uff3e\062\uff3e\072\uff3e\001" +
    "\002\000\010\041\371\042\372\062\377\001\002\000\016" +
    "\037\uff33\040\uff33\041\uff33\042\uff33\062\uff33\072\uff33\001" +
    "\002\000\016\037\365\040\366\041\uff3b\042\uff3b\062\uff3b" +
    "\072\uff3b\001\002\000\014\003\235\033\233\074\232\075" +
    "\236\076\237\001\002\000\012\003\244\052\245\053\242" +
    "\062\u0103\001\002\000\004\065\u0104\001\002\000\042\005" +
    "\uff6a\006\uff6a\007\uff6a\010\uff6a\011\uff6a\012\uff6a\013\uff6a" +
    "\020\uff6a\021\uff6a\022\uff6a\024\uff6a\025\uff6a\026\uff6a\027" +
    "\uff6a\033\uff6a\066\uff6a\001\002\000\042\005\005\006\017" +
    "\007\007\010\011\011\023\012\027\013\016\020\202\021" +
    "\221\022\210\024\224\025\205\026\212\027\207\033\211" +
    "\066\u0106\001\002\000\056\003\uff8b\005\uff8b\006\uff8b\007" +
    "\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\017\uff8b\020\uff8b" +
    "\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027" +
    "\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\066\uff8b\001\002" +
    "\000\056\003\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011" +
    "\uff8d\012\uff8d\013\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d" +
    "\023\u0108\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031" +
    "\uff8d\032\uff8d\033\uff8d\066\uff8d\001\002\000\004\022\u010a" +
    "\001\002\000\056\003\uff8c\005\uff8c\006\uff8c\007\uff8c\010" +
    "\uff8c\011\uff8c\012\uff8c\013\uff8c\017\uff8c\020\uff8c\021\uff8c" +
    "\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030" +
    "\uff8c\031\uff8c\032\uff8c\033\uff8c\066\uff8c\001\002\000\004" +
    "\061\u010b\001\002\000\014\003\235\033\233\074\232\075" +
    "\236\076\237\001\002\000\012\003\244\052\245\053\242" +
    "\062\u010d\001\002\000\004\065\u010e\001\002\000\042\005" +
    "\uff6a\006\uff6a\007\uff6a\010\uff6a\011\uff6a\012\uff6a\013\uff6a" +
    "\020\uff6a\021\uff6a\022\uff6a\024\uff6a\025\uff6a\026\uff6a\027" +
    "\uff6a\033\uff6a\066\uff6a\001\002\000\042\005\005\006\017" +
    "\007\007\010\011\011\023\012\027\013\016\020\202\021" +
    "\221\022\210\024\224\025\205\026\212\027\207\033\211" +
    "\066\u0110\001\002\000\056\003\uff8a\005\uff8a\006\uff8a\007" +
    "\uff8a\010\uff8a\011\uff8a\012\uff8a\013\uff8a\017\uff8a\020\uff8a" +
    "\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027" +
    "\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\066\uff8a\001\002" +
    "\000\004\033\u0112\001\002\000\004\062\u0113\001\002\000" +
    "\004\065\u0114\001\002\000\010\030\u0118\031\uff7d\066\uff7d" +
    "\001\002\000\006\031\u0124\066\uff74\001\002\000\010\030" +
    "\u0118\031\uff7e\066\uff7e\001\002\000\010\030\uff7b\031\uff7b" +
    "\066\uff7b\001\002\000\006\074\u011a\077\u011b\001\002\000" +
    "\004\070\u011e\001\002\000\004\070\uff79\001\002\000\004" +
    "\073\u011c\001\002\000\004\077\u011d\001\002\000\004\070" +
    "\uff78\001\002\000\050\005\uff6a\006\uff6a\007\uff6a\010\uff6a" +
    "\011\uff6a\012\uff6a\013\uff6a\020\uff6a\021\uff6a\022\uff6a\024" +
    "\uff6a\025\uff6a\026\uff6a\027\uff6a\030\uff6a\031\uff6a\032\uff6a" +
    "\033\uff6a\066\uff6a\001\002\000\050\005\005\006\017\007" +
    "\007\010\011\011\023\012\027\013\016\020\202\021\221" +
    "\022\210\024\224\025\205\026\212\027\207\030\uff76\031" +
    "\uff76\032\u0120\033\211\066\uff76\001\002\000\004\072\u0122" +
    "\001\002\000\010\030\uff7a\031\uff7a\066\uff7a\001\002\000" +
    "\010\030\uff77\031\uff77\066\uff77\001\002\000\010\030\uff7c" +
    "\031\uff7c\066\uff7c\001\002\000\004\070\u0127\001\002\000" +
    "\004\066\u0126\001\002\000\054\003\uff7f\005\uff7f\006\uff7f" +
    "\007\uff7f\010\uff7f\011\uff7f\012\uff7f\013\uff7f\017\uff7f\020" +
    "\uff7f\021\uff7f\022\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f" +
    "\030\uff7f\031\uff7f\032\uff7f\033\uff7f\066\uff7f\001\002\000" +
    "\044\005\uff6a\006\uff6a\007\uff6a\010\uff6a\011\uff6a\012\uff6a" +
    "\013\uff6a\020\uff6a\021\uff6a\022\uff6a\024\uff6a\025\uff6a\026" +
    "\uff6a\027\uff6a\032\uff6a\033\uff6a\066\uff6a\001\002\000\044" +
    "\005\005\006\017\007\007\010\011\011\023\012\027\013" +
    "\016\020\202\021\221\022\210\024\224\025\205\026\212" +
    "\027\207\032\u0120\033\211\066\uff76\001\002\000\004\066" +
    "\uff75\001\002\000\006\003\u012c\072\u012b\001\002\000\006" +
    "\003\u012e\066\u012f\001\002\000\004\066\u012d\001\002\000" +
    "\026\002\uff54\005\uff54\006\uff54\007\uff54\010\uff54\011\uff54" +
    "\012\uff54\013\uff54\015\uff54\016\uff54\001\002\000\026\002" +
    "\uff53\005\uff53\006\uff53\007\uff53\010\uff53\011\uff53\012\uff53" +
    "\013\uff53\015\uff53\016\uff53\001\002\000\026\002\uff5a\005" +
    "\uff5a\006\uff5a\007\uff5a\010\uff5a\011\uff5a\012\uff5a\013\uff5a" +
    "\015\uff5a\016\uff5a\001\002\000\014\003\235\033\233\074" +
    "\232\075\236\076\237\001\002\000\012\003\244\052\245" +
    "\053\242\062\u0132\001\002\000\004\065\u0133\001\002\000" +
    "\042\005\uff6a\006\uff6a\007\uff6a\010\uff6a\011\uff6a\012\uff6a" +
    "\013\uff6a\020\uff6a\021\uff6a\022\uff6a\024\uff6a\025\uff6a\026" +
    "\uff6a\027\uff6a\033\uff6a\066\uff6a\001\002\000\042\005\005" +
    "\006\017\007\007\010\011\011\023\012\027\013\016\020" +
    "\202\021\221\022\210\024\224\025\205\026\212\027\207" +
    "\033\211\066\u0135\001\002\000\054\003\uff89\005\uff89\006" +
    "\uff89\007\uff89\010\uff89\011\uff89\012\uff89\013\uff89\017\uff89" +
    "\020\uff89\021\uff89\022\uff89\024\uff89\025\uff89\026\uff89\027" +
    "\uff89\030\uff89\031\uff89\032\uff89\033\uff89\066\uff89\001\002" +
    "\000\004\033\u0141\001\002\000\006\003\u0139\033\u0138\001" +
    "\002\000\006\003\u013c\062\u013d\001\002\000\004\062\u013a" +
    "\001\002\000\004\072\u013b\001\002\000\054\003\uff30\005" +
    "\uff30\006\uff30\007\uff30\010\uff30\011\uff30\012\uff30\013\uff30" +
    "\017\uff30\020\uff30\021\uff30\022\uff30\024\uff30\025\uff30\026" +
    "\uff30\027\uff30\030\uff30\031\uff30\032\uff30\033\uff30\066\uff30" +
    "\001\002\000\004\072\u0140\001\002\000\006\003\u013e\072" +
    "\u013f\001\002\000\054\003\uff2e\005\uff2e\006\uff2e\007\uff2e" +
    "\010\uff2e\011\uff2e\012\uff2e\013\uff2e\017\uff2e\020\uff2e\021" +
    "\uff2e\022\uff2e\024\uff2e\025\uff2e\026\uff2e\027\uff2e\030\uff2e" +
    "\031\uff2e\032\uff2e\033\uff2e\066\uff2e\001\002\000\054\003" +
    "\uff32\005\uff32\006\uff32\007\uff32\010\uff32\011\uff32\012\uff32" +
    "\013\uff32\017\uff32\020\uff32\021\uff32\022\uff32\024\uff32\025" +
    "\uff32\026\uff32\027\uff32\030\uff32\031\uff32\032\uff32\033\uff32" +
    "\066\uff32\001\002\000\054\003\uff2f\005\uff2f\006\uff2f\007" +
    "\uff2f\010\uff2f\011\uff2f\012\uff2f\013\uff2f\017\uff2f\020\uff2f" +
    "\021\uff2f\022\uff2f\024\uff2f\025\uff2f\026\uff2f\027\uff2f\030" +
    "\uff2f\031\uff2f\032\uff2f\033\uff2f\066\uff2f\001\002\000\004" +
    "\062\u0142\001\002\000\004\072\u0143\001\002\000\054\003" +
    "\uff31\005\uff31\006\uff31\007\uff31\010\uff31\011\uff31\012\uff31" +
    "\013\uff31\017\uff31\020\uff31\021\uff31\022\uff31\024\uff31\025" +
    "\uff31\026\uff31\027\uff31\030\uff31\031\uff31\032\uff31\033\uff31" +
    "\066\uff31\001\002\000\042\005\005\006\017\007\007\010" +
    "\011\011\023\012\027\013\016\017\u0145\020\202\021\221" +
    "\022\210\024\224\025\205\026\212\027\207\033\211\001" +
    "\002\000\014\003\334\033\331\074\332\075\335\076\336" +
    "\001\002\000\004\072\u0147\001\002\000\004\066\u0148\001" +
    "\002\000\026\002\uff56\005\uff56\006\uff56\007\uff56\010\uff56" +
    "\011\uff56\012\uff56\013\uff56\015\uff56\016\uff56\001\002\000" +
    "\042\005\uff6a\006\uff6a\007\uff6a\010\uff6a\011\uff6a\012\uff6a" +
    "\013\uff6a\017\uff6a\020\uff6a\021\uff6a\022\uff6a\024\uff6a\025" +
    "\uff6a\026\uff6a\027\uff6a\033\uff6a\001\002\000\042\005\005" +
    "\006\017\007\007\010\011\011\023\012\027\013\016\017" +
    "\u014b\020\202\021\221\022\210\024\224\025\205\026\212" +
    "\027\207\033\211\001\002\000\014\003\334\033\331\074" +
    "\332\075\335\076\336\001\002\000\004\072\u014d\001\002" +
    "\000\004\066\u014e\001\002\000\026\002\uff57\005\uff57\006" +
    "\uff57\007\uff57\010\uff57\011\uff57\012\uff57\013\uff57\015\uff57" +
    "\016\uff57\001\002\000\004\033\u0150\001\002\000\010\003" +
    "\uff52\051\uff52\062\uff52\001\002\000\010\003\uff51\051\uff51" +
    "\062\uff51\001\002\000\006\051\174\062\u0153\001\002\000" +
    "\004\065\u0154\001\002\000\042\005\uff6a\006\uff6a\007\uff6a" +
    "\010\uff6a\011\uff6a\012\uff6a\013\uff6a\017\uff6a\020\uff6a\021" +
    "\uff6a\022\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a\033\uff6a" +
    "\001\002\000\042\005\005\006\017\007\007\010\011\011" +
    "\023\012\027\013\016\017\u0156\020\202\021\221\022\210" +
    "\024\224\025\205\026\212\027\207\033\211\001\002\000" +
    "\014\003\334\033\331\074\332\075\335\076\336\001\002" +
    "\000\004\072\u0158\001\002\000\004\066\u0159\001\002\000" +
    "\026\002\uff58\005\uff58\006\uff58\007\uff58\010\uff58\011\uff58" +
    "\012\uff58\013\uff58\015\uff58\016\uff58\001\002\000\022\003" +
    "\167\005\162\006\165\007\173\010\171\011\163\012\172" +
    "\013\166\001\002\000\006\051\174\062\u015c\001\002\000" +
    "\004\065\u015d\001\002\000\042\005\uff6a\006\uff6a\007\uff6a" +
    "\010\uff6a\011\uff6a\012\uff6a\013\uff6a\017\uff6a\020\uff6a\021" +
    "\uff6a\022\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a\033\uff6a" +
    "\001\002\000\042\005\005\006\017\007\007\010\011\011" +
    "\023\012\027\013\016\017\u015f\020\202\021\221\022\210" +
    "\024\224\025\205\026\212\027\207\033\211\001\002\000" +
    "\014\003\334\033\331\074\332\075\335\076\336\001\002" +
    "\000\004\072\u0161\001\002\000\004\066\u0162\001\002\000" +
    "\026\002\uff59\005\uff59\006\uff59\007\uff59\010\uff59\011\uff59" +
    "\012\uff59\013\uff59\015\uff59\016\uff59\001\002\000\010\003" +
    "\034\033\033\063\035\001\002\000\062\002\ufff0\003\ufff0" +
    "\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032" +
    "\ufff0\033\ufff0\066\ufff0\001\002\000\062\002\ufff1\003\ufff1" +
    "\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1" +
    "\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032" +
    "\ufff1\033\ufff1\066\ufff1\001\002\000\010\003\uffb7\051\uffb7" +
    "\072\uffb7\001\002\000\010\003\uffe1\051\uffe1\072\uffe1\001" +
    "\002\000\012\003\uffa8\043\u016c\051\uffa8\072\uffa8\001\002" +
    "\000\010\003\uffac\051\uffac\072\uffac\001\002\000\012\003" +
    "\uffa8\043\u016c\051\uffa8\072\uffa8\001\002\000\010\003\uffaa" +
    "\051\uffaa\072\uffaa\001\002\000\004\100\u016d\001\002\000" +
    "\006\003\u0170\033\u016e\001\002\000\010\033\uffa6\051\uffa6" +
    "\100\uffa6\001\002\000\010\033\u0172\051\u0171\100\u0173\001" +
    "\002\000\010\033\uffa4\051\uffa4\100\uffa4\001\002\000\004" +
    "\003\u0174\001\002\000\010\033\uffa7\051\uffa7\100\uffa7\001" +
    "\002\000\010\003\uffa9\051\uffa9\072\uffa9\001\002\000\010" +
    "\033\uffa5\051\uffa5\100\uffa5\001\002\000\010\003\uffab\051" +
    "\uffab\072\uffab\001\002\000\006\003\125\033\124\001\002" +
    "\000\062\002\ufff3\003\ufff3\005\ufff3\006\ufff3\007\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\022\ufff3\024\ufff3\025\ufff3\026\ufff3\027" +
    "\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\066\ufff3\001\002" +
    "\000\062\002\ufff2\003\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\015\ufff2\016\ufff2\017\ufff2" +
    "\020\ufff2\021\ufff2\022\ufff2\024\ufff2\025\ufff2\026\ufff2\027" +
    "\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\066\ufff2\001\002" +
    "\000\010\003\uffc0\051\uffc0\072\uffc0\001\002\000\006\003" +
    "\u0187\014\u0188\001\002\000\004\014\u017c\001\002\000\004" +
    "\061\u017d\001\002\000\022\003\167\005\162\006\165\007" +
    "\173\010\171\011\163\012\172\013\166\001\002\000\006" +
    "\051\174\062\u017f\001\002\000\004\065\u0180\001\002\000" +
    "\042\005\uff6a\006\uff6a\007\uff6a\010\uff6a\011\uff6a\012\uff6a" +
    "\013\uff6a\017\uff6a\020\uff6a\021\uff6a\022\uff6a\024\uff6a\025" +
    "\uff6a\026\uff6a\027\uff6a\033\uff6a\001\002\000\042\005\005" +
    "\006\017\007\007\010\011\011\023\012\027\013\016\017" +
    "\u0182\020\202\021\221\022\210\024\224\025\205\026\212" +
    "\027\207\033\211\001\002\000\014\003\334\033\331\074" +
    "\332\075\335\076\336\001\002\000\004\072\u0184\001\002" +
    "\000\004\066\u0185\001\002\000\004\072\u0186\001\002\000" +
    "\026\002\uff68\005\uff68\006\uff68\007\uff68\010\uff68\011\uff68" +
    "\012\uff68\013\uff68\015\uff68\016\uff68\001\002\000\004\061" +
    "\u01b7\001\002\000\006\003\u0189\061\u018a\001\002\000\022" +
    "\003\167\005\162\006\165\007\173\010\171\011\163\012" +
    "\172\013\166\001\002\000\022\003\167\005\162\006\165" +
    "\007\173\010\171\011\163\012\172\013\166\001\002\000" +
    "\010\003\u018c\051\174\062\u018d\001\002\000\004\065\u01a7" +
    "\001\002\000\006\003\u018e\065\u018f\001\002\000\042\005" +
    "\uff6a\006\uff6a\007\uff6a\010\uff6a\011\uff6a\012\uff6a\013\uff6a" +
    "\017\uff6a\020\uff6a\021\uff6a\022\uff6a\024\uff6a\025\uff6a\026" +
    "\uff6a\027\uff6a\033\uff6a\001\002\000\044\003\uff6a\005\uff6a" +
    "\006\uff6a\007\uff6a\010\uff6a\011\uff6a\012\uff6a\013\uff6a\017" +
    "\uff6a\020\uff6a\021\uff6a\022\uff6a\024\uff6a\025\uff6a\026\uff6a" +
    "\027\uff6a\033\uff6a\001\002\000\044\003\u0192\005\005\006" +
    "\017\007\007\010\011\011\023\012\027\013\016\017\u0191" +
    "\020\202\021\221\022\210\024\224\025\205\026\212\027" +
    "\207\033\211\001\002\000\014\003\334\033\331\074\332" +
    "\075\335\076\336\001\002\000\014\003\334\033\331\074" +
    "\332\075\335\076\336\001\002\000\004\072\u0194\001\002" +
    "\000\004\066\u0195\001\002\000\004\072\u0196\001\002\000" +
    "\026\002\uff63\005\uff63\006\uff63\007\uff63\010\uff63\011\uff63" +
    "\012\uff63\013\uff63\015\uff63\016\uff63\001\002\000\006\003" +
    "\u0199\072\u0198\001\002\000\006\003\u019c\066\u019d\001\002" +
    "\000\004\066\u019a\001\002\000\004\072\u019b\001\002\000" +
    "\026\002\uff62\005\uff62\006\uff62\007\uff62\010\uff62\011\uff62" +
    "\012\uff62\013\uff62\015\uff62\016\uff62\001\002\000\004\072" +
    "\u01a0\001\002\000\006\003\u019f\072\u019e\001\002\000\026" +
    "\002\uff69\005\uff69\006\uff69\007\uff69\010\uff69\011\uff69\012" +
    "\uff69\013\uff69\015\uff69\016\uff69\001\002\000\026\002\uff60" +
    "\005\uff60\006\uff60\007\uff60\010\uff60\011\uff60\012\uff60\013" +
    "\uff60\015\uff60\016\uff60\001\002\000\026\002\uff61\005\uff61" +
    "\006\uff61\007\uff61\010\uff61\011\uff61\012\uff61\013\uff61\015" +
    "\uff61\016\uff61\001\002\000\042\005\005\006\017\007\007" +
    "\010\011\011\023\012\027\013\016\017\u01a2\020\202\021" +
    "\221\022\210\024\224\025\205\026\212\027\207\033\211" +
    "\001\002\000\014\003\334\033\331\074\332\075\335\076" +
    "\336\001\002\000\004\072\u01a4\001\002\000\004\066\u01a5" +
    "\001\002\000\004\072\u01a6\001\002\000\026\002\uff64\005" +
    "\uff64\006\uff64\007\uff64\010\uff64\011\uff64\012\uff64\013\uff64" +
    "\015\uff64\016\uff64\001\002\000\042\005\uff6a\006\uff6a\007" +
    "\uff6a\010\uff6a\011\uff6a\012\uff6a\013\uff6a\017\uff6a\020\uff6a" +
    "\021\uff6a\022\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a\033" +
    "\uff6a\001\002\000\042\005\005\006\017\007\007\010\011" +
    "\011\023\012\027\013\016\017\u01a9\020\202\021\221\022" +
    "\210\024\224\025\205\026\212\027\207\033\211\001\002" +
    "\000\014\003\334\033\331\074\332\075\335\076\336\001" +
    "\002\000\004\072\u01ab\001\002\000\004\066\u01ac\001\002" +
    "\000\004\072\u01ad\001\002\000\026\002\uff65\005\uff65\006" +
    "\uff65\007\uff65\010\uff65\011\uff65\012\uff65\013\uff65\015\uff65" +
    "\016\uff65\001\002\000\006\051\174\062\u01af\001\002\000" +
    "\004\065\u01b0\001\002\000\042\005\uff6a\006\uff6a\007\uff6a" +
    "\010\uff6a\011\uff6a\012\uff6a\013\uff6a\017\uff6a\020\uff6a\021" +
    "\uff6a\022\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a\033\uff6a" +
    "\001\002\000\042\005\005\006\017\007\007\010\011\011" +
    "\023\012\027\013\016\017\u01b2\020\202\021\221\022\210" +
    "\024\224\025\205\026\212\027\207\033\211\001\002\000" +
    "\014\003\334\033\331\074\332\075\335\076\336\001\002" +
    "\000\004\072\u01b4\001\002\000\004\066\u01b5\001\002\000" +
    "\004\072\u01b6\001\002\000\026\002\uff66\005\uff66\006\uff66" +
    "\007\uff66\010\uff66\011\uff66\012\uff66\013\uff66\015\uff66\016" +
    "\uff66\001\002\000\022\003\167\005\162\006\165\007\173" +
    "\010\171\011\163\012\172\013\166\001\002\000\006\051" +
    "\174\062\u01b9\001\002\000\004\065\u01ba\001\002\000\042" +
    "\005\uff6a\006\uff6a\007\uff6a\010\uff6a\011\uff6a\012\uff6a\013" +
    "\uff6a\017\uff6a\020\uff6a\021\uff6a\022\uff6a\024\uff6a\025\uff6a" +
    "\026\uff6a\027\uff6a\033\uff6a\001\002\000\042\005\005\006" +
    "\017\007\007\010\011\011\023\012\027\013\016\017\u01bc" +
    "\020\202\021\221\022\210\024\224\025\205\026\212\027" +
    "\207\033\211\001\002\000\014\003\334\033\331\074\332" +
    "\075\335\076\336\001\002\000\004\072\u01be\001\002\000" +
    "\004\066\u01bf\001\002\000\004\072\u01c0\001\002\000\026" +
    "\002\uff67\005\uff67\006\uff67\007\uff67\010\uff67\011\uff67\012" +
    "\uff67\013\uff67\015\uff67\016\uff67\001\002\000\010\003\uffc7" +
    "\051\uffc7\072\uffc7\001\002\000\006\003\u016a\033\u0168\001" +
    "\002\000\062\002\uffee\003\uffee\005\uffee\006\uffee\007\uffee" +
    "\010\uffee\011\uffee\012\uffee\013\uffee\015\uffee\016\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\024\uffee\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\066\uffee\001" +
    "\002\000\062\002\uffef\003\uffef\005\uffef\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\013\uffef\015\uffef\016\uffef\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\066\uffef\001" +
    "\002\000\010\003\uffad\051\uffad\072\uffad\001\002\000\010" +
    "\003\uffd9\051\uffd9\072\uffd9\001\002\000\006\003\u01cb\033" +
    "\u01ca\001\002\000\062\002\ufffb\003\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\015\ufffb\016" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\024\ufffb\025\ufffb" +
    "\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\066" +
    "\ufffb\001\002\000\062\002\ufffa\003\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\066" +
    "\ufffa\001\002\000\012\003\uffe7\043\u01ce\051\uffe7\072\uffe7" +
    "\001\002\000\012\003\uffe7\043\u01ce\051\uffe7\072\uffe7\001" +
    "\002\000\010\003\uffed\051\uffed\072\uffed\001\002\000\010" +
    "\003\uffea\051\uffea\072\uffea\001\002\000\006\003\u01d0\074" +
    "\u01cf\001\002\000\010\003\uffe9\051\uffe9\072\uffe9\001\002" +
    "\000\010\003\uffe8\051\uffe8\072\uffe8\001\002\000\010\003" +
    "\uffeb\051\uffeb\072\uffeb\001\002\000\010\003\uffec\051\uffec" +
    "\072\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d0\000\032\002\027\003\014\004\005\012\023\017" +
    "\013\025\007\031\021\034\025\037\017\074\003\100\024" +
    "\122\012\001\001\000\002\001\001\000\004\005\u01d1\001" +
    "\001\000\002\001\001\000\004\013\u01c5\001\001\000\002" +
    "\001\001\000\004\035\u01c0\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\u0168\001\001\000\004\032\u0166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\035\001\001\000\030\003\014\004\005" +
    "\012\023\017\013\025\007\031\021\034\025\037\017\074" +
    "\003\100\024\122\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\052\001\001\000\004\041\047\001" +
    "\001\000\006\022\037\024\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\110\001\001\000\004" +
    "\036\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\064\001\001\000\004\015\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\122" +
    "\001\001\000\004\014\117\001\001\000\002\001\001\000" +
    "\004\015\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\131\001\001\000\004\021\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\154" +
    "\001\001\000\004\033\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\143\001\001\000\004\010\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\075\u0151\076\163\001\001\000\006\075\167\076\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\076\u014e\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\u0143\001\001\000\004\043\200" +
    "\001\001\000\042\003\212\004\005\012\023\017\013\025" +
    "\007\031\021\034\025\037\017\053\214\057\215\060\213" +
    "\061\221\065\222\107\216\110\202\111\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\077\u0129\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\077\332\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\226\001\001\000\004\064\304\001\001" +
    "\000\002\001\001\000\004\064\301\001\001\000\006\045" +
    "\237\047\233\001\001\000\004\052\276\001\001\000\006" +
    "\050\265\052\263\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\240" +
    "\001\001\000\004\047\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\254\001\001\000\042\003\212\004\005\012\023\017" +
    "\013\025\007\031\021\034\025\037\017\053\214\057\215" +
    "\060\213\061\221\065\222\107\216\110\202\111\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\274\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\277\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\112\325\115\313\001\001\000\006\112\312\115\313" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\113\315\001\001\000\004" +
    "\115\316\001\001\000\002\001\001\000\004\113\317\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\341\001\001\000\042\003" +
    "\212\004\005\012\023\017\013\025\007\031\021\034\025" +
    "\037\017\053\214\057\215\060\213\061\221\065\222\107" +
    "\216\110\202\111\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\045\345\047\233\001\001\000\004\046" +
    "\240\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\101\361\102\353\103\360\001\001\000\002\001\001\000" +
    "\006\102\377\103\360\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\101\375\102\353\103\360\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\102\363\103\360\001\001\000\002\001" +
    "\001\000\004\103\367\001\001\000\004\103\366\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\102\374\103" +
    "\360\001\001\000\006\102\373\103\360\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\045\u0101" +
    "\047\233\001\001\000\004\046\240\001\001\000\002\001" +
    "\001\000\004\043\u0104\001\001\000\042\003\212\004\005" +
    "\012\023\017\013\025\007\031\021\034\025\037\017\053" +
    "\214\057\215\060\213\061\221\065\222\107\216\110\202" +
    "\111\203\001\001\000\004\054\u0106\001\001\000\002\001" +
    "\001\000\004\056\u0108\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\045\u010b\047\233\001\001\000\004\046" +
    "\240\001\001\000\002\001\001\000\004\043\u010e\001\001" +
    "\000\042\003\212\004\005\012\023\017\013\025\007\031" +
    "\021\034\025\037\017\053\214\057\215\060\213\061\221" +
    "\065\222\107\216\110\202\111\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\066\u0114\067\u0115\070\u0116\001\001\000\004\073" +
    "\u0124\001\001\000\004\070\u0122\001\001\000\002\001\001" +
    "\000\004\071\u0118\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\u011e\001\001\000\044\003\212\004\005\012" +
    "\023\017\013\025\007\031\021\034\025\037\017\053\214" +
    "\057\215\060\213\061\221\065\222\072\u0120\107\216\110" +
    "\202\111\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\u0127\001\001" +
    "\000\044\003\212\004\005\012\023\017\013\025\007\031" +
    "\021\034\025\037\017\053\214\057\215\060\213\061\221" +
    "\065\222\072\u0128\107\216\110\202\111\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\045\u0130\047\233\001\001\000\004\046\240" +
    "\001\001\000\002\001\001\000\004\043\u0133\001\001\000" +
    "\042\003\212\004\005\012\023\017\013\025\007\031\021" +
    "\034\025\037\017\053\214\057\215\060\213\061\221\065" +
    "\222\107\216\110\202\111\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\212\004\005\012\023\017" +
    "\013\025\007\031\021\034\025\037\017\053\214\057\215" +
    "\060\213\061\221\065\222\107\216\110\202\111\203\001" +
    "\001\000\004\077\u0145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\u0149\001\001\000" +
    "\042\003\212\004\005\012\023\017\013\025\007\031\021" +
    "\034\025\037\017\053\214\057\215\060\213\061\221\065" +
    "\222\107\216\110\202\111\203\001\001\000\004\077\u014b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\u0154\001" +
    "\001\000\042\003\212\004\005\012\023\017\013\025\007" +
    "\031\021\034\025\037\017\053\214\057\215\060\213\061" +
    "\221\065\222\107\216\110\202\111\203\001\001\000\004" +
    "\077\u0156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\075\u015a\076\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\u015d\001\001\000" +
    "\042\003\212\004\005\012\023\017\013\025\007\031\021" +
    "\034\025\037\017\053\214\057\215\060\213\061\221\065" +
    "\222\107\216\110\202\111\203\001\001\000\004\077\u015f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\u0165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\u0174\001\001\000\002\001\001\000\004\027\u016a\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\u016e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u0178\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\075\u017d\076\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\u0180\001\001\000\042\003\212\004\005" +
    "\012\023\017\013\025\007\031\021\034\025\037\017\053" +
    "\214\057\215\060\213\061\221\065\222\107\216\110\202" +
    "\111\203\001\001\000\004\077\u0182\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\075\u01ad\076" +
    "\163\001\001\000\006\075\u018a\076\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\u01a0\001\001\000\004\043\u018f\001\001\000\042\003\212" +
    "\004\005\012\023\017\013\025\007\031\021\034\025\037" +
    "\017\053\214\057\215\060\213\061\221\065\222\107\216" +
    "\110\202\111\203\001\001\000\004\077\u0196\001\001\000" +
    "\004\077\u0192\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\212" +
    "\004\005\012\023\017\013\025\007\031\021\034\025\037" +
    "\017\053\214\057\215\060\213\061\221\065\222\107\216" +
    "\110\202\111\203\001\001\000\004\077\u01a2\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\u01a7\001\001\000\042\003\212\004" +
    "\005\012\023\017\013\025\007\031\021\034\025\037\017" +
    "\053\214\057\215\060\213\061\221\065\222\107\216\110" +
    "\202\111\203\001\001\000\004\077\u01a9\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\u01b0" +
    "\001\001\000\042\003\212\004\005\012\023\017\013\025" +
    "\007\031\021\034\025\037\017\053\214\057\215\060\213" +
    "\061\221\065\222\107\216\110\202\111\203\001\001\000" +
    "\004\077\u01b2\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\075\u01b7\076" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\u01ba\001\001\000\042\003\212\004\005\012\023\017" +
    "\013\025\007\031\021\034\025\037\017\053\214\057\215" +
    "\060\213\061\221\065\222\107\216\110\202\111\203\001" +
    "\001\000\004\077\u01bc\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u01c4\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\u01cb\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u01d0\001\001\000\004\006\u01cc\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<MyError> listaErrorSintacticos = new LinkedList<MyError>();

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
        MyError datos = new MyError(lexema, fila, columna, "Error Sintactico", "Caracter no esperado");
        listaErrorSintacticos.add(datos);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        MyError datos = new MyError(lexema, fila, columna, "Error Sintactico", "Simbolo no esperado, Panic Mode");
        listaErrorSintacticos.add(datos);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INICIO linea 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= linea 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // linea ::= dec_function 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("linea",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // linea ::= dec_main 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("linea",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // linea ::= declaracion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("linea",80, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= asignacionInteger DASH 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = (String)a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= asignacionInteger error 
            {
              String RESULT =null;
		 System.out.println("Expected - (dash)."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= asignacionIntegerPtr DASH 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= asignacionIntegerPtr error 
            {
              String RESULT =null;
		 System.out.println("Expected - (dash)."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= asignacionChar DASH 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= asignacionChar error 
            {
              String RESULT =null;
		 System.out.println("Expected - (dash)."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= asignacionCharPtr DASH 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= asignacionCharPtr error 
            {
              String RESULT =null;
		 System.out.println("Expected - (dash)."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion ::= asignacionBool DASH 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion ::= asignacionBool error 
            {
              String RESULT =null;
		 System.out.println("Expected - (dash)."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion ::= asignacionBoolPtr DASH 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion ::= asignacionBoolPtr error 
            {
              String RESULT =null;
		 System.out.println("Expected - (dash)."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion ::= asignacionString DASH 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion ::= asignacionString error 
            {
              String RESULT =null;
		 System.out.println("Expected - (dash)."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // asignacionInteger ::= asignacionInteger COMMA instanciacionInteger 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionInteger",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // asignacionInteger ::= INT instanciacionInteger 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionInteger",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instanciacionInteger ::= ID iniciacionInteger 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionInteger",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instanciacionInteger ::= error iniciacionInteger 
            {
              String RESULT =null;
		 System.out.println("Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionInteger",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // iniciacionInteger ::= ASSIGN INTEGER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionInteger",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // iniciacionInteger ::= ASSIGN error 
            {
              String RESULT =null;
		 System.out.println("Expected a number."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionInteger",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // iniciacionInteger ::= 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionInteger",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // integerLista ::= INTEGER 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("integerLista",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // integerLista ::= integerLista COMMA INTEGER 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("integerLista",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // integerLista ::= integerLista COMMA error 
            {
              String RESULT =null;
		 System.out.println("Expected a number."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("integerLista",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // integerLista ::= error 
            {
              String RESULT =null;
		 System.out.println("Expected a number."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("integerLista",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignacionIntegerPtr ::= asignacionIntegerPtr COMMA instanciacionIntegerPtr 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionIntegerPtr",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // asignacionIntegerPtr ::= INTPTR instanciacionIntegerPtr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionIntegerPtr",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instanciacionIntegerPtr ::= ID iniciacionIntegerPtr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntegerPtr",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instanciacionIntegerPtr ::= error iniciacionIntegerPtr 
            {
              Object RESULT =null;
		 System.out.println("Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntegerPtr",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // iniciacionIntegerPtr ::= ASSIGN instanciacionIntPtr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionIntegerPtr",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // iniciacionIntegerPtr ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionIntegerPtr",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instanciacionIntPtr ::= LBRAC RBRAC 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntPtr",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instanciacionIntPtr ::= LBRAC integerLista RBRAC 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntPtr",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacionChar ::= asignacionChar COMMA instanciacionChar 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionChar",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asignacionChar ::= CHAR instanciacionChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionChar",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instanciacionChar ::= ID iniciacionChar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionChar",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instanciacionChar ::= error iniciacionChar 
            {
              Object RESULT =null;
		 System.out.println("Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionChar",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // iniciacionChar ::= ASSIGN charComillas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionChar",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // iniciacionChar ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionChar",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // charComillas ::= SIMCOM LETTER SIMCOM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // charComillas ::= error LETTER SIMCOM 
            {
              Object RESULT =null;
		 System.out.println("Expected a '.'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // charComillas ::= SIMCOM LETTER error 
            {
              Object RESULT =null;
		 System.out.println("Expected a '.'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // charComillas ::= SIMCOM error SIMCOM 
            {
              Object RESULT =null;
		 System.out.println("Expected a char."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // charComillas ::= DOBCOM LETTER DOBCOM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // charComillas ::= error LETTER DOBCOM 
            {
              Object RESULT =null;
		 System.out.println("Expected a '.'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // charComillas ::= DOBCOM LETTER error 
            {
              Object RESULT =null;
		 System.out.println("Expected a '.'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // charComillas ::= DOBCOM error DOBCOM 
            {
              Object RESULT =null;
		 System.out.println("Expected a char."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charComillas",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // charLista ::= LETTER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charLista",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // charLista ::= charLista COMMA LETTER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charLista",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // charLista ::= charLista COMMA error 
            {
              Object RESULT =null;
		 System.out.println("Expected a char."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charLista",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // charLista ::= error 
            {
              Object RESULT =null;
		 System.out.println("Expected a char."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("charLista",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asignacionCharPtr ::= asignacionCharPtr COMMA instanciacionCharPointer 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionCharPtr",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asignacionCharPtr ::= CHARPTR instanciacionCharPointer 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionCharPtr",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instanciacionCharPointer ::= ID iniciacionCharPtr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionCharPointer",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instanciacionCharPointer ::= error iniciacionCharPtr 
            {
              Object RESULT =null;
		 System.out.println("Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionCharPointer",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // iniciacionCharPtr ::= ASSIGN instanciacionCharPtr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionCharPtr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // iniciacionCharPtr ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionCharPtr",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instanciacionCharPtr ::= LBRAC RBRAC 
            {
              String RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionCharPtr",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instanciacionCharPtr ::= LBRAC charComillas RBRAC 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionCharPtr",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // asignacionBool ::= asignacionBool COMMA instanciacionBool 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionBool",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // asignacionBool ::= BOOL instanciacionBool 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionBool",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // instanciacionBool ::= ID iniciacionBool 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBool",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // instanciacionBool ::= error iniciacionBool 
            {
              Object RESULT =null;
		 System.out.println("Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBool",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // iniciacionBool ::= ASSIGN bool 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionBool",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // iniciacionBool ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionBool",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bool ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bool",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bool ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bool",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bool ::= error 
            {
              Object RESULT =null;
		 System.out.println("Expected either true/false."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bool",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // asignacionBoolPtr ::= asignacionBoolPtr COMMA instanciacionBoolPtr 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionBoolPtr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // asignacionBoolPtr ::= BOOLPTR instanciacionBoolPtr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionBoolPtr",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // instanciacionBoolPtr ::= ID iniciacionBoolPtr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBoolPtr",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // instanciacionBoolPtr ::= error iniciacionBoolPtr 
            {
              Object RESULT =null;
		 System.out.println("Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBoolPtr",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // iniciacionBoolPtr ::= ASSIGN instanciacionBoolPtr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionBoolPtr",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // iniciacionBoolPtr ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionBoolPtr",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // instanciacionBoolPtr ::= LBRAC RBRAC 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBoolPtr",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // instanciacionBoolPtr ::= LBRAC boolLista RBRAC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionBoolPtr",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // boolLista ::= bool 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("boolLista",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // boolLista ::= boolLista COMMA bool 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("boolLista",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // asignacionString ::= asignacionString COMMA instanciacionString 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionString",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // asignacionString ::= STRING instanciacionString 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacionString",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // instanciacionString ::= ID iniciacionString 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionString",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // instanciacionString ::= error iniciacionString 
            {
              Object RESULT =null;
		 System.out.println("Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionString",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // iniciacionString ::= ASSIGN DOBCOM contenidoString DOBCOM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionString",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // iniciacionString ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciacionString",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // contenidoString ::= contenidoString ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidoString",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // contenidoString ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidoString",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // contenidoString ::= contenidoString COMMA error 
            {
              Object RESULT =null;
		 System.out.println("Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidoString",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // contenidoString ::= error 
            {
              Object RESULT =null;
		 System.out.println("Expected an id."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("contenidoString",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // conditionalExpr ::= conditionalExpr andORor logicalExpr 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("conditionalExpr",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // conditionalExpr ::= logicalExpr 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("conditionalExpr",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // conditionalExpr ::= conditionalExpr andORor LPAR logicalExpr RPAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("conditionalExpr",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // andORor ::= AND_OP 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("andORor",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // andORor ::= OR_OP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("andORor",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // andORor ::= error 
            {
              Object RESULT =null;
		 System.out.println("Unknown character."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("andORor",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // logicalExpr ::= ID logicalExprComp 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExpr",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // logicalExpr ::= INTEGER comparator logicalExprID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExpr",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // logicalExpr ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExpr",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // logicalExpr ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExpr",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // logicalExpr ::= error 
            {
              Object RESULT =null;
		 System.out.println("Unexpected character."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExpr",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // logicalExprComp ::= comparator logicalExprID 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExprComp",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // logicalExprComp ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExprComp",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // logicalExprID ::= ID 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExprID",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // logicalExprID ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExprID",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // logicalExprID ::= error 
            {
              Object RESULT =null;
		 System.out.println("Unexpected character."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logicalExprID",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // comparator ::= EQUAL_OP 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // comparator ::= LESSTHAN_OP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // comparator ::= GREATERTHAN_OP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // comparator ::= LESSEQUAL_OP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // comparator ::= GREATEREQUAL_OP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // comparator ::= NOTEQUAL_OP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comparator",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // if ::= IF LPAR conditionalExpr RPAR LKEY body RKEY else 
            {
              Object RESULT =null;
		 RESULT = "if"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // else ::= else ELSE ifSinElse 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // else ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ifSinElse ::= IF LPAR conditionalExpr RPAR LKEY body RKEY 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSinElse",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // while ::= WHILE LPAR conditionalExpr RPAR LKEY body RKEY 
            {
              Object RESULT =null;
		 RESULT = "while"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("while",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // doWhile ::= DO LKEY body RKEY WHILE LPAR conditionalExpr RPAR DASH 
            {
              Object RESULT =null;
		 RESULT = "do while"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("doWhile",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // for ::= FOR LPAR declaracionFor SEMICOLON conditionalExpr SEMICOLON ID autoAssign RPAR LKEY body RKEY 
            {
              Object RESULT =null;
		 RESULT = "for"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // autoAssign ::= ADDFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("autoAssign",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // autoAssign ::= MINUSFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("autoAssign",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // autoAssign ::= MULTFOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("autoAssign",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // declaracionFor ::= declaracionFor COMMA instanciacionIntegerFor 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionFor",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // declaracionFor ::= INT instanciacionIntegerFor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionFor",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // declaracionFor ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionFor",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // instanciacionIntegerFor ::= ID ASSIGN INTEGER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instanciacionIntegerFor",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // switch ::= SWITCH LPAR ID RPAR LKEY caseExist default RKEY 
            {
              Object RESULT =null;
		 RESULT = "switch"; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("switch",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // caseExist ::= case 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caseExist",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // caseExist ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caseExist",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // case ::= case declaracionCase 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("case",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // case ::= declaracionCase 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("case",53, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // declaracionCase ::= CASE varCase COLON body caseBreak 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionCase",54, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // varCase ::= INTEGER 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varCase",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // varCase ::= SIMCOM LETTER SIMCOM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varCase",55, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // caseBreak ::= BREAK DASH 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caseBreak",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // caseBreak ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("caseBreak",56, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // default ::= DEFAULT COLON body caseBreak 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("default",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // default ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("default",57, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // body ::= body declaracion 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // body ::= body if 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null) RESULT = (String)a + ' ' + (String)b; else RESULT = (String)a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // body ::= body while 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null) RESULT = (String)a + ' ' + (String)b; else RESULT = (String)a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // body ::= body doWhile 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null) RESULT = (String)a + ' ' + (String)b; else RESULT = (String)a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // body ::= body for 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null) RESULT = (String)a + ' ' + (String)b; else RESULT = (String)a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // body ::= body switch 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null) RESULT = (String)a + ' ' + (String)b; else RESULT = (String)a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // body ::= body assign_var 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null) RESULT = (String)a + ' ' + (String)b; else RESULT = (String)a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // body ::= body entry 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null) RESULT = (String)a + ' ' + (String)b; else RESULT = (String)a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // body ::= body salida 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b != null) RESULT = (String)a + ' ' + (String)b; else RESULT = (String)a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // body ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // dec_function ::= FUNCTION ID ARROW LPAR parameters RPAR LKEY body RETURN varRet DASH RKEY DASH 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_function",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // dec_function ::= FUNCTION error ARROW LPAR parameters RPAR LKEY body RETURN varRet DASH RKEY DASH 
            {
              Object RESULT =null;
		 System.out.println("Expected function name"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_function",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // dec_function ::= FUNCTION ID error LPAR parameters RPAR LKEY body RETURN varRet DASH RKEY DASH 
            {
              Object RESULT =null;
		 System.out.println("Expected '=>'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_function",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // dec_function ::= FUNCTION ID ARROW error parameters RPAR LKEY body RETURN varRet DASH RKEY DASH 
            {
              Object RESULT =null;
		 System.out.println("Expected '('"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_function",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // dec_function ::= FUNCTION ID ARROW LPAR parameters error LKEY body RETURN varRet DASH RKEY DASH 
            {
              Object RESULT =null;
		 System.out.println("Expected ')'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_function",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // dec_function ::= FUNCTION ID ARROW LPAR parameters RPAR error body RETURN varRet DASH RKEY DASH 
            {
              Object RESULT =null;
		 System.out.println("Expected '{'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_function",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // dec_function ::= FUNCTION ID ARROW LPAR parameters RPAR LKEY body error varRet DASH RKEY DASH 
            {
              Object RESULT =null;
		 System.out.println("Missing return statement"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_function",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // dec_function ::= FUNCTION ID ARROW LPAR parameters RPAR LKEY body RETURN varRet error RKEY DASH 
            {
              Object RESULT =null;
		 System.out.println("Expected '-' at end of line"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_function",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // dec_function ::= FUNCTION ID ARROW LPAR parameters RPAR LKEY body RETURN varRet DASH error DASH 
            {
              Object RESULT =null;
		 System.out.println("Expected ')'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_function",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // dec_function ::= FUNCTION ID ARROW LPAR parameters RPAR LKEY body RETURN varRet DASH RKEY error 
            {
              Object RESULT =null;
		 System.out.println("Expected '-' at end of line"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_function",58, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // func ::= ID ARROW LPAR ids RPAR DASH 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("func",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // func ::= ID error LPAR ids RPAR DASH 
            {
              Object RESULT =null;
		 System.out.println("Expected '=>'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("func",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // func ::= ID ARROW error ids RPAR DASH 
            {
              Object RESULT =null;
		 System.out.println("Expected '('"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("func",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // func ::= ID ARROW LPAR ids error DASH 
            {
              Object RESULT =null;
		 System.out.println("Expected ')'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("func",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // func ::= ID ARROW LPAR ids RPAR error 
            {
              Object RESULT =null;
		 System.out.println("Expected '-' at end of line"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("func",68, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // dec_main ::= MAIN ARROW LPAR parameters RPAR LKEY body RETURN varRet DASH RKEY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_main",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // dec_main ::= MAIN error LPAR parameters RPAR LKEY body RETURN varRet DASH RKEY 
            {
              Object RESULT =null;
		 System.out.println("Expected '=>'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_main",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // dec_main ::= MAIN ARROW error parameters RPAR LKEY body RETURN varRet DASH RKEY 
            {
              Object RESULT =null;
		 System.out.println("Expected '('"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_main",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // dec_main ::= MAIN ARROW LPAR parameters error LKEY body RETURN varRet DASH RKEY 
            {
              Object RESULT =null;
		 System.out.println("Expected ')'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_main",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // dec_main ::= MAIN ARROW LPAR parameters RPAR error body RETURN varRet DASH RKEY 
            {
              Object RESULT =null;
		 System.out.println("Expected '{'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_main",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // dec_main ::= MAIN ARROW LPAR parameters RPAR LKEY body error varRet DASH RKEY 
            {
              Object RESULT =null;
		 System.out.println("Missing return statement"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_main",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // dec_main ::= MAIN ARROW LPAR parameters RPAR LKEY body RETURN varRet error RKEY 
            {
              Object RESULT =null;
		 System.out.println("Expected '-' at end of line"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_main",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // dec_main ::= MAIN ARROW LPAR parameters RPAR LKEY body RETURN varRet DASH error 
            {
              Object RESULT =null;
		 System.out.println("Expected ')'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dec_main",62, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // parameters ::= parameters COMMA params_type ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parameters",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // parameters ::= params_type ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parameters",59, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ids ::= moreIds ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ids",78, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // moreIds ::= moreIds ID COMMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("moreIds",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // moreIds ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("moreIds",79, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // params_type ::= INT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // params_type ::= INTPTR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // params_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // params_type ::= CHARPTR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // params_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // params_type ::= BOOLPTR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // params_type ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // params_type ::= error 
            {
              Object RESULT =null;
		 System.out.println("Expected type"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_type",60, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // varRet ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varRet",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // varRet ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varRet",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // varRet ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varRet",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // varRet ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varRet",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // varRet ::= error 
            {
              Object RESULT =null;
		 System.out.println("Expected return variable"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("varRet",61, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // assign_var ::= ID ASSIGN arithmetic_exp DASH 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("assign_var",69, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // arithmetic_exp ::= term 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_exp",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // arithmetic_exp ::= arithmetic_exp ADD_OP term 
            {
              Object RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object se1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_exp",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // arithmetic_exp ::= arithmetic_exp MINUS_OP term 
            {
              Object RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object se1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int minleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_exp",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // arithmetic_exp ::= ADD_OP term 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_exp",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // arithmetic_exp ::= MINUS_OP term 
            {
              Object RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("arithmetic_exp",63, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // term ::= factor 
            {
              Object RESULT =null;
		int factleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("term",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // term ::= term MULT_OP factor 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int timleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int timright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object tim = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int factleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("term",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // term ::= term DIV_OP factor 
            {
              Object RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object term = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int divleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int divright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int factleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int factright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object fact = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("term",64, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // factor ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // factor ::= ID 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // factor ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // factor ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // factor ::= LPAR arithmetic_exp RPAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("factor",65, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // entry ::= READ LPAR ID RPAR DASH 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entry",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // entry ::= READ error ID RPAR DASH 
            {
              Object RESULT =null;
		 System.out.println("Expected '('"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entry",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // entry ::= READ LPAR error RPAR DASH 
            {
              Object RESULT =null;
		 System.out.println("Expected in-variable"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entry",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // entry ::= READ LPAR ID error DASH 
            {
              Object RESULT =null;
		 System.out.println("Expected ')'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entry",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // entry ::= READ LPAR ID RPAR error 
            {
              Object RESULT =null;
		 System.out.println("Expected '-' at end of line"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entry",70, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // salida ::= PRINT LPAR content_print RPAR DASH 
            {
              Object RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("salida",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // salida ::= PRINT error content_print RPAR DASH 
            {
              Object RESULT =null;
		 System.out.println("Expected '('"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("salida",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // salida ::= PRINT LPAR content_print error DASH 
            {
              Object RESULT =null;
		 System.out.println("Expected ')'"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("salida",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // salida ::= PRINT LPAR content_print RPAR error 
            {
              Object RESULT =null;
		 System.out.println("Expected '-' at end of line"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("salida",71, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // content_print ::= id_text more_content 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object mc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("content_print",72, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // more_content ::= ADD_OP id_text more_content 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object mc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("more_content",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // more_content ::= 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("more_content",73, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // id_text ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("id_text",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // id_text ::= TEXT 
            {
              Object RESULT =null;
		int txleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("id_text",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // id_text ::= error 
            {
              Object RESULT =null;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("id_text",75, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
