/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dash;

import Nodos.Cuadruplo;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

import Nodos.Nodo;
import Nodos.Tabla;
import dash.Analizador_Lexico;
import dash.Sintactico;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
/**
 *
 * @author dariovillalta
 */
public class Compilador extends javax.swing.JFrame {

    public Nodo raiz;
    public Compilador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ta_codigo = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        ta_result = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        ta_codigo.setColumns(20);
        ta_codigo.setRows(5);
        jScrollPane1.setViewportView(ta_codigo);

        ta_result.setColumns(20);
        ta_result.setRows(5);
        jScrollPane2.setViewportView(ta_result);

        jLabel1.setText("Resultado:");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel3.setText("DASH");

        jButton1.setText("Calcular");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        tree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane3.setViewportView(tree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel3))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(134, 134, 134))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addGap(2, 2, 2)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        try {
            Image image = ImageIO.read(new File("./img/dash.png"));
            Image newimg = image.getScaledInstance(60, 50,  java.awt.Image.SCALE_SMOOTH);
            ImageIcon icon = new ImageIcon(newimg); 
            jLabel2.setIcon(icon);
        } catch (IOException ex) {
            Logger.getLogger(Compilador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowActivated

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        String datos = "";
        BufferedReader br;
        try{
            if (ta_codigo.getText().length() > 0) {
                datos = ta_codigo.getText();
            } else{
                br = new BufferedReader(new FileReader("file.txt"));
                
                
                StringBuilder sb = new StringBuilder();
                String line = br.readLine();

                while (line != null) {
                    sb.append(line);
                    sb.append(System.lineSeparator());
                    line = br.readLine();
                }
                datos = sb.toString();
            }
            
            Analizador_Lexico lexico = new Analizador_Lexico(new BufferedReader(new StringReader(datos)));
            Sintactico sintactico = new Sintactico(lexico);
            sintactico.parse();
            //ta_result.setText(sintactico.parse().toString());
            DefaultTreeModel model = (DefaultTreeModel) tree.getModel();
            DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
            DefaultMutableTreeNode nodoraiz = new DefaultMutableTreeNode(sintactico.raiz.getTipo());
            root.add(nodoraiz);
            System.out.println("Antes de Print");
            print(sintactico.raiz, nodoraiz);
            
            System.out.println("I\tID\tTipo\t\t\tAmbito\t\t\tProfundidad");
            for (int i = 0; i < sintactico.tabla.size(); i++) {
                System.out.println( i + "\t" + ((Tabla)sintactico.tabla.get(i)).getId() + "\t" + ((Tabla)sintactico.tabla.get(i)).getTipo() + "\t\t\t" + ((Tabla)sintactico.tabla.get(i)).getAmbito() + "\t\t\t" + ((Tabla)sintactico.tabla.get(i)).getProfundidad() );
            }
            System.out.println("");
            model.reload();
            tabla = sintactico.tabla;
            ambito = "global";
            profundidad = 0;
            checkTypes(sintactico.raiz, ambito);
            
            //
            //falta tipos en ifs, fors, switch ect
            //
            
            System.out.println("");
            System.out.println("");
            genCuadruplos(sintactico.raiz);
            System.out.println("\n" + " ---------------- CUADRUPLOS ---------------------- \n");
            for(int i = 0; i < cuads.size(); i++){
                System.out.println("\u001B[34m" + cuads.get(i).toString());
            }
            
            System.out.println("");
            
        } catch(Exception e){
            //
        }
        //ta_result.setText(lexico.texto.toString());
    }//GEN-LAST:event_jButton1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Compilador().setVisible(true);
            }
        });
    }
    
    ArrayList<Tabla> tabla;
    String ambito;
    int profundidad;
    ArrayList<Cuadruplo> cuads = new ArrayList();
    int contTemp = 0;
    int contEtiq = 0;
    boolean genCuadruplosEsAND = false;
    ArrayList<Integer> arregloEtiquetas = new ArrayList(); //cuenta cuantos nodos hojas hay por cada ||
    int posArregloEtiquetas = 0;
    int contadorArregloEtiquetas = 0;
    String padreEtiq = "";
    boolean generarOR = false;
    int banderaEtiqSalida = 0;
    
    private void print(Nodo nodo, DefaultMutableTreeNode arbolnodo){
        //System.out.print("\t");
        //System.out.println(nodo.getTipo());
        for (int i = 0; i < nodo.getHijos().size(); i++) {
            DefaultMutableTreeNode nodohijo = new DefaultMutableTreeNode(nodo.getHijos().get(i).getTipo());
            arbolnodo.add(nodohijo);
            print(nodo.getHijos().get(i), nodohijo);
        }
    }
    
    private void checkTypes(Nodo nodo, String ambito){
        for (int i = 0; i < nodo.getHijos().size(); i++) {
            Boolean entro = false;
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("funcion") || ((Nodo)nodo.getHijos().get(i)).getTipo().equals("main") ){
                profundidad = 0;
                if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("funcion") )
                    ambito+="."+((Nodo)nodo.getHijos().get(i)).getValue();
                else
                    ambito+=".main";
                entro = true;
                checkFunRet((Nodo)nodo.getHijos().get(i), ambito, profundidad);
                //checkFunParams((Nodo)nodo.getHijos().get(i));
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("if")){
                ambito+=".if";
                profundidad++;
                entro = true;
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("while")){
                ambito+=".while";
                profundidad++;
                entro = true;
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("dowhile")){
                ambito+=".dowhile";
                profundidad++;
                entro = true;
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("for")){
                ambito+=".for";
                profundidad++;
                entro = true;
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("switch")){
                ambito+=".switch";
                profundidad++;
                entro = true;
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("aritmetica")){
                checkAritmetica((Nodo)nodo.getHijos().get(i), ambito, profundidad);
            }
            //ambito = quitarAmbito(ambito);
            checkTypes(nodo.getHijos().get(i), ambito);
            if(entro)
                ambito = quitarAmbito(ambito);
        }
    }
    
    private void checkFunRet(Nodo nodo, String ambito, int profundidad){
        String tipoRetornoTabla = getTipoVar(nodo.getHijos().get(nodo.getHijos().size()-1).getValue(), ambito, profundidad);
        if(!isNumeric(nodo.getHijos().get(nodo.getHijos().size()-1).getValue()))
            if( tipoRetornoTabla.length() == 0 )
                System.out.println("\u001B[31m" + "La variable de retorno de la funcion "+nodo.getValue()+" no ha sido declarada.");
    }
    
    private void checkAritmetica(Nodo nodo, String ambito, int profundidad){
        String[] partsAsignacion = nodo.getValue().split("=");
        String[] partsAritmetica = partsAsignacion[partsAsignacion.length-1].split("\\+|-|\\*|\\/");
        String tipoAsignado = getTipoVar(partsAsignacion[0], ambito, profundidad);
        Boolean[] probarParams = new Boolean[partsAritmetica.length];
        Arrays.fill(probarParams, true);
        ArrayList<String> tipoAsignadores = new ArrayList<String>();
        for (int i = 0; i < partsAritmetica.length; i++) {
            if(partsAritmetica[i].contains("("))
                tipoAsignadores.add(getTipoVar(partsAritmetica[i].split(("\\("))[0], ambito, profundidad));
            else
                tipoAsignadores.add(getTipoVar(partsAritmetica[i], ambito, profundidad));
        }
        if( tipoAsignado.length() == 0 )
            System.out.println("\u001B[31m" + "La variable de asignacion "+partsAsignacion[0]+" no ha sido declarada.");
        for (int i = 0; i < tipoAsignadores.size(); i++) {
            if(tipoAsignadores.get(i).equals("")){
                if(partsAritmetica[i].contains("(")){
                    System.out.println("\u001B[31m" + "La funcion "+partsAritmetica[i]+" no ha sido declarada.");
                    probarParams[i] =  false;
                } else if(!isNumeric(partsAritmetica[i])){
                    System.out.println("\u001B[31m" + "La variable "+partsAritmetica[i]+" no ha sido declarada.");
                    probarParams[i] =  false;
                }
            } else if(!tipoAsignadores.get(i).equals("int") ){
                if(partsAritmetica[i].contains("(")){
                    String[] partsFuncion = partsAritmetica[i].split(" |\\(");
                    String tipoFuncion = getTipoVar(partsFuncion[0], ambito, profundidad);
                    String[] tipoRetFuncion = tipoFuncion.split(" x | -> ");
                    if(!tipoAsignado.equals(tipoRetFuncion[tipoRetFuncion.length-1]) && tipoAsignado.length() > 0)
                        System.out.println("\u001B[31m" + "Asignación imposible en "+partsAsignacion[0]+": tipo de "+partsFuncion[0]+" incompatible - se esparabá "+tipoAsignado+".");
                }
            } else if(!tipoAsignado.equals("int")){
                System.out.println(partsAsignacion[0]);
                System.out.println("\u001B[31m" + "Asignación imposible en "+partsAsignacion[0]+": tipo de asignado "+tipoAsignado+" es incompatible con int."); //por si se suma int a strings o char
            }
        }
        //si es funcion probar sus params
        for (int i = 0; i < partsAritmetica.length; i++) {
            if(probarParams[i])
                if( partsAritmetica[i].contains("(") ){
                    String[] partsFuncion = partsAritmetica[i].split("\\(|\\)");
                    String[] partsParametros;
                    if(partsFuncion.length > 1)
                        partsParametros = partsFuncion[1].split(" ");
                    else
                        partsParametros = new String[0];
                    String tipoFuncion = getTipoVar(partsFuncion[0].split(" ")[0], ambito, profundidad);    //trayendo el tipo real de la funcion en la tabla de variables
                    String[] partsFuncionRetorno = tipoFuncion.split(" x | -> ");
                    
                    if(partsParametros.length == 0 && partsFuncionRetorno.length == 1)
                        System.out.println("\u001B[31m" + "Llamado a funcion "+ partsFuncion[0].split(" ")[0] +" invalido: demasiados parametros.");
                    else if(partsParametros.length == 0 && partsFuncionRetorno.length > 1 && !partsFuncionRetorno[0].equals(""))
                        System.out.println("\u001B[31m" + "Llamado a funcion "+ partsFuncion[0].split(" ")[0] +" invalido: muy pocos parametros.");
                    for (int j = 0; j < partsParametros.length; j++) {
                        String tipoParam = getTipoVar(partsParametros[j], ambito, profundidad);
                        if (tipoParam.length() == 0)
                            System.out.println("\u001B[31m" + "La variable "+partsParametros[j]+" no ha sido declarada en: "+ partsFuncion[0] +".");
                        else {
                            
                            if(partsFuncionRetorno.length-1 <= j)
                                System.out.println("\u001B[31m" + "Llamado a funcion "+ partsFuncion[0].split(" ")[0] +" invalido en: "+partsParametros[j]+" demasiados parametros.");
                            else{
                                if(partsFuncionRetorno.length-1 > partsParametros.length)
                                    System.out.println("\u001B[31m" + "Llamado a funcion "+ partsFuncion[0].split(" ")[0] +" invalido en: "+"muy pocos parametros.");
                                else if(!partsFuncionRetorno[j].equals(tipoParam) && j < partsFuncionRetorno.length-1 && !partsFuncionRetorno[j].equals(""))
                                    System.out.println("\u001B[31m" + "Llamado a funcion "+ partsFuncion[0].split(" ")[0] +" invalido en "+ partsParametros[j] +": tipos incompatibles - se esparabá "+partsFuncionRetorno[j]+".");
                                else if(partsFuncionRetorno[j].equals(""))
                                    System.out.println("\u001B[31m" + "Llamado a funcion "+ partsFuncion[0].split(" ")[0] +" invalido en: "+partsParametros[j]+" demasiados parametros.");
                            }
                        }
                    }// fin for
                }
        }
    }
    
    private void checkFunParams(Nodo nodo){
        String tiposParametros = "";
        for (int i = 0; i < nodo.getHijos().get(0).getHijos().size(); i++) {
            tiposParametros+=((Nodo)nodo.getHijos().get(0).getHijos().get(i)).getTipo();
            if(i != nodo.getHijos().get(0).getHijos().size()-1)
                tiposParametros+=" x ";
        }
        String tipoFuncion = getTipoVar( nodo.getValue(), ambito, profundidad );
        System.out.println( tiposParametros );
        System.out.println( tipoFuncion );
    }
    
    private String getTipoVar(String variableID, String ambito, int profundidad){
        //System.out.println("var = "+variableID+"\t\tambito = "+ambito+"\t\tprofundidad = "+profundidad);
        String tipo = "";
        for (int i = 0; i < tabla.size(); i++) {
            if( ((Tabla)tabla.get(i)).getId().equals(variableID) && ambito.contains( ((Tabla)tabla.get(i)).getAmbito()) && ((Tabla)tabla.get(i)).getProfundidad() == profundidad )
                tipo = ((Tabla)tabla.get(i)).getTipo();
        }
        if(tipo.equals(""))
            for (int i = 0; i < tabla.size(); i++) {
                if( ((Tabla)tabla.get(i)).getId().equals(variableID) && ambito.contains( ((Tabla)tabla.get(i)).getAmbito()) && ((Tabla)tabla.get(i)).getProfundidad() <= profundidad )
                    tipo = ((Tabla)tabla.get(i)).getTipo();
            }
        if(tipo.equals(""))
            if(isNumeric(variableID))
                tipo = "int";
        return tipo;
    }
    
    public static boolean isNumeric(String str) {
        try {
            int d = Integer.parseInt(str);
        }
        catch(NumberFormatException nfe) {
            return false;
        }
        return true;  
    }
    
    public String quitarAmbito(String ambito) {
        int index = ambito.lastIndexOf('.');
        ambito = ambito.substring(0, index);
        return ambito;
    }
    
    private void genCuadruplos(Nodo nodo) {
        for (int i = 0; i < nodo.getHijos().size(); i++) {
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("funcion") || ((Nodo)nodo.getHijos().get(i)).getTipo().equals("main") ){
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("if")){
                arregloEtiquetas = new ArrayList();
                arregloEtiquetas.add(0);
                posArregloEtiquetas = 0;
                contarHojas( ((Nodo)nodo.getHijos().get(i)).getHijoAt(0).getHijoAt(0) );
         
                posArregloEtiquetas = 0;
                contadorArregloEtiquetas = 0;
                genCuadruplosIF(((Nodo)nodo.getHijos().get(i)).getHijoAt(0).getHijoAt(0));
                Cuadruplo cuad = new Cuadruplo("etiq", "", "","etiq" + contEtiq++);
                cuads.add(cuad);
                genCuadruplos(((Nodo)nodo.getHijos().get(i)).getHijoAt(0));
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("while")){
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("dowhile")){
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("for")){
                genCuadruplosFOR(((Nodo)nodo.getHijos().get(i)));
                llenarSalidas( "etiq"+Integer.toString(contEtiq) );
                Cuadruplo cuadEtiq = new Cuadruplo("etiq", "", "","etiq" + contEtiq++);
                cuads.add(cuadEtiq);
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("switch")){
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("aritmetica")){
            }
            genCuadruplos((Nodo)nodo.getHijos().get(i));
        }
    }
    
    private void genCuadruplosIF(Nodo nodo) {
        System.out.println(nodo);
        for (int i = 0; i < nodo.getHijos().size(); i++) {
            System.out.println("\t"+nodo.getHijoAt(i));
            if(nodo.getHijoAt(i).getHijos().size() > 0 ){
                if( !nodo.getHijoAt(i).getTipo().matches("<|>|true|<=|>=|==|!=") )
                    padreEtiq = nodo.getHijoAt(i).getTipo();
                if(nodo.getTipo().equals("||"))
                    generarOR = true;
                if(i == 0)
                    banderaEtiqSalida = contEtiq;
                genCuadruplosIF(nodo.getHijoAt(i));
                if(nodo.getTipo().equals("||")){
                    if(i != (nodo.getHijos().size()-1) )
                        posArregloEtiquetas++;
                    contadorArregloEtiquetas = 0;
                }
            } else if( nodo.getTipo().matches("<|>|true|<=|>=|==|!=") && i < 1 ){
                if(posArregloEtiquetas == arregloEtiquetas.size()-1)
                    banderaEtiqSalida = contEtiq;
                Cuadruplo cuadEtiq = new Cuadruplo("etiq", "", "","etiq" + contEtiq++);
                cuads.add(cuadEtiq);
                contadorArregloEtiquetas++;
                String arg2;
                if(nodo.getTipo().equals("true"))
                    arg2 = "";
                else
                    arg2 = nodo.getHijoAt(1).getTipo();
                if(contadorArregloEtiquetas == arregloEtiquetas.get(posArregloEtiquetas) ){
                    if(generarOR){
                        int sumaEntrarCuerpo = banderaEtiqSalida;
                        for (int j = posArregloEtiquetas; j < arregloEtiquetas.size(); j++) {
                            sumaEntrarCuerpo+=arregloEtiquetas.get(j);
                        }
                        Cuadruplo cuad = new Cuadruplo("if"+nodo.getTipo(), nodo.getHijoAt(0).getTipo(), arg2, "etiq" + sumaEntrarCuerpo );
                        cuads.add(cuad);
                        int banderaSumaORFinal = (banderaEtiqSalida+arregloEtiquetas.get(posArregloEtiquetas));
                        if(posArregloEtiquetas == arregloEtiquetas.size()-1)
                            banderaSumaORFinal=-1;
                        Cuadruplo cuadGoto = new Cuadruplo("goto", "", "","etiq" + banderaSumaORFinal );
                        cuads.add(cuadGoto);
                    } else {
                        Cuadruplo cuad = new Cuadruplo("if"+nodo.getTipo(), nodo.getHijoAt(0).getTipo(), arg2, "etiq" + contEtiq );
                        cuads.add(cuad);
                        int banderaSumaORFinal = (banderaEtiqSalida+arregloEtiquetas.get(posArregloEtiquetas));
                        if(posArregloEtiquetas == arregloEtiquetas.size()-1)
                            banderaSumaORFinal=-1;
                        Cuadruplo cuadGoto = new Cuadruplo("goto", "", "","etiq" + banderaSumaORFinal );
                        cuads.add(cuadGoto);
                    }
                } else if(padreEtiq.equals("&&")){
                    Cuadruplo cuad = new Cuadruplo("if"+nodo.getTipo(), nodo.getHijoAt(0).getTipo(), arg2,"etiq" + contEtiq );
                    cuads.add(cuad);
                    if(generarOR){
                        Cuadruplo cuadGoto = new Cuadruplo("goto", "", "", "etiq" + (banderaEtiqSalida+arregloEtiquetas.get(posArregloEtiquetas)) );
                        cuads.add(cuadGoto);
                    } else {
                        Cuadruplo cuadGoto = new Cuadruplo("goto", "", "", "etiqSALIDA" );
                        cuads.add(cuadGoto);
                    }
                } else {
                    Cuadruplo cuad = new Cuadruplo("if"+nodo.getTipo(), nodo.getHijoAt(0).getTipo(), arg2,"etiq" + (banderaEtiqSalida+arregloEtiquetas.get(posArregloEtiquetas)) );
                    cuads.add(cuad);
                    Cuadruplo cuadGoto = new Cuadruplo("goto", "", "", "etiq" + contEtiq );
                    cuads.add(cuadGoto);
                }
            }
        }
    }
    
    private void contarHojas(Nodo nodo) {
        if(nodo.getTipo().equals("||")){
            arregloEtiquetas.add(0);
            for (int i = 0; i < nodo.getHijos().size(); i++) {
                contarHojas(nodo.getHijoAt(i));
                if(i != (nodo.getHijos().size()-1) )
                    posArregloEtiquetas++;
            }
        } else if(nodo.getTipo().equals("&&")) {
            for (int i = 0; i < nodo.getHijos().size(); i++) {
                contarHojas(nodo.getHijoAt(i));
            }
        } else
            arregloEtiquetas.set(posArregloEtiquetas, arregloEtiquetas.get(posArregloEtiquetas) + 1);
    }
    
    private void genCuadruplosFOR(Nodo nodo) {
        //System.out.println(nodo);
        for (int i = 0; i < nodo.getHijos().size(); i++) {
            if(i == 0){
                for (int j = 0; j < nodo.getHijoAt(0).getHijos().size(); j++) {
                    Cuadruplo cuadEtiq = new Cuadruplo("=", nodo.getHijoAt(0).getHijos().get(j).getValue(), "", nodo.getHijoAt(0).getHijos().get(j).getTipo());
                    cuads.add(cuadEtiq);
                }
            } else if(i == 1){
                arregloEtiquetas = new ArrayList();
                arregloEtiquetas.add(0);
                posArregloEtiquetas = 0;
                contarHojas( ((Nodo)nodo.getHijos().get(i)).getHijoAt(0));
         
                posArregloEtiquetas = 0;
                contadorArregloEtiquetas = 0;
                genCuadruplosIF(((Nodo)nodo.getHijos().get(i)).getHijoAt(0));
            } else{
                Cuadruplo cuadEtiq = new Cuadruplo("etiq", "", "","etiq" + contEtiq++);
                cuads.add(cuadEtiq);
            }
        }
    }
    
    private void llenarSalidas(String gotoEtiq){
        for (int i = 0; i < cuads.size(); i++) {
            if(cuads.get(i).getResultado().equals("etiq-1"))
                cuads.set(i, new Cuadruplo(cuads.get(i).getOperacion(), cuads.get(i).getArgumento1(), cuads.get(i).getArgumento2(), gotoEtiq) );
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea ta_codigo;
    private javax.swing.JTextArea ta_result;
    private javax.swing.JTree tree;
    // End of variables declaration//GEN-END:variables
}
