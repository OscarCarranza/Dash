/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dash;

import Nodos.Cuadruplo;
import Nodos.Infix2Postfix;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

import Nodos.Nodo;
import Nodos.Tabla;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
/**
 *
 * @author dariovillalta
 */
public class Compilador extends javax.swing.JFrame {

    public Nodo raiz;
    boolean error = false;
    public Compilador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ta_codigo = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        ta_result = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        ta_codigo.setColumns(20);
        ta_codigo.setRows(5);
        jScrollPane1.setViewportView(ta_codigo);

        ta_result.setColumns(20);
        ta_result.setRows(5);
        jScrollPane2.setViewportView(ta_result);

        jLabel1.setText("Resultado:");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel3.setText("DASH");

        jButton1.setText("Calcular");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        tree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane3.setViewportView(tree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel3))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(134, 134, 134))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addGap(2, 2, 2)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        try {
            Image image = ImageIO.read(new File("./img/dash.png"));
            Image newimg = image.getScaledInstance(60, 50,  java.awt.Image.SCALE_SMOOTH);
            ImageIcon icon = new ImageIcon(newimg); 
            jLabel2.setIcon(icon);
        } catch (IOException ex) {
            Logger.getLogger(Compilador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowActivated

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        String datos = "";
        BufferedReader br;
        try{
            if (ta_codigo.getText().length() > 0) {
                datos = ta_codigo.getText();
            } else{
                br = new BufferedReader(new FileReader("file.txt"));
                
                
                StringBuilder sb = new StringBuilder();
                String line = br.readLine();

                while (line != null) {
                    sb.append(line);
                    sb.append(System.lineSeparator());
                    line = br.readLine();
                }
                datos = sb.toString();
            }
            
            Analizador_Lexico lexico = new Analizador_Lexico(new BufferedReader(new StringReader(datos)));
            Sintactico sintactico = new Sintactico(lexico);
            sintactico.parse();
            //ta_result.setText(sintactico.parse().toString());
            DefaultTreeModel model = (DefaultTreeModel) tree.getModel();
            DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
            if( model.getChildCount(model.getRoot()) > 0 ){
                root.removeAllChildren();
                resetValues();
                
            }
            DefaultMutableTreeNode nodoraiz = new DefaultMutableTreeNode(sintactico.raiz.getTipo());
            root.add(nodoraiz);
            print(sintactico.raiz, nodoraiz);
        
            model.reload();
            tabla = sintactico.tabla;
            ambito = "global";
            profundidad = 0;
            checkTypes(sintactico.raiz, ambito);
            //
            //falta tipos en ifs, fors, switch ect
            //
            genCuadruplos(sintactico.raiz);
            genMIPS();
            System.out.println("genMIPS");
            
            //sin errores imprima tablas
            //if(tieneMain) {
                if(error == false) {
                     System.out.println(" ------------------------------------- Tabla de Simbolos --------------------------------------------");
                    for (int i = 0; i < sintactico.tabla.size(); i++) {
                        System.out.println(((Tabla)sintactico.tabla.get(i)).toString());
                        

                        //agregar al archivo mips vars globales
                        if(((Tabla)sintactico.tabla.get(i)).getAmbito().equals("global")){
                            String tipo = ((Tabla)sintactico.tabla.get(i)).getTipo();
                            switch(tipo){
                                    // falta si estan inicialiizados 
                                    case "int": data.add(((Tabla)sintactico.tabla.get(i)).getId() + ":\t\t\t.word 0");
                                        break;
                                    case "int*":
                                        break;                                  
                                    case "char":data.add(((Tabla)sintactico.tabla.get(i)).getId() + ":\t\t\t.space '1'");
                                        break;
                                    case "char*":
                                        break;
                                    case "bool": data.add(((Tabla)sintactico.tabla.get(i)).getId() + ":\t\t\t.word 0");
                                        break;
                                    case "bool*":
                                        break;           
                                    case "string":  data.add(((Tabla)sintactico.tabla.get(i)).getId() + ":\t\t\t.asciiz " + "");;
                                        break;  
                                    default: ;
                            }
                        }
                    }


                    System.out.println("\n" + " ---------------- CUADRUPLOS ---------------------- \n");
                    for(int i = 0; i < cuads.size(); i++){
                        System.out.println("\u001B[34m" + cuads.get(i).toString());
                    }

                    /*System.out.println("\n" + "---------------- M I P S ------------------------\n");
                    System.out.println(".data");
                    for(int i = 0; i < data.size(); i++){
                        System.out.println(data.get(i));
                    }  
                    System.out.println("");
                    System.out.println("FIN DATA");
                    System.out.println("");

                    System.out.println("\n" + ".text");
                    System.out.println("\n" + ".global main");

                    for(int i = 0; i < textMIPS.size(); i++){
                        System.out.println(textMIPS.get(i));
                    */
                    
                    print();

                }
            //} else
                    //System.out.println("\u001B[31m" + "No main method found.");
            error = false;
            
        } catch(Exception e){
            //
        }
    }//GEN-LAST:event_jButton1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Compilador().setVisible(true);
            }
        });
    }
    
    ArrayList<Tabla> tabla;
    String ambito;
    int profundidad;
    public static ArrayList<Cuadruplo> cuads = new ArrayList();
    public static int contTemp = 0;
    int contEtiq = 0;
    boolean genCuadruplosEsAND = false;
    ArrayList<Integer> arregloEtiquetas = new ArrayList(); //cuenta cuantos nodos hojas hay por cada ||
    int posArregloEtiquetas = 0;
    int contadorArregloEtiquetas = 0;
    String padreEtiq = "";
    boolean generarOR = false;
    int banderaEtiqSalida = 0;
    ArrayList <String> data = new ArrayList();
    ArrayList <String> textMIPS = new ArrayList();
    int contPrints = 1;
    boolean tieneMain = false;
    String guardarNodoCondicionCheck = "";
    
    private void print(Nodo nodo, DefaultMutableTreeNode arbolnodo){
        //System.out.print("\t");
        //System.out.println(nodo.getTipo());
        for (int i = 0; i < nodo.getHijos().size(); i++) {
            DefaultMutableTreeNode nodohijo = new DefaultMutableTreeNode(nodo.getHijos().get(i).getTipo());
            arbolnodo.add(nodohijo);
            print(nodo.getHijos().get(i), nodohijo);
        }
    }
    
    private void checkTypes(Nodo nodo, String ambito){
        for (int i = 0; i < nodo.getHijos().size(); i++) {
            Boolean entro = false;
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("funcion") || ((Nodo)nodo.getHijos().get(i)).getTipo().equals("main") ){
                profundidad = 0;
                if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("funcion") )
                    ambito+="."+((Nodo)nodo.getHijos().get(i)).getValue();
                else{
                    ambito+=".main";
                    tieneMain =  true;
                }
                entro = true;
                checkFunRet((Nodo)nodo.getHijos().get(i), ambito, profundidad);
                //checkFunParams((Nodo)nodo.getHijos().get(i));
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("if")){
                guardarNodoCondicionCheck = "if";
                checkCondicion((Nodo)nodo.getHijos().get(i).getHijoAt(0), ambito, profundidad);
                ambito+=".if";
                profundidad++;
                entro = true;
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("while")){
                guardarNodoCondicionCheck = "while";
                checkCondicion((Nodo)nodo.getHijos().get(i).getHijoAt(0), ambito, profundidad);
                ambito+=".while";
                profundidad++;
                entro = true;
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("do while")){
                guardarNodoCondicionCheck = "do while";
                checkCondicion((Nodo)nodo.getHijos().get(i).getHijoAt(0), ambito, profundidad);
                ambito+=".dowhile";
                profundidad++;
                entro = true;
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("for")){
                guardarNodoCondicionCheck = "for";
                checkDeclaFor((Nodo)nodo.getHijos().get(i).getHijoAt(0).getHijoAt(0));
                checkCondicion((Nodo)nodo.getHijos().get(i).getHijoAt(1), ambito, profundidad);
                ambito+=".for";
                profundidad++;
                entro = true;
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("switch")){
                ambito+=".switch";
                profundidad++;
                entro = true;
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("aritmetica")){
                checkAritmetica((Nodo)nodo.getHijos().get(i), ambito, profundidad);   
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("declaracion")){
                //checkAritmetica((Nodo)nodo.getHijos().get(i), ambito, profundidad);
                for (int j = 1; j < ((Nodo)nodo.getHijos().get(i)).getHijos().size(); j++) {
                    if(((Nodo)nodo.getHijos().get(i)).getHijoAt(j).getValue().length() > 0){
                        String inicializacion = ((Nodo)nodo.getHijos().get(i)).getHijoAt(j).getTipo() + " = " + ((Nodo)nodo.getHijos().get(i)).getHijoAt(j).getValue();
                        Nodo node = new Nodo("", inicializacion);
                        checkAritmetica(node, ambito, profundidad);
                    }
                }
            }
            //ambito = quitarAmbito(ambito);
            checkTypes(nodo.getHijos().get(i), ambito);
            if(entro)
                ambito = quitarAmbito(ambito);
        }
    }
    
    private void checkCondicion(Nodo nodo, String ambito, int profundidad){
        if(nodo.hasHijos()){
            for (int i = 0; i < nodo.getHijos().size(); i++) {
                checkCondicion(nodo.getHijoAt(i), ambito, profundidad);
            }
        } else {
            String tipoParam = getTipoVar(nodo.getTipo(), ambito, profundidad);;
            if(tipoParam.length() == 0 && !tipoParam.equals("int") && !tipoParam.equals("char") && !tipoParam.equals("bool") && !tipoParam.equals("string") ){
                System.out.println("\u001B[31m" + "Variable "+nodo.getTipo()+" has not been declared in: "+ guardarNodoCondicionCheck +".");
                error = true;
            }
        }
    }
    
    private void checkDeclaFor(Nodo nodo){
        if(!isNumeric(nodo.getValue())){
            System.out.println("\u001B[31m" + "Variable assignation "+nodo.getValue()+" has not been declared in: for.");
            error = true;
        }
    }
    
    private void checkFunRet(Nodo nodo, String ambito, int profundidad){
        // el ultimo es el fin. el penultimo es el return
        String tipoRetornoTabla = getTipoVar(nodo.getHijos().get(nodo.getHijos().size()-2).getValue(), ambito, profundidad);
        if(!isNumeric(nodo.getHijos().get(nodo.getHijos().size()-1).getValue()))
            if( tipoRetornoTabla.length() == 0 )
                System.out.println("\u001B[31m" + "Return variable in func "+nodo.getValue()+" has not been declared.");
    }
    
    private void checkAritmetica(Nodo nodo, String ambito, int profundidad){
        System.out.println(nodo);
        String[] partsAsignacion = nodo.getValue().split("=");
        String[] partsAritmetica = partsAsignacion[partsAsignacion.length-1].split("\\+|-|\\*|\\/|\\|");
        String tipoAsignado = getTipoVar(partsAsignacion[0].replaceAll(" ", ""), ambito, profundidad);
        Boolean[] probarParams = new Boolean[partsAritmetica.length];
        Arrays.fill(probarParams, true);
        ArrayList<String> tipoAsignadores = new ArrayList<String>();
        for (int i = 0; i < partsAritmetica.length; i++) {
            if(partsAritmetica[i].contains("("))
                tipoAsignadores.add(getTipoVar(partsAritmetica[i].split(("\\("))[0], ambito, profundidad));
            else
                tipoAsignadores.add(getTipoVar(partsAritmetica[i].replaceAll(" ", ""), ambito, profundidad));
        }
        if( tipoAsignado.length() == 0 ){
            System.out.println("\u001B[31m" + "Assigned variable  "+partsAsignacion[0]+" has not been declared.");
            error = true;
        }
        for (int i = 0; i < tipoAsignadores.size(); i++) {
            if(tipoAsignadores.get(i).equals("")){
                if(partsAritmetica[i].contains("(")){
                    System.out.println("\u001B[31m" + "Function "+partsAritmetica[i]+" has not been declared.");
                    probarParams[i] =  false;
                    error = true;
                } else if(!isNumeric(partsAritmetica[i].replaceAll(" ", "")) && !partsAritmetica[i].replaceAll(" ", "").equals("true") && !partsAritmetica[i].replaceAll(" ", "").equals("false")){
                    System.out.println("\u001B[31m" + " Variable "+partsAritmetica[i]+" has not been declared in assignation "+partsAsignacion[0]+".");
                    probarParams[i] =  false;
                    error = true;

                }
            } else if(!tipoAsignadores.get(i).equals("int") ){
                if(partsAritmetica[i].contains("(")){
                    String[] partsFuncion = partsAritmetica[i].split(" |\\(");
                    String tipoFuncion = getTipoVar(partsFuncion[0], ambito, profundidad);
                    String[] tipoRetFuncion = tipoFuncion.split(" x | -> ");
                    if(!tipoAsignado.equals(tipoRetFuncion[tipoRetFuncion.length-1]) && tipoAsignado.length() > 0){
                        error = true;
                        System.out.println("\u001B[31m" + "Invalid assignation "+partsAsignacion[0]+" type: "+partsFuncion[0]+" - Expected "+tipoAsignado+".");

                    }
                }
            } else if(!tipoAsignado.equals("int")){
                System.out.println(partsAsignacion[0]);
                error = true;
                System.out.println("\u001B[31m" + "Invalid assignation "+partsAsignacion[0]+" type: "+tipoAsignado+" not compatible with int."); //por si se suma int a strings o char
            }
        }
        //si es funcion probar sus params
        for (int i = 0; i < partsAritmetica.length; i++) {
            if(probarParams[i])
                if( partsAritmetica[i].contains("(") ){
                    String[] partsFuncion = partsAritmetica[i].split("\\(|\\)");
                    String[] partsParametros;
                    if(partsFuncion.length > 1){
                        partsParametros = partsFuncion[1].split(",");
                    }
                    
                    else
                    partsParametros = new String[0];
                    String tipoFuncion = getTipoVar(partsFuncion[0].split(" ")[0], ambito, profundidad);    //trayendo el tipo real de la funcion en la tabla de variables
                    String[] partsFuncionRetorno = tipoFuncion.split(" x | -> ");
                    
                    if(partsParametros.length == 0 && partsFuncionRetorno.length == 1){
                          System.out.println("\u001B[31m" + "Function Call "+ partsFuncion[0].split(" ")[0] +" invalid: Too much params.");
                          error = true;
                    }
                    else if(partsParametros.length == 0 && partsFuncionRetorno.length > 1 && !partsFuncionRetorno[0].equals("")){
                         System.out.println("\u001B[31m" + "Function Call "+ partsFuncion[0].split(" ")[0] +" invalid: More params expected.");
                         error = true;
                    }
                    for (int j = 0; j < partsParametros.length; j++) {
                        String tipoParam = getTipoVar(partsParametros[j], ambito, profundidad);
                        if (tipoParam.length() == 0){
                            System.out.println("\u001B[31m" + "Variable "+partsParametros[j]+" has not been declared in: "+ partsFuncion[0] +".");
                            error = true;
                        }
                        else {
                            
                            if(partsFuncionRetorno.length-1 <= j){
                                System.out.println("\u001B[31m" + "Function Call "+ partsFuncion[0].split(" ")[0] +" invalid: "+partsParametros[j]+". Too much params.");
                                error = true;
                            }
                            else{
                                if(partsFuncionRetorno.length-1 > partsParametros.length){
                                    System.out.println("\u001B[31m" + "Function Call "+ partsFuncion[0].split(" ")[0] +" invalido in: "+". More params expected.");
                                    error = true;
                                }
                                else if(!partsFuncionRetorno[j].equals(tipoParam) && j < partsFuncionRetorno.length-1 && !partsFuncionRetorno[j].equals("")){
                                    System.out.println("\u001B[31m" + "Function Call "+ partsFuncion[0].split(" ")[0] +" invalido in "+ partsParametros[j] +": Incompatible types - expected "+partsFuncionRetorno[j]+".");
                                    error = true;
                                }
                                else if(partsFuncionRetorno[j].equals("")){
                                    error = true;
                                    System.out.println("\u001B[31m" + "Function Call "+ partsFuncion[0].split(" ")[0] +" invalid in: "+partsParametros[j]+". Too much params.");
     
                                }
                            }
                        }
                    }// fin for
                }
        }
    }
    
    private void checkFunParams(Nodo nodo){
        String tiposParametros = "";
        for (int i = 0; i < nodo.getHijos().get(0).getHijos().size(); i++) {
            tiposParametros+=((Nodo)nodo.getHijos().get(0).getHijos().get(i)).getTipo();
            if(i != nodo.getHijos().get(0).getHijos().size()-1)
                tiposParametros+=" x ";
        }
        String tipoFuncion = getTipoVar( nodo.getValue(), ambito, profundidad );
        System.out.println( tiposParametros );
        System.out.println( tipoFuncion );
    }
    
    private String getTipoVar(String variableID, String ambito, int profundidad){
        //System.out.println("var = "+variableID+"\t\tambito = "+ambito+"\t\tprofundidad = "+profundidad);
        String tipo = "";
        for (int i = 0; i < tabla.size(); i++) {
            if( ((Tabla)tabla.get(i)).getId().equals(variableID) && ambito.contains( ((Tabla)tabla.get(i)).getAmbito()) && ((Tabla)tabla.get(i)).getProfundidad() == profundidad )
                tipo = ((Tabla)tabla.get(i)).getTipo();
        }
        if(tipo.equals(""))
            for (int i = 0; i < tabla.size(); i++) {
                if( ((Tabla)tabla.get(i)).getId().equals(variableID) && ambito.contains( ((Tabla)tabla.get(i)).getAmbito()) && ((Tabla)tabla.get(i)).getProfundidad() <= profundidad )
                    tipo = ((Tabla)tabla.get(i)).getTipo();
            }
        if(tipo.equals(""))
            if(isNumeric(variableID))
                tipo = "int";
        return tipo;
    }
    
    public static boolean isNumeric(String str) {
        try {
            int d = Integer.parseInt(str);
        }
        catch(NumberFormatException nfe) {
            return false;
        }
        return true;  
    }
    
    public String quitarAmbito(String ambito) {
        int index = ambito.lastIndexOf('.');
        ambito = ambito.substring(0, index);
        return ambito;
    }
    
    private void genCuadruplos(Nodo nodo) {
        boolean entroAlguno = false;
        for (int i = 0; i < nodo.getHijos().size(); i++) {
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("funcion")){
                cuads.add(new Cuadruplo("func","","",((Nodo)nodo.getHijos().get(i)).getValue()));
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("return")){
                cuads.add(new Cuadruplo("ret","","",((Nodo)nodo.getHijos().get(i)).getValue()));

            }   
             if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("finFunc")){
                cuads.add(new Cuadruplo("finFunc","","",((Nodo)nodo.getHijos().get(i)).getValue()));

            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("if")){
                arregloEtiquetas = new ArrayList();
                arregloEtiquetas.add(0);
                posArregloEtiquetas = 0;
                contarHojas( ((Nodo)nodo.getHijos().get(i)).getHijoAt(0).getHijoAt(0) );
         
                posArregloEtiquetas = 0;
                contadorArregloEtiquetas = 0;
                genCuadruplosIF(((Nodo)nodo.getHijos().get(i)).getHijoAt(0).getHijoAt(0));
                Cuadruplo cuad = new Cuadruplo("etiq", "", "","etiq" + contEtiq++);
                cuads.add(cuad);
                //genCuadruplos(((Nodo)nodo.getHijos().get(i)).getHijoAt(0));
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("while")){
                entroAlguno = true;
                genCuadruplosWHILE(((Nodo)nodo.getHijos().get(i)));
                genCuadruplos((Nodo)nodo.getHijos().get(i));
                llenarSalidas( "etiq"+Integer.toString(contEtiq) );
                Cuadruplo cuadEtiq = new Cuadruplo("etiq", "", "","etiq" + contEtiq++);
                cuads.add(cuadEtiq);
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("do while")){
                entroAlguno = true;
                genCuadruplosDOWHILE(((Nodo)nodo.getHijos().get(i)));
                genCuadruplos((Nodo)nodo.getHijos().get(i));
                llenarSalidas( "etiq"+Integer.toString(contEtiq) );
                Cuadruplo cuadEtiq = new Cuadruplo("etiq", "", "","etiq" + contEtiq++);
                cuads.add(cuadEtiq);
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("for")){
                entroAlguno = true;
                genCuadruplosFOR(((Nodo)nodo.getHijos().get(i)));
                genCuadruplos((Nodo)nodo.getHijos().get(i));
                llenarSalidas( "etiq"+Integer.toString(contEtiq) );
                Cuadruplo cuadEtiq = new Cuadruplo("etiq", "", "","etiq" + contEtiq++);
                cuads.add(cuadEtiq);
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("switch")){
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("entrada")){
                //verificar en tabla de simbolos que existe pero falta ambito
                if(varExists(((Nodo)nodo.getHijos().get(i)).getValue()) == true){
                    cuads.add(new Cuadruplo("in","","",((Nodo)nodo.getHijos().get(i)).getValue()));
                }
                else{
                    System.out.println("\u001B[31m" + " Variable "+ ((Nodo)nodo.getHijos().get(i)).getValue() +" has not been declared.");
                }
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("salida")){
                String values = ((Nodo)nodo.getHijos().get(i)).getValue();
                int cont  = 0;
                for(int j = 0; j < values.length(); j++){
                    if(values.charAt(j) == '|'){
                        if(values.substring(cont,j).startsWith("\"") && values.substring(cont,j).endsWith("\"")){
                            // es una string
                            cuads.add(new Cuadruplo("out","","",values.substring(cont,j)));
                        }
                        else {
                            // es una variable
                            if(varExists(values.substring(cont,j)) == true){
                                cuads.add(new Cuadruplo("out","","",values.substring(cont,j)));
                            }
                            else{
                                System.out.println("\u001B[31m" + " Variable "+ values.substring(cont,j) +" has not been declared.");

                            }
                        }
                        cont = j+1;
                    }
                }
            }
            if ( ((Nodo)nodo.getHijos().get(i)).getTipo().equals("aritmetica")){
                entroAlguno = true;
                String vars[] = splitOperation(((Nodo)nodo.getHijos().get(i)).getValue());
                Infix2Postfix inf = new Infix2Postfix(vars[1]);
                if(vars[1].contains("+") || vars[1].contains("-") || vars[1].contains("*") || vars[1].contains("/")){
                    inf.CodigoIntermedio();
                    cuads.add(new Cuadruplo("=",vars[0],"t_" + (contTemp-1)));
                }
                else{
                    cuads.add(new Cuadruplo("=",vars[0],vars[1],""));
                }
               
            }
            
            if(entroAlguno == false)
                genCuadruplos((Nodo)nodo.getHijos().get(i));
        } 
        
        ArrayList <Cuadruplo> temp = new ArrayList(); 
        for (int i = 0; i < cuads.size(); i++) {                 
            if((cuads.get(i).getArgumento2().contains("(") && cuads.get(i).getArgumento2().contains(")") && cuads.get(i).getOperacion().equals("="))){              
                    String params[] = getParams(cuads.get(i).getArgumento2());
                    temp.add(new Cuadruplo("callFunc",params[0],params[1], cuads.get(i).getArgumento1()));    
                             
            }
            else{
               temp.add(cuads.get(i));
            }
        }
        
        cuads.clear();
        for(int i = 0; i < temp.size(); i++){
            cuads.add(temp.get(i));
        } 

    }
    
    private String[] splitOperation(String s){
        String[] operation = new String[2];
        for(int i = 0; i < s.length()-1; i++){
            if(s.charAt(i) == '='){
                operation[0] = s.substring(0,i);
                operation[1] = s.substring(i+1,s.length());
            }
        }
        return operation;
    }
    
    private boolean varExists(String id){
        boolean b = false;
        for(int i = 0; i < tabla.size(); i++){
            if(tabla.get(i).getId().equals(id)){
                b = true;
                break;
            }
        }
        return b;     
    }
    
    private void genCuadruplosIF(Nodo nodo) {
        //System.out.println(nodo);
        for (int i = 0; i < nodo.getHijos().size(); i++) {
            //System.out.println("\t"+nodo.getHijoAt(i));
            if(nodo.getHijoAt(i).getHijos().size() > 0 ){
                if( !nodo.getHijoAt(i).getTipo().matches("<|>|true|<=|>=|==|!=") )
                    padreEtiq = nodo.getHijoAt(i).getTipo();
                if(nodo.getTipo().equals("||"))
                    generarOR = true;
                if(i == 0)
                    banderaEtiqSalida = contEtiq;
                genCuadruplosIF(nodo.getHijoAt(i));
                if(nodo.getTipo().equals("||")){
                    if(i != (nodo.getHijos().size()-1) )
                        posArregloEtiquetas++;
                    contadorArregloEtiquetas = 0;
                }
            } else if( nodo.getTipo().matches("<|>|true|<=|>=|==|!=") && i < 1 ){
                if(posArregloEtiquetas == arregloEtiquetas.size()-1)
                    banderaEtiqSalida = contEtiq;
                Cuadruplo cuadEtiq = new Cuadruplo("etiq", "", "","etiq" + contEtiq++);
                cuads.add(cuadEtiq);
                contadorArregloEtiquetas++;
                String arg2;
                if(nodo.getTipo().equals("true"))
                    arg2 = "";
                else
                    arg2 = nodo.getHijoAt(1).getTipo();
                if(contadorArregloEtiquetas == arregloEtiquetas.get(posArregloEtiquetas) ){
                    if(generarOR){
                        int sumaEntrarCuerpo = banderaEtiqSalida;
                        for (int j = posArregloEtiquetas; j < arregloEtiquetas.size(); j++) {
                            sumaEntrarCuerpo+=arregloEtiquetas.get(j);
                        }
                        Cuadruplo cuad = new Cuadruplo("if"+nodo.getTipo(), nodo.getHijoAt(0).getTipo(), arg2, "etiq" + sumaEntrarCuerpo );
                        cuads.add(cuad);
                        int banderaSumaORFinal = (banderaEtiqSalida+arregloEtiquetas.get(posArregloEtiquetas));
                        if(posArregloEtiquetas == arregloEtiquetas.size()-1)
                            banderaSumaORFinal=-1;
                        Cuadruplo cuadGoto = new Cuadruplo("goto", "", "","etiq" + banderaSumaORFinal );
                        cuads.add(cuadGoto);
                    } else {
                        Cuadruplo cuad = new Cuadruplo("if"+nodo.getTipo(), nodo.getHijoAt(0).getTipo(), arg2, "etiq" + contEtiq );
                        cuads.add(cuad);
                        int banderaSumaORFinal = (banderaEtiqSalida+arregloEtiquetas.get(posArregloEtiquetas));
                        if(posArregloEtiquetas == arregloEtiquetas.size()-1)
                            banderaSumaORFinal=-1;
                        Cuadruplo cuadGoto = new Cuadruplo("goto", "", "","etiq" + banderaSumaORFinal );
                        cuads.add(cuadGoto);
                    }
                } else if(padreEtiq.equals("&&")){
                    Cuadruplo cuad = new Cuadruplo("if"+nodo.getTipo(), nodo.getHijoAt(0).getTipo(), arg2,"etiq" + contEtiq );
                    cuads.add(cuad);
                    if(generarOR){
                        Cuadruplo cuadGoto = new Cuadruplo("goto", "", "", "etiq" + (banderaEtiqSalida+arregloEtiquetas.get(posArregloEtiquetas)) );
                        cuads.add(cuadGoto);
                    } else {
                        Cuadruplo cuadGoto = new Cuadruplo("goto", "", "", "etiqSALIDA" );
                        cuads.add(cuadGoto);
                    }
                } else {
                    Cuadruplo cuad = new Cuadruplo("if"+nodo.getTipo(), nodo.getHijoAt(0).getTipo(), arg2,"etiq" + (banderaEtiqSalida+arregloEtiquetas.get(posArregloEtiquetas)) );
                    cuads.add(cuad);
                    Cuadruplo cuadGoto = new Cuadruplo("goto", "", "", "etiq" + contEtiq );
                    cuads.add(cuadGoto);
                }
            }
        }
    }
    
    private void contarHojas(Nodo nodo) {
        if(nodo.getTipo().equals("||")){
            arregloEtiquetas.add(0);
            for (int i = 0; i < nodo.getHijos().size(); i++) {
                contarHojas(nodo.getHijoAt(i));
                if(i != (nodo.getHijos().size()-1) )
                    posArregloEtiquetas++;
            }
        } else if(nodo.getTipo().equals("&&")) {
            for (int i = 0; i < nodo.getHijos().size(); i++) {
                contarHojas(nodo.getHijoAt(i));
            }
        } else
            arregloEtiquetas.set(posArregloEtiquetas, arregloEtiquetas.get(posArregloEtiquetas) + 1);
    }
    
    private void genCuadruplosFOR(Nodo nodo) {
        //System.out.println(nodo);
        for (int i = 0; i < nodo.getHijos().size(); i++) {
            if(i == 0){
                for (int j = 0; j < nodo.getHijoAt(0).getHijos().size(); j++) {
                    Cuadruplo cuadEtiq = new Cuadruplo("=", nodo.getHijoAt(0).getHijos().get(j).getValue(), "", nodo.getHijoAt(0).getHijos().get(j).getTipo());
                    cuads.add(cuadEtiq);
                }
            } else if(i == 1){
                arregloEtiquetas = new ArrayList();
                arregloEtiquetas.add(0);
                posArregloEtiquetas = 0;
                contarHojas( ((Nodo)nodo.getHijos().get(i)).getHijoAt(0));
         
                posArregloEtiquetas = 0;
                contadorArregloEtiquetas = 0;
                genCuadruplosIF(((Nodo)nodo.getHijos().get(i)).getHijoAt(0));
            } else{
                Cuadruplo cuadEtiq = new Cuadruplo("etiq", "", "","etiq" + contEtiq++);
                cuads.add(cuadEtiq);
            }
        }
    }
    
    private void llenarSalidas(String gotoEtiq){
        for (int i = 0; i < cuads.size(); i++) {
            if(cuads.get(i).getResultado().equals("etiq-1"))
                cuads.set(i, new Cuadruplo(cuads.get(i).getOperacion(), cuads.get(i).getArgumento1(), cuads.get(i).getArgumento2(), gotoEtiq) );
        }
    }
    
    int offset = 0;
    String lastOp = "";
    String $s[] = new String[8];
    String $t[] = new String[10];
    String ambitoMips = "global";
    
    private void llenarVacios(){
        for(int i = 0; i < 10; i++){
            $t[i] = "#";
        }
        for(int i = 0; i < 8; i++){
            $s[i] = "#";
        }
    }
    private void genMIPS(){
        
        llenarVacios();
        
        for(int i = 0; i < cuads.size(); i++){
            
            if(cuads.get(i).getOperacion().equals("func")){
                String nombreFun = cuads.get(i).getResultado();
                textMIPS.add(nombreFun + ":\n\t");
                offset += 4;
                textMIPS.add("sw $fp, -" + offset + "($sp)");
                offset += 4;
                textMIPS.add("sw $ra, -" + offset + "($sp)");
                int index = 0;
                int paramsFound = 0;
                nombreFun = "global." + nombreFun;
                
                //buscar params de funcion en tabla
                int cont_locales = 0;
                
                for(int j = 0; j < tabla.size(); j++){
                    if(nombreFun.equals(tabla.get(j).getAmbito()) && tabla.get(j).getParam() == 1){
                        //reservo espacio en memoria
                        offset += getSize(tabla.get(j).getTipo());
                        textMIPS.add("sw $s" + index + ", -" + offset + ("($sp)"));
                        $s[index] = tabla.get(j).getId();
                        index++;
                        paramsFound++;
                    }
                } 
                
                //asigna params
                for(int j = 0; j < paramsFound ; j++){
                    if(!$s[j].equals("#")){
                        textMIPS.add("move $s" + j + ", $a" + j);
                    }
                }  
                textMIPS.add("move $fp, $sp");
                //variables locales
                for(int j = 0; j < tabla.size(); j++){
                 
                    if(nombreFun.equals(tabla.get(j).getAmbito()) && tabla.get(j).getParam() == 0){
                        offset += getSize(tabla.get(j).getTipo());
                    }
                } 
                
                textMIPS.add("sub $sp, $sp, " + offset); 
                String s = "." + nombreFun;
                ambitoMips += s;
                
            }
            if(cuads.get(i).getOperacion().equals("finFunc")){
                textMIPS.add("finFunc_" + cuads.get(i).getResultado() + ": ");
                textMIPS.add("add $sp, $sp, " + offset);
                String amb = cuads.get(i).getResultado();
                amb = "global." + amb;
                
                //quitar variables locales
                String nombreFun = "global." + cuads.get(i).getResultado();
                for(int j = 0; j < tabla.size(); j++){
                    if(nombreFun.equals(tabla.get(j).getAmbito()) && tabla.get(j).getParam() == 0){
                        offset -= getSize(tabla.get(j).getTipo());
                    }
                } 
                
                for(int j = 7 ; j >= 0; j--){
                    if(!$s[j].equals("#")){
                        int size = getSize($s[j],amb);
                        textMIPS.add("lw $s" + j + ", -" + offset + "($fp)");
                        offset -= size;
                    }
                }    
                textMIPS.add("sw $fp, -" + offset + "($sp)");
                offset -= 4;
                textMIPS.add("sw $ra, -" + offset + "($sp)");
                offset -=4;
                textMIPS.add("jr $ra");
                quitarAmbito();
                offset = 0;
                
            } 
            
             //-------------------OPERACIONES ARITMETICAS--------------------------------
            
            //suma
            if(cuads.get(i).getOperacion().equals("+")){
                boolean id1found = false, id2found = false;
                //agregar argumentos a los temporales                
                for(int j = 0; j < tabla.size(); j++){
                    
                    if(id1found == false){
                        if(tabla.get(j).getId().equals(cuads.get(i).getArgumento1()) && tabla.get(j).getParam() == 1){
                            //es un parametro y esta en $s
                        }
                        else{
                           $t[Integer.parseInt(nextTPos())] = cuads.get(i).getArgumento1();
                        }
                        id1found = true;
                    }
                     
                    if(id2found == false){
                        if(tabla.get(j).getId().equals(cuads.get(i).getArgumento2()) && tabla.get(j).getParam() == 1){
                        // es un parametro y esta en $s

                        }
                        else{
                            $t[Integer.parseInt(nextTPos())] = cuads.get(i).getArgumento2();
                        } 
                        id2found = true;
                    }
                                                        
                }
                
                //buscar en registros
                
                String op1 = searchVar(cuads.get(i).getArgumento1());
                String op2 = searchVar(cuads.get(i).getArgumento2());
                
                
                if(!op1.equals("") && !op2.equals("")){
                    textMIPS.add("add $t" + nextTPos() + ", " + op1 + ", " + op2);
                    String s = "$t" + nextTPos();
                    lastOp = s;
                    $t[Integer.parseInt(nextTPos())] = cuads.get(i).getResultado();
                    $t[Character.getNumericValue(op1.charAt(op1.length()-1))] = "#";
                    $t[Character.getNumericValue(op1.charAt(op2.length()-1))] = "#";
                }
                
                else if(op1.equals("") && !op2.equals("")){
                    textMIPS.add("add $t" + nextTPos() + ", " + cuads.get(i).getArgumento1() + ", " + op2);
                    $t[Character.getNumericValue(op1.charAt(op2.length()-1))] = "#";
                }
                else if(!op1.equals("") && op2.equals("")){
                    textMIPS.add("add $t" + nextTPos() + ", " + op1 + ", " + cuads.get(i).getArgumento2());
                    $t[Character.getNumericValue(op1.charAt(op1.length()-1))] = "#";
                }
                 
            } 
            
            //resta
            if(cuads.get(i).getOperacion().equals("-")){
                
                boolean id1found = false, id2found = false;
                //agregar argumentos a los temporales                
                for(int j = 0; j < tabla.size(); j++){
                    
                    if(id1found == false){
                        if(tabla.get(j).getId().equals(cuads.get(i).getArgumento1()) && tabla.get(j).getParam() == 1){
                            //es un parametro y esta en $s
                        }
                        else{
                           $t[Integer.parseInt(nextTPos())] = cuads.get(i).getArgumento1();
                        }
                        id1found = true;
                    }
                     
                    if(id2found == false){
                        if(tabla.get(j).getId().equals(cuads.get(i).getArgumento2()) && tabla.get(j).getParam() == 1){
                        // es un parametro y esta en $s

                        }
                        else{
                            $t[Integer.parseInt(nextTPos())] = cuads.get(i).getArgumento2();
                        } 
                        id2found = true;
                    }
                                                        
                }
                
                //buscar en registros
                
                String op1 = searchVar(cuads.get(i).getArgumento1());
                String op2 = searchVar(cuads.get(i).getArgumento2());
                
                
                if(!op1.equals("") && !op2.equals("")){
                    textMIPS.add("sub $t" + nextTPos() + ", " + op1 + ", " + op2);
                    String s = "$t" + nextTPos();
                    lastOp = s;
                    $t[Integer.parseInt(nextTPos())] = cuads.get(i).getResultado();
                    $t[Character.getNumericValue(op1.charAt(op1.length()-1))] = "#";
                    $t[Character.getNumericValue(op1.charAt(op2.length()-1))] = "#";
                }
                
                else if(op1.equals("") && !op2.equals("")){
                    textMIPS.add("sub $t" + nextTPos() + ", " + cuads.get(i).getArgumento1() + ", " + op2);
                    $t[Character.getNumericValue(op1.charAt(op2.length()-1))] = "#";
                }
                else if(!op1.equals("") && op2.equals("")){
                    textMIPS.add("sub $t" + nextTPos() + ", " + op1 + ", " + cuads.get(i).getArgumento2());
                    $t[Character.getNumericValue(op1.charAt(op1.length()-1))] = "#";
                }         
            }
            
            //mult
            if(cuads.get(i).getOperacion().equals("*")){
                    boolean id1found = false, id2found = false;
                //agregar argumentos a los temporales                
                for(int j = 0; j < tabla.size(); j++){
                    
                    if(id1found == false){
                        if(tabla.get(j).getId().equals(cuads.get(i).getArgumento1()) && tabla.get(j).getParam() == 1){
                            //es un parametro y esta en $s
                        }
                        else{
                           $t[Integer.parseInt(nextTPos())] = cuads.get(i).getArgumento1();
                        }
                        id1found = true;
                    }
                     
                    if(id2found == false){
                        if(tabla.get(j).getId().equals(cuads.get(i).getArgumento2()) && tabla.get(j).getParam() == 1){
                        // es un parametro y esta en $s

                        }
                        else{
                            $t[Integer.parseInt(nextTPos())] = cuads.get(i).getArgumento2();
                        } 
                        id2found = true;
                    }
                                                        
                }
                
                //buscar en registros
                
                String op1 = searchVar(cuads.get(i).getArgumento1());
                String op2 = searchVar(cuads.get(i).getArgumento2());
                
                
                if(!op1.equals("") && !op2.equals("")){
                    textMIPS.add("mul $t" + nextTPos() + ", " + op1 + ", " + op2);
                    String s = "$t" + nextTPos();
                    lastOp = s;
                    $t[Integer.parseInt(nextTPos())] = cuads.get(i).getResultado();
                    $t[Character.getNumericValue(op1.charAt(op1.length()-1))] = "#";
                    $t[Character.getNumericValue(op1.charAt(op2.length()-1))] = "#";
                }
                
                else if(op1.equals("") && !op2.equals("")){
                    textMIPS.add("add $t" + nextTPos() + ", " + cuads.get(i).getArgumento1() + ", " + op2);
                    $t[Character.getNumericValue(op1.charAt(op2.length()-1))] = "#";
                }
                else if(!op1.equals("") && op2.equals("")){
                    textMIPS.add("add $t" + nextTPos() + ", " + op1 + ", " + cuads.get(i).getArgumento2());
                    $t[Character.getNumericValue(op1.charAt(op1.length()-1))] = "#";
                }        
            }
            
            //div
            if(cuads.get(i).getOperacion().equals("/")){
                    boolean id1found = false, id2found = false;
                //agregar argumentos a los temporales                
                for(int j = 0; j < tabla.size(); j++){
                    
                    if(id1found == false){
                        if(tabla.get(j).getId().equals(cuads.get(i).getArgumento1()) && tabla.get(j).getParam() == 1){
                            //es un parametro y esta en $s
                        }
                        else{
                           $t[Integer.parseInt(nextTPos())] = cuads.get(i).getArgumento1();
                        }
                        id1found = true;
                    }
                     
                    if(id2found == false){
                        if(tabla.get(j).getId().equals(cuads.get(i).getArgumento2()) && tabla.get(j).getParam() == 1){
                        // es un parametro y esta en $s

                        }
                        else{
                            $t[Integer.parseInt(nextTPos())] = cuads.get(i).getArgumento2();
                        } 
                        id2found = true;
                    }
                                                        
                }
                
                //buscar en registros
                
                String op1 = searchVar(cuads.get(i).getArgumento1());
                String op2 = searchVar(cuads.get(i).getArgumento2());
                
                
                if(!op1.equals("") && !op2.equals("")){
                    textMIPS.add("div $t" + nextTPos() + ", " + op1 + ", " + op2);
                    String s = "$t" + nextTPos();
                    lastOp = s;
                    $t[Integer.parseInt(nextTPos())] = cuads.get(i).getResultado();
                    $t[Character.getNumericValue(op1.charAt(op1.length()-1))] = "#";
                    $t[Character.getNumericValue(op1.charAt(op2.length()-1))] = "#";
                }
                
                else if(op1.equals("") && !op2.equals("")){
                    textMIPS.add("add $t" + nextTPos() + ", " + cuads.get(i).getArgumento1() + ", " + op2);
                    $t[Character.getNumericValue(op1.charAt(op2.length()-1))] = "#";
                }
                else if(!op1.equals("") && op2.equals("")){
                    textMIPS.add("add $t" + nextTPos() + ", " + op1 + ", " + cuads.get(i).getArgumento2());
                    $t[Character.getNumericValue(op1.charAt(op1.length()-1))] = "#";
                }            
            }
            
            //asignacion
            if(cuads.get(i).getOperacion().equals("=")){
                String reg = "";
                for(int j = 0; j < tabla.size(); j++){
                    if(tabla.get(j).getId().equals(cuads.get(i).getArgumento1())){
                        reg = tabla.get(j).getRegister();
                    }
                }
                
                //es una var global
                if(reg.equals("")){
                    textMIPS.add("sw " + lastOp + ", " + cuads.get(i).getArgumento1());
                }
                else{
                    textMIPS.add("move " + reg + ", " + lastOp);
                }
            }
            
            //llamado de funciones
            if(cuads.get(i).getOperacion().equals("callFunc")){
                String params = cuads.get(i).getArgumento2();
                String p = "";
                ArrayList <Integer> posiciones = new ArrayList();
                int cont = 0;
                for(int j = 0; j < params.length(); j++){
                    if(params.charAt(j) == '|'){
                        p = params.substring(cont,j);
                        int currentAvailablePos = Integer.parseInt(nextTPos());
                        $t[currentAvailablePos] = p;
                        textMIPS.add("lw $t" + currentAvailablePos + ", " + p);
                        posiciones.add(currentAvailablePos);
                        cont = j+1;
                    }
                }
                
                //no funciona con mas de 4 params
                
                for(int j = 0; j < posiciones.size(); j++){
                    textMIPS.add("move $a" + j + ", $t" + posiciones.get(j));
                    $t[posiciones.get(j)] = "#";
                    
                }
                textMIPS.add("jal " + cuads.get(i).getArgumento1());
            }
            
            //entrada
            if(cuads.get(i).getOperacion().equals("in")){
                String readVar = cuads.get(i).getResultado();
                for(int j = 0; j < tabla.size(); j++){
                    if(tabla.get(j).getAmbito().equals(ambitoMips) && tabla.get(j).getId().equals(readVar)){
                        int num_op = sysCall_in(tabla.get(j).getTipo());
                        textMIPS.add("li $v0 ," + num_op);
                        textMIPS.add("syscall");
                        textMIPS.add("sw $v0," + readVar);
                    }
                }
                
            }
            //salida
            if(cuads.get(i).getOperacion().equals("out")){
                if(cuads.get(i).getResultado().startsWith("\"") && cuads.get(i).getResultado().endsWith("\"")){
                    data.add("msg_" + contPrints + ":\t\t.asciiz " + cuads.get(i).getResultado());
                    textMIPS.add("li $v0 ,4");
                    textMIPS.add("la $a0, msg_" + contPrints);
                    textMIPS.add("syscall");
                    contPrints++;
                }
                // va a ir a buscar a la tabla de simbolos
                else{
                    String id = cuads.get(i).getResultado();
                    String tipo = "";
                    for(int j = 0; j < tabla.size(); j++){
                        if(id.equals(tabla.get(j).getId())){
                            tipo = tabla.get(j).getTipo();
                            break;
                        }
                    }  
                    switch(tipo){
                            case "int": textMIPS.add("lw $t" + nextTPos() + ", " + id);
                                        textMIPS.add("li $v0 ,1");
                                        textMIPS.add("move $a0, $t" + nextTPos());
                                        textMIPS.add("syscall");
                                break;
                            case "int*":
                                break;
                            case "char":textMIPS.add("lw $t" + nextTPos() + ", " + id);
                                        textMIPS.add("li $v0 ,4");
                                        textMIPS.add("move $a0, $t" + nextTPos());
                                        textMIPS.add("syscall");
                                break;
                            case "char*":
                                break;
                            case "bool":textMIPS.add("lw $t" + nextTPos() + ", " + id);
                                        textMIPS.add("li $v0 ,1");
                                        textMIPS.add("move $a0, $t" + nextTPos());
                                        textMIPS.add("syscall");
                                break;
                            case "bool*":
                                break;
                            case "string": textMIPS.add("lw $t" + nextTPos() + ", " + id);
                                        textMIPS.add("li $v0 ,4");
                                        textMIPS.add("move $a0, $t" + nextTPos());
                                        textMIPS.add("syscall");
                                break; 
                            default: System.out.println(tipo + " no es nada");
                        }
                    }
            }
            
            ///--------------------_Dario
            if(cuads.get(i).getOperacion().startsWith("if", 0)){
                //
            }
            
            if(cuads.get(i).getOperacion().startsWith("if", 0)){
                System.out.println("HOES");
                System.out.println(cuads.get(i));
                System.out.println("");
                System.out.println(cuads.get(i).getArgumento1());
                System.out.println(searchVar(cuads.get(i).getArgumento1()));
                System.out.println(cuads.get(i).getArgumento2());
                System.out.println(searchVar(cuads.get(i).getArgumento2()));
                String branch, operacion;
                textMIPS.add("");
            }
            
        }
    }
    
    private int getSize(String s, String amb){
        for(int i = 0; i < tabla.size(); i++){
            if(tabla.get(i).getAmbito().equals(amb) && tabla.get(i).getId().equals(s)){
                s = tabla.get(i).getTipo();
                break;
            }
        }
        switch (s) {
            case "int":
                return 4;
            case "char":
                return 1;
            case "bool":
                return 1;
            case "string":
                return 4;
            default:
                return 0;
        }
    }
    
    private int getSize(String s){
        switch (s) {
            case "int":
                return 4;
            case "char":
                return 1;
            case "bool":
                return 1;
            case "string":
                return 4;
            default:
                return 0;
        }
    }
    
    public void print() throws FileNotFoundException, IOException {
        FileWriter fw = null;
        BufferedWriter bw = null;
        try {
            fw = new FileWriter(new File("./program.asm"));
            bw = new BufferedWriter(fw);
            bw.write("\t\t\t.data\n");
            for(int i = 0; i < data.size(); i++){
                bw.write(data.get(i)+"\n");
            }  

            bw.write("\n\t\t\t" + ".text");
            bw.write("\n\t\t\t" + ".global main\n");
            for(int i = 0; i < textMIPS.size(); i++){
                if(textMIPS.get(i).contains(":"))
                    bw.write(textMIPS.get(i)+"\n");
                else
                    bw.write("\t"+textMIPS.get(i)+"\n");
            }
        }  catch (IOException e) {
            e.printStackTrace();
        } finally {
                try {

                    if (bw != null)
                            bw.close();
                    if (fw != null)
                            fw.close();

                } catch (IOException ex) {
                    ex.printStackTrace();
                }
        }
    }
  
    private String[] getParams(String func){
         String params[] = new String[2];
         int contParams = 0;
         String pars = "";
         for(int i = 0; i < func.length(); i++){
             switch (func.charAt(i)) {
                 case '(':
                     params[0] = (func.substring(0, i));
                     contParams = i+1;
                     break;
                 case ',':
                     pars += func.substring(contParams,i);
                     pars += "|";
                     contParams = i+1;
                     break;
                 case ')':
                     pars += func.substring(contParams,i);
                     pars += "|";
                     break;
                 default:
                     break;
             }
        }
        params[1] = pars;
        return params;
    }
    
    private String nextTPos(){
        for(int i = 0; i < 10; i++){
            if($t[i].equals("#")){
                return Integer.toString(i);
            }
        }
        return "";
    }
    
    private String survivor(){
        for(int i = 0; i < 10; i++){
            if(!$t[i].equals("#")){
                return Integer.toString(i);
            }
        }
        return "";
    }
    
    private int sysCall_in(String tipo){
        int s = 0;
        switch (tipo) {
            case "int":
                return 1;
            case "char":
                return 4;
            case "bool":
                return 1;
            case "string":
                return 4;
            default:
                return 0;
        }
    }
    
    public void quitarAmbito() {
        int index = ambitoMips.lastIndexOf('.');
        ambitoMips = ambitoMips.substring(0, index);
    }
    
    private void genCuadruplosWHILE(Nodo nodo) {
        //System.out.println(nodo);
        for (int i = 0; i < nodo.getHijos().size(); i++) {
            if(i == 0){
                arregloEtiquetas = new ArrayList();
                arregloEtiquetas.add(0);
                posArregloEtiquetas = 0;
                contarHojas( ((Nodo)nodo.getHijos().get(i)).getHijoAt(0));
         
                posArregloEtiquetas = 0;
                contadorArregloEtiquetas = 0;
                genCuadruplosIF(((Nodo)nodo.getHijos().get(i)).getHijoAt(0));
            } else{
                Cuadruplo cuadEtiq = new Cuadruplo("etiq", "", "","etiq" + contEtiq++);
                cuads.add(cuadEtiq);
            }
        }
    }
    
    private void genCuadruplosDOWHILE(Nodo nodo) {
        arregloEtiquetas = new ArrayList();
        arregloEtiquetas.add(0);
        posArregloEtiquetas = 0;
        contarHojas( ((Nodo)nodo.getHijos().get(0)).getHijoAt(0));

        posArregloEtiquetas = 0;
        contadorArregloEtiquetas = 0;
        genCuadruplosIF(((Nodo)nodo.getHijos().get(0)).getHijoAt(0));

        Cuadruplo cuadEtiq = new Cuadruplo("etiq", "", "","etiq" + contEtiq++);
        cuads.add(cuadEtiq);
    }
    
    public void resetValues(){
        tabla.clear();
        ambito = "";
        profundidad = 0;
        cuads.clear();
        contTemp = 0;
        contEtiq = 0;
        genCuadruplosEsAND = false;
        arregloEtiquetas.clear(); //cuenta cuantos nodos hojas hay por cada ||
        posArregloEtiquetas = 0;
        contadorArregloEtiquetas = 0;
        padreEtiq = "";
        generarOR = false;
        banderaEtiqSalida = 0;
        data.clear();
        textMIPS.clear();
        contPrints = 1;
        tieneMain = false;
        guardarNodoCondicionCheck = "";
        offset = 0;
        ambitoMips = "global";
        llenarVacios();
    }
    
    private String searchVar(String id){
        String pos = "";
        for(int i = 0; i < 10; i++){
            if($t[i].equals(id)){
                pos = "$t" + i;
            }
        }
        for(int i = 0; i < 8; i++){
            if($s[i].equals(id)){
                pos = "$s" + i;
            }
        }
        return pos;        
    }
    
    private void printST(){
        for(int i = 0; i < 10; i++){
            System.out.println("$t[" + i + "]: " + $t[i]);
        }
        for(int i = 0; i < 8; i++){
            System.out.println("$s[" + i + "]: " + $s[i]);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea ta_codigo;
    private javax.swing.JTextArea ta_result;
    private javax.swing.JTree tree;
    // End of variables declaration//GEN-END:variables
}
