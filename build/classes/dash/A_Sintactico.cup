/*--------- 1ra Area: Codigo de Usuario---------*/

//---------> Paquetes, importaciones
package dash;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Nodos.Nodo;
import java.util.ArrayList;

//---------> Codigo para el parser, variables, metodos
parser code
{:
    public String resultado="";
    public static LinkedList<MyError> listaErrorSintacticos = new LinkedList<MyError>();
    public Nodo raiz;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
        
        MyError datos = new MyError(lexema, fila, columna, "Error Sintactico", "Caracter no esperado");
        listaErrorSintacticos.add(datos);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        MyError datos = new MyError(lexema, fila, columna, "Error Sintactico", "Simbolo no esperado, Panic Mode");
        listaErrorSintacticos.add(datos);
    }

:}

//---------> Codigo para las acciones gramaticales
action code
{:
:}

/*--------- 2da Area: Declaraciones---------*/

//---------> Declaraciones de terminales
terminal TYPE, INT, INTPTR, CHAR, CHARPTR, BOOL, BOOLPTR, STRING, ARROW, FUNCTION, MAIN, RETURN, READ, PRINT, IF, ELSE, FOR, WHILE, DO, SWITCH, CASE, DEFAULT, BREAK, ID, ADDFOR, MINUSFOR, MULTFOR;
terminal MULT_OP, DIV_OP, ADD_OP, MINUS_OP, ASSIGN, ADD_ASSIGN, MINUS_ASSIGN, MULT_ASSIGN, DIV_ASSIGN, EQUAL_OP, COMMA, AND_OP, OR_OP, LESSTHAN_OP, GREATERTHAN_OP, LESSEQUAL_OP;
terminal GREATEREQUAL_OP, NOTEQUAL_OP, LPAR, RPAR, LBRAC, RBRAC, LKEY, RKEY, SEMICOLON, COLON, DOT, DASH, LETTER, INTEGER, TRUE, FALSE, SIMCOM, DOBCOM, SYMBS, TEXT;

//---------> Declaraciones de no terminales
non terminal INICIO, declaracion, asignacionInteger, instanciacionInteger, iniciacionInteger, instanciacionIntPtr, integerLista, instanciacionCharPtr;
non terminal asignacionChar, instanciacionChar, iniciacionChar, charComillas, charLista, asignacionBool, instanciacionBool, iniciacionBool, bool, instanciacionBoolPtr, boolLista;
non terminal asignacionString, instanciacionString, iniciacionString, contenidoString, asignacionIntegerPtr, instanciacionIntegerPtr, iniciacionIntegerPtr;
non terminal asignacionCharPtr, instanciacionCharPointer, iniciacionCharPtr, asignacionBoolPtr, instanciacionBoolPointer, iniciacionBoolPtr, core;

non terminal body, body_dec;

//if DEC
non terminal conditionalExpr, andORor, logicalExpr, logicalExprComp, logicalExprID, comparator, if, else, ifElse, ifSinElse;

//Iteraciones DEC
non terminal while, doWhile, for, autoAssign, declaracionFor, instanciacionIntegerFor, switch, caseExist, case, declaracionCase, varCase, caseBreak, default;
non terminal dec_function, parameters, params_type, varRet, dec_main, arithmetic_exp, term, factor, var_type, read, func, assign_var, entry, salida;
non terminal content_print, more_content, var_entry, id_text, declaracion_ptrs_iniciacion, dec_id, ids, moreIds;

non terminal linea, programa;

//---------> Precedencia de menor a mayor
precedence left ADD_OP, MINUS_OP;
precedence left MULT_OP, DIV_OP;

start with INICIO;

/*--------- 3ra Area: Reglas Semanticas---------*/
INICIO ::= programa:funciones {: raiz = new Nodo("Programa", "");
                        System.out.println("SIIIIIIIIIIU");
                        ArrayList arregloNodos = (ArrayList) funciones;
                        for(int i = 0; i < arregloNodos.size(); i++){
                        Nodo temp = ((Nodo)arregloNodos.get(i));
                            raiz.addHijo(temp);
                        }  :};

programa ::= programa:prog linea:line {:if(prog != null){ 
                                            ArrayList arregloNodos = (ArrayList) prog;
                                            ArrayList arregloCommand = (ArrayList) line;
                                            Nodo programa = (Nodo)arregloCommand.get(0);
                                            arregloNodos.add( programa ); 
                                            RESULT = arregloNodos; 
                                        } else  if(line != null)
                                            RESULT = line; :}
    | linea:line {: RESULT = line; :};

linea ::= dec_function:funcion {: System.out.println( ((Nodo)((ArrayList)funcion).get(0)).getTipo() );
                                    RESULT = funcion; :}
    | dec_main:main {: RESULT = main; :}
    | declaracion:declaracion {: RESULT = declaracion; :};

declaracion ::= asignacionInteger:a DASH {: /*Nodo declaracion = new Nodo("declaracion","");
                                            ArrayList arregloNodos = (ArrayList) a;
                                            for(int i = 0; i < arregloNodos.size(); i++){
                                                Nodo temp = ((Nodo)arregloNodos.get(i));
                                                declaracion.addHijo(temp);
                                            }
                                            RESULT = declaracion;*/ :}
    | asignacionInteger error {: System.out.println("Expected - (dash)."); :}
    | asignacionIntegerPtr DASH {::} 
    | asignacionIntegerPtr error {: System.out.println("Expected - (dash)."); :}
    | asignacionChar DASH
    | asignacionChar error {: System.out.println("Expected - (dash)."); :}
    | asignacionCharPtr DASH
    | asignacionCharPtr error {: System.out.println("Expected - (dash)."); :}
    | asignacionBool DASH
    | asignacionBool error {: System.out.println("Expected - (dash)."); :}
    | asignacionBoolPtr DASH
    | asignacionBoolPtr error {: System.out.println("Expected - (dash)."); :}
    | asignacionString DASH
    | asignacionString error {: System.out.println("Expected - (dash)."); :};

/*------------------- INT GRAMATICA -----------------------*/
asignacionInteger ::= asignacionInteger:b COMMA instanciacionInteger:id {: /*if(b != null){
                                                                            ArrayList arregloNodos = (ArrayList) b;
                                                                            Nodo newID = new Nodo(id.toString(), "");
                                                                            arregloNodos.add( newID );
                                                                            RESULT = arregloNodos;
                                                                         } else {
                                                                            ArrayList arregloInstancias = new ArrayList();
                                                                            Nodo newID = new Nodo(id.toString(), "");
                                                                            arregloInstancias.add(newID);
                                                                            RESULT = arregloInstancias;} */:} 
    | INT instanciacionInteger:id {:/*ArrayList arregloInstancias = new ArrayList();
                                    Nodo newInt = new Nodo("int", "");
                                    Nodo newID = new Nodo(id.toString(), "");
                                    arregloInstancias.add(newInt);
                                    arregloInstancias.add(newID);
                                    RESULT = arregloInstancias;*/ :} ;

instanciacionInteger ::= ID:id iniciacionInteger {: /*ArrayList arregloInstancias = new ArrayList();
                                                    arregloInstancias.add(id.toString());
                                                    RESULT = arregloInstancias;*/ :}
    | error iniciacionInteger {: System.out.println("Expected an id."); :};

iniciacionInteger ::= ASSIGN INTEGER
    | ASSIGN error {: System.out.println("Expected a number."); :}
    | ;

integerLista ::= INTEGER {::}
    | integerLista COMMA INTEGER
    | integerLista COMMA error {: System.out.println("Expected a number."); :}
    | error {: System.out.println("Expected a number."); :};

asignacionIntegerPtr ::= asignacionIntegerPtr COMMA instanciacionIntegerPtr {::} 
    | INTPTR instanciacionIntegerPtr;

instanciacionIntegerPtr ::= ID iniciacionIntegerPtr 
    | error iniciacionIntegerPtr {: System.out.println("Expected an id."); :};

iniciacionIntegerPtr ::= ASSIGN instanciacionIntPtr
    | ;

instanciacionIntPtr ::= LBRAC RBRAC {::}
    | LBRAC integerLista RBRAC;

/*------------------- CHAR GRAMATICA -----------------------*/
asignacionChar ::= asignacionChar COMMA instanciacionChar {::} 
    | CHAR instanciacionChar;

instanciacionChar ::= ID iniciacionChar 
    | error iniciacionChar {: System.out.println("Expected an id."); :};

iniciacionChar ::= ASSIGN charComillas
    | ;

charComillas ::= SIMCOM LETTER SIMCOM
    | error LETTER SIMCOM {: System.out.println("Expected a '.'"); :}
    | SIMCOM LETTER error {: System.out.println("Expected a '.'"); :}
    | SIMCOM error SIMCOM {: System.out.println("Expected a char."); :}
    | DOBCOM LETTER DOBCOM 
    | error LETTER DOBCOM {: System.out.println("Expected a '.'"); :}
    | DOBCOM LETTER error {: System.out.println("Expected a '.'"); :}
    | DOBCOM error DOBCOM {: System.out.println("Expected a char."); :};

charLista ::= LETTER {::}
    | charLista COMMA LETTER
    | charLista COMMA error {: System.out.println("Expected a char."); :}
    | error {: System.out.println("Expected a char."); :};

asignacionCharPtr ::= asignacionCharPtr COMMA instanciacionCharPointer {::} 
    | CHARPTR instanciacionCharPointer;

instanciacionCharPointer ::= ID iniciacionCharPtr 
    | error iniciacionCharPtr {: System.out.println("Expected an id."); :};

iniciacionCharPtr ::= ASSIGN instanciacionCharPtr
    | ;

instanciacionCharPtr ::= LBRAC RBRAC {::}
    | LBRAC charComillas RBRAC;

/*------------------- BOOL GRAMATICA -----------------------*/
asignacionBool ::= asignacionBool COMMA instanciacionBool {::}
    | BOOL instanciacionBool;

instanciacionBool ::= ID iniciacionBool 
    | error iniciacionBool {: System.out.println("Expected an id."); :};

iniciacionBool ::= ASSIGN bool
    | ;

bool ::= TRUE | FALSE
    | error {: System.out.println("Expected either true/false."); :};

asignacionBoolPtr ::= asignacionBoolPtr COMMA instanciacionBoolPtr {::}
    | BOOLPTR instanciacionBoolPtr;

instanciacionBoolPtr ::= ID iniciacionBoolPtr 
    | error iniciacionBoolPtr {: System.out.println("Expected an id."); :};

iniciacionBoolPtr ::= ASSIGN instanciacionBoolPtr
    | ;

instanciacionBoolPtr ::= LBRAC RBRAC {::}
    | LBRAC boolLista RBRAC;

boolLista ::= bool {::}
    | boolLista COMMA bool;

/*------------------- STRING GRAMATICA -----------------------*/
asignacionString ::= asignacionString COMMA instanciacionString {::} 
    | STRING instanciacionString;

instanciacionString ::= ID iniciacionString 
    | error iniciacionString {: System.out.println("Expected an id."); :};

iniciacionString ::= ASSIGN DOBCOM contenidoString DOBCOM
    | ;

contenidoString ::= contenidoString ID
    | ID
    | contenidoString COMMA error {: System.out.println("Expected an id."); :}
    | error {: System.out.println("Expected an id."); :};

/*------------------- if GRAMATICA -----------------------*/
conditionalExpr ::= conditionalExpr andORor logicalExpr {::}
    | logicalExpr
    | conditionalExpr andORor LPAR logicalExpr RPAR;

andORor ::= AND_OP {::}
    | OR_OP
    | error {: System.out.println("Unknown character."); :};

logicalExpr ::= ID logicalExprComp {::}
    | INTEGER comparator logicalExprID
    | TRUE
    | FALSE
    | error {: System.out.println("Unexpected character."); :};

logicalExprComp ::= comparator logicalExprID {::}
    | ;

logicalExprID ::= ID {::}
    | INTEGER
    | error {: System.out.println("Unexpected character."); :};

comparator ::= EQUAL_OP {::}
    | LESSTHAN_OP
    | GREATERTHAN_OP
    | LESSEQUAL_OP
    | GREATEREQUAL_OP
    | NOTEQUAL_OP;

if ::= IF LPAR conditionalExpr RPAR LKEY body:body RKEY else:elseIf {: if(elseIf != null){
                                                                    Nodo nodo = new Nodo("if", "");
                                                                    ArrayList arregloBody = (ArrayList) body;
                                                                    if(arregloBody != null){
                                                                        for(int i = 0; i < arregloBody.size(); i++){
                                                                            Nodo temp = ((Nodo)arregloBody.get(i));
                                                                            nodo.addHijo(temp);
                                                                        }
                                                                    }
                                                                    ArrayList arregloNodos = new ArrayList();
                                                                    arregloNodos.add(nodo);
                                                                    ArrayList arregloElse = (ArrayList) elseIf;
                                                                    if(arregloElse != null){
                                                                        for(int i = 0; i < arregloElse.size(); i++){
                                                                            Nodo temp = ((Nodo)arregloElse.get(i));
                                                                            arregloNodos.add(temp);
                                                                        }
                                                                    }
                                                                    RESULT = arregloNodos;
                                                                } else {
                                                                    Nodo nodo = new Nodo("if", "");
                                                                    ArrayList arregloBody = (ArrayList) body;
                                                                    if(arregloBody != null){
                                                                        for(int i = 0; i < arregloBody.size(); i++){
                                                                            Nodo temp = ((Nodo)arregloBody.get(i));
                                                                            nodo.addHijo(temp);
                                                                        }
                                                                    }
                                                                    ArrayList arregloNodos = new ArrayList();
                                                                    arregloNodos.add(nodo);
                                                                    RESULT = arregloNodos; } :}
    | error LPAR conditionalExpr RPAR LKEY body:body RKEY else {: System.out.println("Expected if."); :}
    | IF error conditionalExpr RPAR LKEY body:body RKEY else {: System.out.println("Expected '('."); :}
    | IF LPAR conditionalExpr error LKEY body:body RKEY else {: System.out.println("Expected ')'."); :}
    | IF LPAR conditionalExpr RPAR error body:body RKEY else {: System.out.println("Expected '{'."); :}
    | IF LPAR conditionalExpr RPAR LKEY body:body error else {: System.out.println("Expected '}'."); :};

else ::= else ELSE ifSinElse:ifSinElse {:RESULT = ifSinElse; :}
    | ;

ifSinElse ::= IF LPAR conditionalExpr RPAR LKEY body:body RKEY {:Nodo nodo = new Nodo("else if", "");
                                                            ArrayList arregloBody = (ArrayList) body;
                                                            if(arregloBody != null){
                                                                for(int i = 0; i < arregloBody.size(); i++){
                                                                    Nodo temp = ((Nodo)arregloBody.get(i));
                                                                    nodo.addHijo(temp);
                                                                }
                                                            }
                                                            ArrayList arregloNodos = new ArrayList();
                                                            arregloNodos.add(nodo);
                                                            RESULT = arregloNodos;:}
    | error LPAR conditionalExpr RPAR LKEY body:body RKEY {: System.out.println("Expected if."); :}
    | IF error conditionalExpr RPAR LKEY body:body RKEY {: System.out.println("Expected '('."); :}
    | IF LPAR conditionalExpr error LKEY body:body RKEY {: System.out.println("Expected ')'."); :}
    | IF LPAR conditionalExpr RPAR error body:body RKEY {: System.out.println("Expected '{'."); :}
    | IF LPAR conditionalExpr RPAR LKEY body:body error {: System.out.println("Expected '}'."); :};

/*------------------- While GRAMATICA -----------------------*/
while ::= WHILE LPAR conditionalExpr RPAR LKEY body:body RKEY {: Nodo nodo = new Nodo("while", "");
                                                                ArrayList arregloBody = (ArrayList) body;
                                                                if(arregloBody != null){
                                                                    for(int i = 0; i < arregloBody.size(); i++){
                                                                        Nodo temp = ((Nodo)arregloBody.get(i));
                                                                        nodo.addHijo(temp);
                                                                    }
                                                                }
                                                                ArrayList arregloNodos = new ArrayList();
                                                                arregloNodos.add(nodo);
                                                                RESULT = arregloNodos; :}
    | WHILE error conditionalExpr RPAR LKEY body:body RKEY {: System.out.println("Expected '('."); :}
    | WHILE LPAR conditionalExpr error LKEY body:body RKEY {: System.out.println("Expected ')'."); :}
    | WHILE LPAR conditionalExpr RPAR error body:body RKEY {: System.out.println("Expected '{'."); :}
    | WHILE LPAR conditionalExpr RPAR LKEY body:body error {: System.out.println("Expected '}'."); :};

/*------------------- Do While GRAMATICA -----------------------*/
doWhile ::= DO LKEY body:body RKEY WHILE LPAR conditionalExpr RPAR DASH {: Nodo nodo = new Nodo("do while", "");
                                                                        ArrayList arregloBody = (ArrayList) body;
                                                                        if(arregloBody != null){
                                                                            for(int i = 0; i < arregloBody.size(); i++){
                                                                                Nodo temp = ((Nodo)arregloBody.get(i));
                                                                                nodo.addHijo(temp);
                                                                            }
                                                                        }
                                                                        ArrayList arregloNodos = new ArrayList();
                                                                        arregloNodos.add(nodo);
                                                                        RESULT = arregloNodos; :}
    | error LKEY body:body RKEY WHILE LPAR conditionalExpr RPAR DASH {: System.out.println("Expected do."); :}
    | DO error body:body RKEY WHILE LPAR conditionalExpr RPAR DASH {: System.out.println("Expected '{'."); :}
    | DO LKEY body:body error WHILE LPAR conditionalExpr RPAR DASH {: System.out.println("Expected '}'."); :}
    | DO LKEY body:body RKEY WHILE error conditionalExpr RPAR DASH {: System.out.println("Expected '('."); :}
    | DO LKEY body:body RKEY WHILE LPAR conditionalExpr error DASH {: System.out.println("Expected ')'."); :}
    | DO LKEY body:body RKEY WHILE LPAR conditionalExpr RPAR error {: System.out.println("Expected '-'."); :};

/*------------------- For GRAMATICA -----------------------*/
for ::= FOR LPAR declaracionFor SEMICOLON conditionalExpr SEMICOLON ID autoAssign RPAR LKEY body:body RKEY {: Nodo nodo = new Nodo("for", "");
                                                                                                            ArrayList arregloBody = (ArrayList) body;
                                                                                                            if(arregloBody != null){
                                                                                                                for(int i = 0; i < arregloBody.size(); i++){
                                                                                                                    Nodo temp = ((Nodo)arregloBody.get(i));
                                                                                                                    nodo.addHijo(temp);
                                                                                                                }
                                                                                                            }
                                                                                                            ArrayList arregloNodos = new ArrayList();
                                                                                                            arregloNodos.add(nodo);
                                                                                                            RESULT = arregloNodos; :}
    | error LPAR declaracionFor SEMICOLON conditionalExpr SEMICOLON ID autoAssign RPAR LKEY body:body RKEY {: System.out.println("Expected for."); :}
    | FOR error declaracionFor SEMICOLON conditionalExpr SEMICOLON ID autoAssign RPAR LKEY body:body RKEY {: System.out.println("Expected '('."); :}
    | FOR LPAR declaracionFor error conditionalExpr SEMICOLON ID autoAssign RPAR LKEY body:body RKEY {: System.out.println("Expected ';'."); :}
    | FOR LPAR declaracionFor SEMICOLON conditionalExpr SEMICOLON error autoAssign RPAR LKEY body:body RKEY {: System.out.println("Expected an id."); :}
    | FOR LPAR declaracionFor SEMICOLON conditionalExpr SEMICOLON ID autoAssign error LKEY body:body RKEY {: System.out.println("Expected ')'."); :}
    | FOR LPAR declaracionFor SEMICOLON conditionalExpr SEMICOLON ID autoAssign RPAR error body:body RKEY {: System.out.println("Expected '{'."); :}
    | FOR LPAR declaracionFor SEMICOLON conditionalExpr SEMICOLON ID autoAssign RPAR LKEY body:body error {: System.out.println("Expected '}'."); :};

autoAssign ::= ADDFOR
    | MINUSFOR
    | MULTFOR
    | error {: System.out.println("Unexpected character."); :};

declaracionFor ::= declaracionFor COMMA instanciacionIntegerFor {::}
    | INT instanciacionIntegerFor
    | ;

instanciacionIntegerFor ::= ID ASSIGN INTEGER  {::}
    | error ASSIGN INTEGER  {: System.out.println("Expected an id."); :}
    | ID error INTEGER  {: System.out.println("Expected '='."); :}
    | ID ASSIGN error  {: System.out.println("Expected a number."); :};

/*------------------- Switch GRAMATICA -----------------------*/

switch ::= SWITCH LPAR ID RPAR LKEY caseExist:caseE default RKEY {: Nodo nodo = new Nodo("switch", "");
                                                                ArrayList arregloNodos = new ArrayList();
                                                                ArrayList arregloCase = (ArrayList) caseE;
                                                                System.out.println("y4");
                                                                if(arregloCase != null) {
                                                                    for(int i = 0; i < arregloCase.size(); i++){
                                                                        Nodo temp = ((Nodo)arregloCase.get(i));
                                                                        nodo.addHijo(temp);
                                                                    }
                                                                }
                                                                System.out.println("y5");
                                                                arregloNodos.add(nodo);
                                                                RESULT = arregloNodos; :};

caseExist ::= case:caseE {: RESULT = caseE; :}
    | ;

case ::= case:cases declaracionCase:currCase {: if(cases != null){
                                                    ArrayList arregloNodos = (ArrayList) cases;
                                                    ArrayList arregloCommand = (ArrayList) currCase;
                                                    Nodo caseE = (Nodo)arregloCommand.get(0);
                                                    arregloNodos.add( caseE );
                                                    System.out.println("y3");
                                                    RESULT = arregloNodos;
                                                 } else {
                                                    ArrayList arregloCommand = (ArrayList) currCase;
                                                    Nodo caseE = (Nodo)arregloCommand.get(0);
                                                    System.out.println("y2");
                                                    RESULT = currCase;}:}
    | declaracionCase:dec {: RESULT = dec; :} ;

declaracionCase ::= CASE varCase COLON body:body caseBreak {: Nodo nodo = new Nodo("case","");
                                                        ArrayList nodos = new ArrayList();
                                                        ArrayList arregloNodos = (ArrayList) body;
                                                        if(arregloNodos != null){
                                                            for(int i = 0; i < arregloNodos.size(); i++){
                                                                Nodo temp = ((Nodo)arregloNodos.get(i));
                                                                nodo.addHijo(temp);
                                                            } 
                                                        }
                                                        nodos.add(nodo);
                                                        System.out.println("y1");
                                                        RESULT = nodos; :};

varCase ::= INTEGER {::}
    | SIMCOM LETTER SIMCOM;

caseBreak ::= BREAK DASH {::}
    | ;

default ::= DEFAULT COLON body caseBreak {::}
    | ;

/*------------------- BODY -----------------------*/
body ::= body declaracion {::}
    | body:b if:a {: if(b != null){
                        ArrayList arregloNodos = (ArrayList) b;
                        ArrayList arregloCommand = (ArrayList) a;
                        for(int i = 0; i < arregloCommand.size(); i++){
                            Nodo temp = (Nodo)arregloCommand.get(i);
                            arregloNodos.add( temp );
                        }
                        System.out.println("a");
                        System.out.println( ifVar.getTipo() );
                        System.out.println("b");
                        System.out.println( ((Nodo)((ArrayList) b).get(0)).getTipo() );
                        System.out.println("arregloNodos");
                        for(int i = 0; i < arregloNodos.size(); i++){
                            System.out.println( ((Nodo)arregloNodos.get(i)).getTipo() );
                        }
                        RESULT = arregloNodos;
                     } else {
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo ifVar = (Nodo)arregloCommand.get(0);
                        System.out.println("a Solo");
                        System.out.println(ifVar.getTipo());
                        RESULT = a;} :}
    | body:b while:a {: if(b != null){
                        ArrayList arregloNodos = (ArrayList) b;
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo whileVar = (Nodo)arregloCommand.get(0);
                        arregloNodos.add( whileVar );
                        System.out.println("a");
                        System.out.println( whileVar.getTipo() );
                        System.out.println("b");
                        System.out.println( ((Nodo)((ArrayList) b).get(0)).getTipo() );
                        System.out.println("arregloNodos");
                        for(int i = 0; i < arregloNodos.size(); i++){
                            System.out.println( ((Nodo)arregloNodos.get(i)).getTipo() );
                        }
                        RESULT = arregloNodos;
                     } else {
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo whileVar = (Nodo)arregloCommand.get(0);
                        System.out.println("a Solo");
                        System.out.println(whileVar.getTipo());
                        RESULT = a;} :}
    | body:b doWhile:a {: if(b != null){
                        ArrayList arregloNodos = (ArrayList) b;
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo doWhile = (Nodo)arregloCommand.get(0);
                        arregloNodos.add( doWhile );
                        System.out.println("a");
                        System.out.println( doWhile.getTipo() );
                        System.out.println("b");
                        System.out.println( ((Nodo)((ArrayList) b).get(0)).getTipo() );
                        System.out.println("arregloNodos");
                        for(int i = 0; i < arregloNodos.size(); i++){
                            System.out.println( ((Nodo)arregloNodos.get(i)).getTipo() );
                        }
                        RESULT = arregloNodos;
                     } else {
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo doWhile = (Nodo)arregloCommand.get(0);
                        System.out.println("a Solo");
                        System.out.println(doWhile.getTipo());
                        RESULT = a;} :}
    | body:b for:a {: if(b != null){
                        ArrayList arregloNodos = (ArrayList) b;
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo forVar = (Nodo)arregloCommand.get(0);
                        arregloNodos.add( forVar );
                        System.out.println("a");
                        System.out.println( forVar.getTipo() );
                        System.out.println("b");
                        System.out.println( ((Nodo)((ArrayList) b).get(0)).getTipo() );
                        System.out.println("arregloNodos");
                        for(int i = 0; i < arregloNodos.size(); i++){
                            System.out.println( ((Nodo)arregloNodos.get(i)).getTipo() );
                        }
                        RESULT = arregloNodos;
                     } else {
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo forVar = (Nodo)arregloCommand.get(0);
                        System.out.println("a Solo");
                        System.out.println(forVar.getTipo());
                        RESULT = a;} :}
    | body:b switch:a {: if(b != null){
                        ArrayList arregloNodos = (ArrayList) b;
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo switchVar = (Nodo)arregloCommand.get(0);
                        arregloNodos.add( switchVar );
                        System.out.println("a");
                        System.out.println( switchVar.getTipo() );
                        System.out.println("b");
                        System.out.println( ((Nodo)((ArrayList) b).get(0)).getTipo() );
                        System.out.println("arregloNodos");
                        for(int i = 0; i < arregloNodos.size(); i++){
                            System.out.println( ((Nodo)arregloNodos.get(i)).getTipo() );
                        }
                        RESULT = arregloNodos;
                     } else {
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo switchVar = (Nodo)arregloCommand.get(0);
                        System.out.println("a Solo");
                        System.out.println(switchVar.getTipo());
                        RESULT = a;} :}
    | body:b assign_var:a {: /*if(b != null) RESULT = (Nodo)a + ' ' + (Nodo)b; else RESULT = (Nodo)a;*/ :}
    | body:b entry:a {: /*if(b != null) RESULT = (Nodo)a + ' ' + (Nodo)b; else RESULT = (Nodo)a;*/ :}
    | body:b salida:a {: /*if(b != null) RESULT = (Nodo)a + ' ' + (Nodo)b; else RESULT = (Nodo)a;*/ :}
    | ;

/*------------------- Declaracion de funciones -----------------------*/
dec_function ::= FUNCTION ID:nombre ARROW LPAR parameters RPAR LKEY body:body RETURN varRet DASH RKEY DASH {: Nodo nodo = new Nodo("funcion", nombre.toString());
                            System.out.println("RESULT");
                            System.out.println(RESULT);
                            System.out.println("body");
                            ArrayList arregloNodos = (ArrayList) body;
                            for(int i = 0; i < arregloNodos.size(); i++){
                                Nodo temp = ((Nodo)arregloNodos.get(i));
                                nodo.addHijo(temp);
                                System.out.println( temp.getTipo() );
                            }
                            System.out.println(raiz);
                            ArrayList arregloFuncion = new ArrayList();
                            arregloFuncion.add(nodo);
                            RESULT = arregloFuncion; :};

func ::= ID ARROW LPAR ids RPAR DASH
    | ID error LPAR ids RPAR DASH           {: System.out.println("Expected '=>'"); :}
    | ID ARROW error ids RPAR DASH          {: System.out.println("Expected '('"); :}
    | ID ARROW LPAR ids error DASH          {: System.out.println("Expected ')'"); :}
    | ID ARROW LPAR ids RPAR error          {: System.out.println("Expected '-' at end of line"); :}
;


dec_main ::= MAIN ARROW LPAR parameters RPAR LKEY body:body RETURN varRet DASH RKEY {: Nodo nodo = new Nodo("main", "");
                                                                                    ArrayList arregloNodos = (ArrayList) body;
                                                                                    for(int i = 0; i < arregloNodos.size(); i++){
                                                                                        Nodo temp = ((Nodo)arregloNodos.get(i));
                                                                                        nodo.addHijo(temp);
                                                                                    }
                                                                                    ArrayList arregloFuncion = new ArrayList();
                                                                                    arregloFuncion.add(nodo);
                                                                                    RESULT = arregloFuncion;:}
    | MAIN error LPAR parameters RPAR LKEY body RETURN varRet DASH RKEY       {: System.out.println("Expected '=>'"); :}
    | MAIN ARROW error parameters RPAR LKEY body RETURN varRet DASH RKEY      {: System.out.println("Expected '('"); :}
    | MAIN ARROW LPAR parameters error LKEY body RETURN varRet DASH RKEY      {: System.out.println("Expected ')'"); :}
    | MAIN ARROW LPAR parameters RPAR error body RETURN varRet DASH RKEY      {: System.out.println("Expected '{'"); :}
    | MAIN ARROW LPAR parameters RPAR LKEY body error varRet DASH RKEY        {: System.out.println("Missing return statement"); :}
    | MAIN ARROW LPAR parameters RPAR LKEY body RETURN varRet error RKEY      {: System.out.println("Expected '-' at end of line"); :}
    | MAIN ARROW LPAR parameters RPAR LKEY body RETURN varRet DASH error      {: System.out.println("Expected ')'"); :}
;
 
parameters ::= parameters COMMA params_type ID
    | params_type ID;

ids ::= moreIds ID;

moreIds ::= moreIds ID COMMA 
    | ;


params_type ::= INT 
    | INTPTR
    | CHAR
    | CHARPTR
    | BOOL
    | BOOLPTR
    | STRING
    | error         {: System.out.println("Expected type"); :};

varRet ::= ID
    | TRUE
    | FALSE
    | INTEGER
    | error         {: System.out.println("Expected return variable"); :};


/* --------------------- Operaciones Aritmeticas ---------------------------*/
assign_var ::= ID ASSIGN arithmetic_exp DASH {: RESULT = "assign"; :};

arithmetic_exp ::= term:term                                                           
            |arithmetic_exp:se1 ADD_OP:pl term:term      
            |arithmetic_exp:se1 MINUS_OP:min term:term                                        
            |ADD_OP term:term                                                   
            |MINUS_OP:min term:term;    

term ::= factor:fact                                                           
         |term:term MULT_OP:tim factor:fact  
         |term:term DIV_OP:div factor:fact;

factor ::= INTEGER
    | ID
    | TRUE
    | FALSE
    | LPAR arithmetic_exp RPAR;                                                       
       
    
/* -------------------- Lectura y Escritura ---------------------------*/
entry ::= READ LPAR ID RPAR DASH        {: RESULT = "entry"; :}
    | READ error ID RPAR DASH           {: System.out.println("Expected '('"); :}
    | READ LPAR error RPAR DASH         {: System.out.println("Expected in-variable"); :}
    | READ LPAR ID error DASH           {: System.out.println("Expected ')'"); :}
    | READ LPAR ID RPAR error            {: System.out.println("Expected '-' at end of line"); :}
;

salida ::= PRINT LPAR content_print:c RPAR DASH    {: System.out.println("SALIDA");
                                                    System.out.println(c);
                                                    RESULT = "salida"; :}
    | PRINT error content_print RPAR DASH           {: System.out.println("Expected '('"); :}
    | PRINT LPAR content_print error DASH           {: System.out.println("Expected ')'"); :}
    | PRINT LPAR content_print RPAR error            {: System.out.println("Expected '-' at end of line"); :}
;


content_print ::= id_text:a more_content:b {: if(b != null) RESULT = (String)a + ' ' + (String)b; else RESULT = (String)a; :};

more_content ::= ADD_OP id_text:a more_content:b {: if(b != null) RESULT = (String)a + ' ' + (String)b; else RESULT = (String)a; :}
    | ;

id_text ::= ID:id {: RESULT = id; :}
    | TEXT:id {: RESULT = id; :}
    | error            {: System.out.println("Expected printing content"); :};
