/*--------- 1ra Area: Codigo de Usuario---------*/

//---------> Paquetes, importaciones
package dash;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Nodos.Nodo;
import Nodos.Variable;
import Nodos.Tabla;
import Nodos.Cuadruplo;
import Nodos.Infix2Postfix;
import java.util.ArrayList;

//---------> Codigo para el parser, variables, metodos
parser code
{:
    public String resultado="";
    public static LinkedList<MyError> listaErrorSintacticos = new LinkedList<MyError>();
    public Nodo raiz;
    public ArrayList<Variable> variables = new ArrayList();
    public ArrayList<Tabla> tabla = new ArrayList();
    public String ambito="global";
    public int profundidad = 0;
    public static int contTemp = 0;
    public static ArrayList<Cuadruplo> cuads = new ArrayList();
    public int direccion = 0;
    public boolean esMetodo = false;

    public boolean noExiste(String id) {
        boolean esValido = true;
        for (int i = 0; i < tabla.size(); i++) {
            if( ((Tabla)tabla.get(i)).getId().equals(id) && ((Tabla)tabla.get(i)).getAmbito().equals(ambito) ){
                esValido = false;
            }
        }
        return esValido;
    }

    public String buscarTipo(String id) {
        String tipo = "";
        for (int i = 0; i < tabla.size(); i++) {
            if( ((Tabla)tabla.get(i)).getId().equals(id)){
                tipo+=((Tabla)tabla.get(i)).getTipo();
            }
        }
        return tipo;
    }

    public void quitarAmbito() {
        int index = ambito.lastIndexOf('.');
        ambito = ambito.substring(0, index);
    }

    public static boolean isNumeric(String str) {
        try {
            int d = Integer.parseInt(str);  
        }
        catch(NumberFormatException nfe) {
            return false;
        }
        return true;  
    }

 public String getOp(String s){
        int num = 0;
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '='){
                num = i;
                break;
            }    
        }
        s = s.substring(num+1, s.length());
        return s;
    }
    
    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("\u001B[31m" + "Syntax Error: " + lexema + " at " + fila + ":" + columna);
        
        MyError datos = new MyError(lexema, fila, columna, "Error Sintactico", "Caracter no esperado");
        listaErrorSintacticos.add(datos);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("\u001B[31m" + "Syntax Error: " + lexema + " at " + fila + ":" + columna);


        MyError datos = new MyError(lexema, fila, columna, "Error Sintactico", "Simbolo no esperado, Panic Mode");
        listaErrorSintacticos.add(datos);
    }

     public void swap(ArrayList a){
        Nodo temp;
        ArrayList <Nodo> nodos = new ArrayList();
        
        for(int i = 1; i < a.size(); i++){
            nodos.add(((Nodo)a.get(i)).getHijoAt(1));
            nodos.add(((Nodo)a.get(i)).getHijoAt(0));
            ((Nodo)a.get(i)).setHijos(nodos);
        }
    }

    public ArrayList orderPrecedence(ArrayList a){
        ArrayList b = new ArrayList();
        for(int i = 0;i < a.size(); i++){
            if(((Nodo)a.get(i)).Tipo.equals("&&"))
                b.add(a.get(i));
        }
        for(int i = 0;i < a.size(); i++){
            if(((Nodo)a.get(i)).Tipo.equals("||"))
                b.add(a.get(i));
        }
        return b;
        
    }

   public boolean isOrdered(ArrayList a){
        
        boolean b = true;
        for(int i = 0; i < a.size()-1; i++){
            if(((Nodo)a.get(i)).Tipo.equals("||") && ((Nodo)a.get(i+1)).Tipo.equals("&&"))
                b = false;
        }
        return b;
        
    }
    public String splitOp(String s){
        int cont1 = 0;

        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '['){
                cont1 = i;
            }
            else if(s.charAt(i) == ']'){
                s = s.substring(0,cont1) + s.substring(i+1, s.length());
                i = cont1;
            }
            
        }
        
        s = s.replace(",", "");
        s = s.replace("[", "");
        s = s.replace("]", "");
        s = s.replace(" ","");
        return s;
            
    }

     public void cuadsExpr(ArrayList a){
                 
                ArrayList order = orderPrecedence(a);
                String operator = "", id = "";
                if (order.isEmpty()){
                    for(int i = 0; i < a.size(); i++){
                        operator = ((Nodo)a.get(i)).Tipo;
                        ArrayList hijos = (((Nodo)a.get(i)).getHijos());
                        Cuadruplo cuad = new Cuadruplo(operator,((Nodo)hijos.get(0)).getTipo(),((Nodo)hijos.get(1)).getTipo(),"t_" + contTemp++);
                        cuads.add(cuad);  
                    }
                } 
              
                if(isOrdered(a) == false){
                    for(int i = 0; i < order.size(); i++){
                    operator = ((Nodo)order.get(i)).Tipo;
                        if(operator.equals("&&") || operator.equals("||")){
                            ArrayList hijos = (((Nodo)order.get(i)).getHijos());
                            for(int j = 0; j < hijos.size(); j++){
                                operator = (((Nodo)hijos.get(j)).Tipo);
                                ArrayList hijos2 = (((Nodo)hijos.get(j)).getHijos());

                                if (i >= 1 && j >= 1){
                                   
                                   operator = ((Nodo)order.get(i)).Tipo;
                                   Cuadruplo cuad = new Cuadruplo(operator,"t_" + (contTemp-2),"t_" + (contTemp-1),"t_" + contTemp++);
                                   cuads.add(cuad); 
                                }
                                
                                else {
                                    operator = (((Nodo)hijos.get(j)).Tipo);
                                    // Agrego el cuadruplo de operacion relacional (comparar valores)
                                    Cuadruplo cuad = new Cuadruplo(operator,((Nodo)hijos2.get(0)).getTipo(),((Nodo)hijos2.get(1)).getTipo(),"t_" + contTemp++);
                                    cuads.add(cuad);
                                }
                                    
                                
                            }
                            
                            if(i < 1){
                                operator = (((Nodo)order.get(i)).Tipo);
                                Cuadruplo cuad = new Cuadruplo(operator,"t_" + (contTemp-2),"t_" + (contTemp-1),"t_" + contTemp++);
                                cuads.add(cuad);
                            }
                        } 
                    }   
                }
                
                else if(isOrdered(a) == true){
                    swap(order);
                    for(int i = 0; i < order.size(); i++){
                    operator = ((Nodo)order.get(i)).Tipo;
                        if(operator.equals("&&") || operator.equals("||")){
                            ArrayList hijos = (((Nodo)order.get(i)).getHijos());
                            for(int j = 0; j < hijos.size(); j++){
                                operator = (((Nodo)hijos.get(j)).Tipo);
                                ArrayList hijos2 = (((Nodo)hijos.get(j)).getHijos());

                                if (i >= 1 && j >= 1){
                                   
                                   operator = ((Nodo)order.get(i)).Tipo;
                                   Cuadruplo cuad = new Cuadruplo(operator,"t_" + (contTemp-2),"t_" + (contTemp-1),"t_" + contTemp++);
                                   cuads.add(cuad);
                                }
                                
                                else {
                                    operator = (((Nodo)hijos.get(j)).Tipo);
                                    // Agrego el cuadruplo de operacion relacional (comparar valores)
                                    Cuadruplo cuad = new Cuadruplo(operator,((Nodo)hijos2.get(0)).getTipo(),((Nodo)hijos2.get(1)).getTipo(),"t_" + contTemp++);
                                    cuads.add(cuad);
                                }
                            }
                            
                            if(i < 1){
                                operator = (((Nodo)order.get(i)).Tipo);
                                Cuadruplo cuad = new Cuadruplo(operator,"t_" + (contTemp-2),"t_" + (contTemp-1),"t_" + contTemp++);
                                cuads.add(cuad);
                            }

                        } 
                    
                    }   
                }
    }
:}

//---------> Codigo para las acciones gramaticales
action code
{:
:}

/*--------- 2da Area: Declaraciones---------*/

//---------> Declaraciones de terminales
terminal TYPE, INT, INTPTR, CHAR, CHARPTR, BOOL, BOOLPTR, STRING, ARROW, FUNCTION, MAIN, RETURN, READ, PRINT, IF, ELSE, FOR, WHILE, DO, SWITCH, CASE, DEFAULT, BREAK, ID, ADDFOR, MINUSFOR, MULTFOR;
terminal MULT_OP, DIV_OP, ADD_OP, MINUS_OP, ASSIGN, ADD_ASSIGN, MINUS_ASSIGN, MULT_ASSIGN, DIV_ASSIGN, EQUAL_OP, COMMA, AND_OP, OR_OP, LESSTHAN_OP, GREATERTHAN_OP, LESSEQUAL_OP;
terminal GREATEREQUAL_OP, NOTEQUAL_OP, LPAR, RPAR, LBRAC, RBRAC, LKEY, RKEY, SEMICOLON, COLON, DOT, DASH, LETTER, INTEGER, TRUE, FALSE, SIMCOM, DOBCOM, SYMBS, TEXT;

//---------> Declaraciones de no terminales
non terminal INICIO, declaracion, asignacionInteger, instanciacionInteger, iniciacionInteger, instanciacionIntPtr, integerLista, instanciacionCharPtr;
non terminal asignacionChar, instanciacionChar, iniciacionChar, charComillas, charLista, asignacionBool, instanciacionBool, iniciacionBool, bool, instanciacionBoolPtr, boolLista;
non terminal asignacionString, instanciacionString, iniciacionString, contenidoString, asignacionIntegerPtr, instanciacionIntegerPtr, iniciacionIntegerPtr;
non terminal asignacionCharPtr, instanciacionCharPointer, iniciacionCharPtr, asignacionBoolPtr, instanciacionBoolPointer, iniciacionBoolPtr, core, types;

non terminal body, body_dec;

//if DEC
non terminal conditionalExpr, andExpr, andORor, logicalExpr, logicalExprComp, logicalExprID, comparator, if, else, ifElse, ifSinElse;

//Iteraciones DEC
non terminal while, doWhile, for, autoAssign, declaracionFor, instanciacionIntegerFor, switch, caseExist, case, declaracionCase, varCase, caseBreak, default;
non terminal dec_function, parameters, params_type, varRet, dec_main, arithmetic_exp, term, factor, var_type, read, func, assign_var, entry, salida;
non terminal content_print, more_content, var_entry, id_text, declaracion_ptrs_iniciacion, dec_id, ids, moreIds;

non terminal content_printASIG, more_contentASIG, id_textASIG;

non terminal linea, programa;

//---------> Precedencia de menor a mayor
precedence left ADD_OP, MINUS_OP;
precedence left MULT_OP, DIV_OP;

start with INICIO;

/*--------- 3ra Area: Reglas Semanticas---------*/
INICIO ::= programa:funciones {: this.parser.raiz = new Nodo("Programa", "");
                        ArrayList arregloNodos = (ArrayList) funciones;
                        for(int i = 0; i < arregloNodos.size(); i++){
                        Nodo temp = ((Nodo)arregloNodos.get(i));
                            this.parser.raiz.addHijo(temp);
                        }  :};

programa ::= programa:prog linea:line {:if(prog != null){ 
                                            ArrayList arregloNodos = (ArrayList) prog;
                                            ArrayList arregloCommand = (ArrayList) line;
                                            Nodo programa = (Nodo)arregloCommand.get(0);
                                            arregloNodos.add( programa ); 
                                            RESULT = arregloNodos; 
                                        } else  if(line != null)
                                            RESULT = line; :}
    | linea:line {: RESULT = line; :};

linea ::= dec_function:funcion {: RESULT = funcion; :}
    | dec_main:main {: RESULT = main; :}
    | declaracion:declaracion {: RESULT = declaracion; :};

declaracion ::= asignacionInteger:a DASH {: ArrayList declaracionArreglo = new ArrayList();
                                            Nodo declaracion = new Nodo("declaracion","");
                                            ArrayList arregloNodos = (ArrayList) a;
                                            for(int i = 0; i < arregloNodos.size(); i++){
                                                Nodo temp = ((Nodo)arregloNodos.get(i));
                                                declaracion.addHijo(temp);
                                            }
                                            declaracionArreglo.add(declaracion);
                                            RESULT = declaracionArreglo; :}
    | asignacionInteger error {: System.out.println("\u001B[31m" + "Expected - (dash) at end of line."); :}
    | asignacionIntegerPtr:a DASH {:ArrayList declaracionArreglo = new ArrayList();
                                    Nodo declaracion = new Nodo("declaracion","");
                                    ArrayList arregloNodos = (ArrayList) a;
                                    for(int i = 0; i < arregloNodos.size(); i++){
                                        Nodo temp = ((Nodo)arregloNodos.get(i));
                                        declaracion.addHijo(temp);
                                    }
                                    declaracionArreglo.add(declaracion);
                                    RESULT = declaracionArreglo;:} 
    | asignacionIntegerPtr error {: System.out.println("\u001B[31m" + "Expected - (dash) at end of line." ); :}
    | asignacionChar:a DASH {:ArrayList declaracionArreglo = new ArrayList();
                                    Nodo declaracion = new Nodo("declaracion","");
                                    ArrayList arregloNodos = (ArrayList) a;
                                    for(int i = 0; i < arregloNodos.size(); i++){
                                        Nodo temp = ((Nodo)arregloNodos.get(i));
                                        declaracion.addHijo(temp);
                                    }
                                    declaracionArreglo.add(declaracion);
                                    RESULT = declaracionArreglo;:} 
    | asignacionChar error {: System.out.println("\u001B[31m" + "Expected - (dash) at end of line."); :}
    | asignacionCharPtr:a DASH {:ArrayList declaracionArreglo = new ArrayList();
                                    Nodo declaracion = new Nodo("declaracion","");
                                    ArrayList arregloNodos = (ArrayList) a;
                                    for(int i = 0; i < arregloNodos.size(); i++){
                                        Nodo temp = ((Nodo)arregloNodos.get(i));
                                        declaracion.addHijo(temp);
                                    }
                                    declaracionArreglo.add(declaracion);
                                    RESULT = declaracionArreglo;:} 
    | asignacionCharPtr error {: System.out.println("\u001B[31m" + "Expected - (dash) at end of line."); :}
    | asignacionBool:a DASH {:ArrayList declaracionArreglo = new ArrayList();
                                Nodo declaracion = new Nodo("declaracion","");
                                ArrayList arregloNodos = (ArrayList) a;
                                for(int i = 0; i < arregloNodos.size(); i++){
                                    Nodo temp = ((Nodo)arregloNodos.get(i));
                                    declaracion.addHijo(temp);
                                }
                                declaracionArreglo.add(declaracion);
                                RESULT = declaracionArreglo;:} 
    | asignacionBool error {: System.out.println("\u001B[31m" + "Expected - (dash) at end of line."); :}
    | asignacionBoolPtr:a DASH {:ArrayList declaracionArreglo = new ArrayList();
                                Nodo declaracion = new Nodo("declaracion","");
                                ArrayList arregloNodos = (ArrayList) a;
                                for(int i = 0; i < arregloNodos.size(); i++){
                                    Nodo temp = ((Nodo)arregloNodos.get(i));
                                    declaracion.addHijo(temp);
                                }
                                declaracionArreglo.add(declaracion);
                                RESULT = declaracionArreglo;:} 
    | asignacionBoolPtr error {: System.out.println("\u001B[31m" + "Expected - (dash) at end of line."); :}
    | asignacionString:a DASH {:ArrayList declaracionArreglo = new ArrayList();
                                Nodo declaracion = new Nodo("declaracion","");
                                ArrayList arregloNodos = (ArrayList) a;
                                for(int i = 0; i < arregloNodos.size(); i++){
                                    Nodo temp = ((Nodo)arregloNodos.get(i));
                                    declaracion.addHijo(temp);
                                }
                                declaracionArreglo.add(declaracion);
                                RESULT = declaracionArreglo;:} 
    | asignacionString error {: System.out.println("\u001B[31m" + "Expected - (dash) at end of line."); :};

/*------------------- INT GRAMATICA -----------------------*/
asignacionInteger ::= asignacionInteger:b COMMA instanciacionInteger:id {:  if(b != null){
                                                                                ArrayList arregloNodos = (ArrayList) b;
                                                                                Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                                                                arregloNodos.add( newID );
                                                                                int temp = this.parser.direccion;
                                                                                if(esMetodo)
                                                                                    this.parser.direccion++;
                                                                                else
                                                                                    temp = -1;
                                                                                Tabla nuevaVar = new Tabla( ((Nodo)id).getTipo(), "int", this.parser.ambito, this.parser.profundidad, temp, 0);
                                                                                this.parser.tabla.add( nuevaVar );
                                                                                RESULT = arregloNodos;
                                                                             } else {
                                                                                ArrayList arregloInstancias = new ArrayList();
                                                                                Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                                                                arregloInstancias.add(newID);
                                                                                int temp = this.parser.direccion;
                                                                                if(esMetodo)
                                                                                    this.parser.direccion++;
                                                                                else
                                                                                    temp = -1;
                                                                                Tabla nuevaVar = new Tabla( ((Nodo)id).getTipo(), "int", this.parser.ambito, this.parser.profundidad, temp, 0);
                                                                                this.parser.tabla.add( nuevaVar );
                                                                                RESULT = arregloInstancias;} :} 
    | INT instanciacionInteger:id {:ArrayList arregloInstancias = new ArrayList();
                                    Nodo newInt = new Nodo("int", "");
                                    Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                    arregloInstancias.add(newInt);
                                    arregloInstancias.add(newID);
                                    int temp = this.parser.direccion;
                                    if(esMetodo)
                                        this.parser.direccion++;
                                    else
                                        temp = -1;
                                    Tabla nuevaVar = new Tabla( ((Nodo)id).getTipo(), "int", this.parser.ambito, this.parser.profundidad, temp, 0);
                                    this.parser.tabla.add( nuevaVar );
                                    RESULT = arregloInstancias; :} ;

instanciacionInteger ::= ID:id iniciacionInteger:integer {: Nodo var = new Nodo(id.toString(), integer.toString());
                                                            RESULT = var; :}
    | error iniciacionInteger {: System.out.println("Expected an id."); :};

iniciacionInteger ::= ASSIGN content_printASIG:integer {: RESULT = integer; :}
    /*| ASSIGN error {: System.out.println("\u001B[31m" + "Expected a number."); :}*/
    | {: RESULT = ""; :};

integerLista ::= INTEGER {::}
    | integerLista COMMA INTEGER
    | integerLista COMMA error {: System.out.println("\u001B[31m" + "Expected a number."); :}
    | error {: System.out.println("\u001B[31m" + "Expected a number."); :};

asignacionIntegerPtr ::= asignacionIntegerPtr:b COMMA instanciacionIntegerPtr:id {:if(b != null){
                                                                                    ArrayList arregloNodos = (ArrayList) b;
                                                                                    Nodo newID = new Nodo((String)id, "");
                                                                                    arregloNodos.add( newID );
                                                                                    int temp = this.parser.direccion;
                                                                                    if(esMetodo)
                                                                                        this.parser.direccion++;
                                                                                    else
                                                                                        temp = -1;
                                                                                    Tabla nuevaVar = new Tabla((String)id, "int*", this.parser.ambito, this.parser.profundidad, temp, 0);
                                                                                    this.parser.tabla.add( nuevaVar );
                                                                                    RESULT = arregloNodos;
                                                                                 } else {
                                                                                    ArrayList arregloInstancias = new ArrayList();
                                                                                    Nodo newID = new Nodo((String)id, "");
                                                                                    arregloInstancias.add(newID);
                                                                                    int temp = this.parser.direccion;
                                                                                    if(esMetodo)
                                                                                        this.parser.direccion++;
                                                                                    else
                                                                                        temp = -1;
                                                                                    Tabla nuevaVar = new Tabla((String)id, "int*", this.parser.ambito, this.parser.profundidad, temp, 0);
                                                                                    this.parser.tabla.add( nuevaVar );
                                                                                    RESULT = arregloInstancias;}:} 
    | INTPTR instanciacionIntegerPtr:id {:ArrayList arregloInstancias = new ArrayList();
                                    Nodo newInt = new Nodo("int ptr", "");
                                    Nodo newID = new Nodo((String)id, "");
                                    arregloInstancias.add(newInt);
                                    arregloInstancias.add(newID);
                                    int temp = this.parser.direccion;
                                    if(esMetodo)
                                        this.parser.direccion++;
                                    else
                                        temp = -1;
                                    Tabla nuevaVar = new Tabla((String)id, "int*", this.parser.ambito, this.parser.profundidad, temp, 0);
                                    this.parser.tabla.add( nuevaVar );
                                    RESULT = arregloInstancias; :} ;

instanciacionIntegerPtr ::= ID:id iniciacionIntegerPtr {: RESULT = id.toString(); :}
    | error iniciacionIntegerPtr {: System.out.println("\u001B[31m" + "Expected an id."); :};

iniciacionIntegerPtr ::= ASSIGN instanciacionIntPtr
    | ;

instanciacionIntPtr ::= LBRAC RBRAC {::}
    | LBRAC integerLista RBRAC;

/*------------------- CHAR GRAMATICA -----------------------*/
asignacionChar ::= asignacionChar:b COMMA instanciacionChar:id {: if(b != null){
                                                                    ArrayList arregloNodos = (ArrayList) b;
                                                                    Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                                                    arregloNodos.add( newID );
                                                                    int temp = this.parser.direccion;
                                                                    if(esMetodo)
                                                                        this.parser.direccion++;
                                                                    else
                                                                        temp = -1;
                                                                    Tabla nuevaVar = new Tabla(((Nodo)id).getTipo(), "char", this.parser.ambito, this.parser.profundidad, temp, 0);
                                                                    this.parser.tabla.add( nuevaVar );
                                                                    RESULT = arregloNodos;
                                                                 } else {
                                                                    ArrayList arregloInstancias = new ArrayList();
                                                                    Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                                                    arregloInstancias.add(newID);
                                                                    int temp = this.parser.direccion;
                                                                    if(esMetodo)
                                                                        this.parser.direccion++;
                                                                    else
                                                                        temp = -1;
                                                                    Tabla nuevaVar = new Tabla(((Nodo)id).getTipo(), "char", this.parser.ambito, this.parser.profundidad, temp, 0);
                                                                    this.parser.tabla.add( nuevaVar );
                                                                    RESULT = arregloInstancias;} :} 
    | CHAR instanciacionChar:id {:ArrayList arregloInstancias = new ArrayList();
                                    Nodo newChar = new Nodo("char", "");
                                    Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                    arregloInstancias.add(newChar);
                                    arregloInstancias.add(newID);
                                    int temp = this.parser.direccion;
                                    if(esMetodo)
                                        this.parser.direccion++;
                                    else
                                        temp = -1;
                                    Tabla nuevaVar = new Tabla(((Nodo)id).getTipo(), "char", this.parser.ambito, this.parser.profundidad, temp, 0);
                                    this.parser.tabla.add( nuevaVar );
                                    RESULT = arregloInstancias; :};

instanciacionChar ::= ID:id iniciacionChar:integer {: Nodo var = new Nodo(id.toString(), integer.toString());
                                                            RESULT = var; :}
    | error iniciacionChar {: System.out.println("\u001B[31m" + "Expected an id."); :};

iniciacionChar ::= ASSIGN charComillas:letter {: RESULT = letter.toString(); :}
    | {: RESULT = ""; :};

charComillas ::= SIMCOM LETTER:letter SIMCOM {: RESULT = letter.toString(); :}
    | error LETTER SIMCOM {: System.out.println("\u001B[31m" + "Expected a '.'"); :}
    | SIMCOM LETTER error {: System.out.println("\u001B[31m" + "Expected a '.'"); :}
    | SIMCOM error SIMCOM {: System.out.println("\u001B[31m" + "Expected a char."); :}
    | DOBCOM LETTER:letter DOBCOM  {: RESULT = letter.toString(); :}
    | error LETTER DOBCOM {: System.out.println("\u001B[31m" + "Expected a '.'"); :}
    | DOBCOM LETTER error {: System.out.println("\u001B[31m" + "Expected a '.'"); :}
    | DOBCOM error DOBCOM {: System.out.println("\u001B[31m" + "Expected a char."); :};

charLista ::= LETTER {::}
    | charLista COMMA LETTER
    | charLista COMMA error {: System.out.println("\u001B[31m" + "Expected a char."); :}
    | error {: System.out.println("\u001B[31m" + "Expected a char."); :};

asignacionCharPtr ::= asignacionCharPtr:b COMMA instanciacionCharPointer:id {: if(b != null){
                                                                            ArrayList arregloNodos = (ArrayList) b;
                                                                            Nodo newID = new Nodo((String)id, "");
                                                                            arregloNodos.add( newID );
                                                                            int temp = this.parser.direccion;
                                                                            if(esMetodo)
                                                                                this.parser.direccion++;
                                                                            else
                                                                                temp = -1;
                                                                            Tabla nuevaVar = new Tabla((String)id, "char*", this.parser.ambito, this.parser.profundidad, temp, 0);
                                                                            this.parser.tabla.add( nuevaVar );
                                                                            RESULT = arregloNodos;
                                                                         } else {
                                                                            ArrayList arregloInstancias = new ArrayList();
                                                                            Nodo newID = new Nodo((String)id, "");
                                                                            arregloInstancias.add(newID);
                                                                            int temp = this.parser.direccion;
                                                                            if(esMetodo)
                                                                                this.parser.direccion++;
                                                                            else
                                                                                temp = -1;
                                                                            Tabla nuevaVar = new Tabla((String)id, "char*", this.parser.ambito, this.parser.profundidad, temp, 0);
                                                                            this.parser.tabla.add( nuevaVar );
                                                                            RESULT = arregloInstancias;}:} 
    | CHARPTR instanciacionCharPointer:id {:ArrayList arregloInstancias = new ArrayList();
                                            Nodo newChar = new Nodo("char ptr", "");
                                            Nodo newID = new Nodo((String)id, "");
                                            arregloInstancias.add(newChar);
                                            arregloInstancias.add(newID);
                                            int temp = this.parser.direccion;
                                            if(esMetodo)
                                                this.parser.direccion++;
                                            else
                                                temp = -1;
                                            Tabla nuevaVar = new Tabla((String)id, "char*", this.parser.ambito, this.parser.profundidad, temp, 0);
                                            this.parser.tabla.add( nuevaVar );
                                            RESULT = arregloInstancias; :};

instanciacionCharPointer ::= ID:id iniciacionCharPtr {: RESULT = id.toString(); :}
    | error iniciacionCharPtr {: System.out.println("\u001B[31m" + "Expected an id."); :};

iniciacionCharPtr ::= ASSIGN instanciacionCharPtr
    | ;

instanciacionCharPtr ::= LBRAC RBRAC {::}
    | LBRAC charComillas RBRAC;

/*------------------- BOOL GRAMATICA -----------------------*/
asignacionBool ::= asignacionBool:b COMMA instanciacionBool:id {:if(b != null){
                                                                    ArrayList arregloNodos = (ArrayList) b;
                                                                    Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                                                    arregloNodos.add( newID );
                                                                    int temp = this.parser.direccion;
                                                                    if(esMetodo)
                                                                        this.parser.direccion++;
                                                                    else
                                                                        temp = -1;
                                                                    Tabla nuevaVar = new Tabla(((Nodo)id).getTipo(), "bool", this.parser.ambito, this.parser.profundidad, temp, 0);
                                                                    this.parser.tabla.add( nuevaVar );
                                                                    RESULT = arregloNodos;
                                                                 } else {
                                                                    ArrayList arregloInstancias = new ArrayList();
                                                                    Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                                                    arregloInstancias.add(newID);
                                                                    int temp = this.parser.direccion;
                                                                    if(esMetodo)
                                                                        this.parser.direccion++;
                                                                    else
                                                                        temp = -1;
                                                                    Tabla nuevaVar = new Tabla(((Nodo)id).getTipo(), "bool", this.parser.ambito, this.parser.profundidad, temp, 0);
                                                                    this.parser.tabla.add( nuevaVar );
                                                                    RESULT = arregloInstancias;}:}
    | BOOL instanciacionBool:id {:ArrayList arregloInstancias = new ArrayList();
                                Nodo newChar = new Nodo("bool", "");
                                Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                arregloInstancias.add(newChar);
                                arregloInstancias.add(newID);
                                int temp = this.parser.direccion;
                                if(esMetodo)
                                    this.parser.direccion++;
                                else
                                    temp = -1;
                                Tabla nuevaVar = new Tabla(((Nodo)id).getTipo(), "bool", this.parser.ambito, this.parser.profundidad, temp, 0);
                                this.parser.tabla.add( nuevaVar );
                                RESULT = arregloInstancias; :};

instanciacionBool ::= ID:id iniciacionBool:integer {: Nodo var = new Nodo(id.toString(), integer.toString());
                                                            RESULT = var; :}
    | error iniciacionBool {: System.out.println("\u001B[31m" + "Expected an id."); :};

iniciacionBool ::= ASSIGN bool:letter {: RESULT = letter.toString(); :}
    | {: RESULT = ""; :};

bool ::= TRUE {: RESULT = "true"; :} | FALSE {: RESULT = "false"; :}
    | error {: System.out.println("\u001B[31m" + "Expected either true/false."); :};

asignacionBoolPtr ::= asignacionBoolPtr:b COMMA instanciacionBoolPtr:id {:if(b != null){
                                                                        ArrayList arregloNodos = (ArrayList) b;
                                                                        Nodo newID = new Nodo((String)id, "");
                                                                        arregloNodos.add( newID );
                                                                        int temp = this.parser.direccion;
                                                                        if(esMetodo)
                                                                            this.parser.direccion++;
                                                                        else
                                                                            temp = -1;
                                                                        Tabla nuevaVar = new Tabla((String)id, "bool*", this.parser.ambito, this.parser.profundidad, temp, 0);
                                                                        this.parser.tabla.add( nuevaVar );
                                                                        RESULT = arregloNodos;
                                                                     } else {
                                                                        ArrayList arregloInstancias = new ArrayList();
                                                                        Nodo newID = new Nodo((String)id, "");
                                                                        arregloInstancias.add(newID);
                                                                        int temp = this.parser.direccion;
                                                                        if(esMetodo)
                                                                            this.parser.direccion++;
                                                                        else
                                                                            temp = -1;
                                                                        Tabla nuevaVar = new Tabla((String)id, "bool*", this.parser.ambito, this.parser.profundidad, temp, 0);
                                                                        this.parser.tabla.add( nuevaVar );
                                                                        RESULT = arregloInstancias;}:}
    | BOOLPTR instanciacionBoolPtr:id {:ArrayList arregloInstancias = new ArrayList();
                                        Nodo newChar = new Nodo("bool ptr", "");
                                        Nodo newID = new Nodo((String)id, "");
                                        arregloInstancias.add(newChar);
                                        arregloInstancias.add(newID);
                                        int temp = this.parser.direccion;
                                        if(esMetodo)
                                            this.parser.direccion++;
                                        else
                                            temp = -1;
                                        Tabla nuevaVar = new Tabla((String)id, "bool*", this.parser.ambito, this.parser.profundidad, temp, 0);
                                        this.parser.tabla.add( nuevaVar );
                                        RESULT = arregloInstancias; :};

instanciacionBoolPtr ::= ID:id iniciacionBoolPtr {: RESULT = id.toString(); :}
    | error iniciacionBoolPtr {: System.out.println("\u001B[31m" + "Expected an id."); :};

iniciacionBoolPtr ::= ASSIGN instanciacionBoolPtr
    | ;

instanciacionBoolPtr ::= LBRAC RBRAC {::}
    | LBRAC boolLista RBRAC;

boolLista ::= bool {::}
    | boolLista COMMA bool;

/*------------------- STRING GRAMATICA -----------------------*/
asignacionString ::= asignacionString:b COMMA instanciacionString:id {:if(b != null){
                                                                        ArrayList arregloNodos = (ArrayList) b;
                                                                        Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                                                        arregloNodos.add( newID );
                                                                        int temp = this.parser.direccion;
                                                                        if(esMetodo)
                                                                            this.parser.direccion++;
                                                                        else
                                                                            temp = -1;
                                                                        Tabla nuevaVar = new Tabla(((Nodo)id).getTipo(), "string", this.parser.ambito, this.parser.profundidad, temp, 0);
                                                                        this.parser.tabla.add( nuevaVar );
                                                                        RESULT = arregloNodos;
                                                                     } else {
                                                                        ArrayList arregloInstancias = new ArrayList();
                                                                        Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                                                        arregloInstancias.add(newID);
                                                                        int temp = this.parser.direccion;
                                                                        if(esMetodo)
                                                                            this.parser.direccion++;
                                                                        else
                                                                            temp = -1;
                                                                        Tabla nuevaVar = new Tabla(((Nodo)id).getTipo(), "string", this.parser.ambito, this.parser.profundidad, temp, 0);
                                                                        this.parser.tabla.add( nuevaVar );
                                                                        RESULT = arregloInstancias;}:}
    | STRING instanciacionString:id {:ArrayList arregloInstancias = new ArrayList();
                                        Nodo newChar = new Nodo("string", "");
                                        Nodo newID = new Nodo( ((Nodo)id).getTipo(), ((Nodo)id).getValue());
                                        arregloInstancias.add(newChar);
                                        arregloInstancias.add(newID);
                                        int temp = this.parser.direccion;
                                        if(esMetodo)
                                            this.parser.direccion++;
                                        else
                                            temp = -1;
                                        Tabla nuevaVar = new Tabla(((Nodo)id).getTipo(), "string", this.parser.ambito, this.parser.profundidad, temp, 0);
                                        this.parser.tabla.add( nuevaVar );
                                        RESULT = arregloInstancias; :};

instanciacionString ::= ID:id iniciacionString:integer {: Nodo var = new Nodo(id.toString(), integer.toString());
                                                            RESULT = var; :}
    | error iniciacionString {: System.out.println("\u001B[31m" + "Expected an id."); :};

iniciacionString ::= ASSIGN DOBCOM contenidoString:cont DOBCOM {: RESULT = cont.toString(); :}
    | {: RESULT = ""; :};

contenidoString ::= contenidoString:cont ID:id  {: RESULT = cont.toString() + " " + id.toString(); :}
    | ID:id  {: RESULT = id.toString(); :}
    | contenidoString COMMA error {: System.out.println("\u001B[31m" + "Expected an id."); :}
    | error {: System.out.println("\u001B[31m" + "Expected an id."); :};

/*------------------- if GRAMATICA -----------------------*/
conditionalExpr ::= conditionalExpr:expr1 OR_OP:andor andExpr:expr2 {:  Nodo expresion1 = (Nodo)expr1;
                                                                        Nodo expresion2 = (Nodo)expr2;
                                                                        Nodo condition = new Nodo(andor.toString(), "");
                                                                        condition.addHijo(expresion1);
                                                                        condition.addHijo(expresion2);
                                                                        RESULT =  condition;:}
    | andExpr:expr {:   Nodo expresion = (Nodo)expr;
                        RESULT = expresion; :}
    | conditionalExpr:expr1 OR_OP:andor LPAR andExpr:expr2 RPAR {:  Nodo expresion1 = (Nodo)expr1;
                                                                    Nodo expresion2 = (Nodo)expr2;
                                                                    Nodo condition = new Nodo(andor.toString(), "");
                                                                    condition.addHijo(expresion1);
                                                                    condition.addHijo(expresion2);
                                                                    RESULT =  condition;:};

andExpr ::= andExpr:expr1 AND_OP:andor logicalExpr:expr2 {: Nodo expresion1 = (Nodo)expr1;
                                                            Nodo expresion2 = (Nodo)expr2;
                                                            Nodo condition = new Nodo(andor.toString(), "");
                                                            condition.addHijo(expresion1);
                                                            condition.addHijo(expresion2);
                                                            RESULT =  condition;:}
    | logicalExpr:expr {:   Nodo expresion = (Nodo)expr;
                            RESULT = expresion; :}
    | andExpr:expr1 AND_OP:andor LPAR logicalExpr:expr2 RPAR {: Nodo expresion1 = (Nodo)expr1;
                                                                Nodo expresion2 = (Nodo)expr2;
                                                                Nodo condition = new Nodo(andor.toString(), "");
                                                                condition.addHijo(expresion1);
                                                                condition.addHijo(expresion2);
                                                                RESULT =  condition;:};

andORor ::= AND_OP:and {: RESULT = and.toString(); :}
    | OR_OP:or {: RESULT = or.toString(); :}
    | error {: System.out.println("\u001B[31m" + "Unknown character."); :};

logicalExpr ::= ID:id logicalExprComp:arreglo {: Nodo expresion1 = new Nodo(id.toString(), "");
                                                    ArrayList arregloExpresion = (ArrayList) arreglo;
                                                    if(arregloExpresion.size() > 0){
                                                        Nodo condition = new Nodo( ((Nodo)arregloExpresion.get(0)).getTipo(), "");
                                                        Nodo expresion2 = new Nodo( ((Nodo)arregloExpresion.get(1)).getTipo(), "");
                                                        condition.addHijo(expresion1);
                                                        condition.addHijo(expresion2);
                                                        RESULT = condition;
                                                    } else{
                                                        Nodo condition = new Nodo( "true", "");
                                                        condition.addHijo(expresion1);
                                                        RESULT = condition;
                                                    } :}
    | INTEGER:inte comparator:comp logicalExprID:expr {: Nodo expresion1 = new Nodo(inte.toString(), "");
                                            Nodo expresion2 = new Nodo(expr.toString(), "");
                                            Nodo condition = new Nodo(comp.toString(), "");
                                            condition.addHijo(expresion1);
                                            condition.addHijo(expresion2);
                                            RESULT = condition; :}
    | TRUE {: Nodo tru = new Nodo("true", ""); RESULT = tru; :}
    | FALSE {: Nodo fal = new Nodo("false", "");RESULT = fal; :}
    | error {: System.out.println("\u001B[31m" + "Unexpected character."); :};

logicalExprComp ::= comparator:comp logicalExprID:expr {: ArrayList arregloExpresiones = new ArrayList();
                                                            Nodo expresion = new Nodo(expr.toString(), "");
                                                            Nodo condition = new Nodo(comp.toString(), "");
                                                            arregloExpresiones.add(condition);
                                                            arregloExpresiones.add(expresion);
                                                            RESULT = arregloExpresiones;:}
    | {:ArrayList arregloExpresiones = new ArrayList();
        RESULT = arregloExpresiones; :};

logicalExprID ::= ID:id {: RESULT = id; :}
    | INTEGER:inte {: RESULT = inte; :}
    | error {: System.out.println("\u001B[31m" + "Unexpected character."); :};

comparator ::= EQUAL_OP:comp {: RESULT = comp; :}
    | LESSTHAN_OP:comp {: RESULT = comp; :}
    | GREATERTHAN_OP:comp {: RESULT = comp; :}
    | LESSEQUAL_OP:comp {: RESULT = comp; :}
    | GREATEREQUAL_OP:comp {: RESULT = comp; :}
    | NOTEQUAL_OP:comp {: RESULT = comp; :};

if ::= IF LPAR conditionalExpr:cond RPAR LKEY {: this.parser.ambito+=".if"; this.parser.profundidad++; :}body:body {: this.parser.quitarAmbito(); :} RKEY else:elseIf {: 
                                                                            
                                                                            if(elseIf != null){
                                                                            Nodo nodo = new Nodo("if", "");
                                                                            Nodo cuerpo = new Nodo("cuerpo", "");
                                                                            Nodo condicion = new Nodo("condicion", "");

                                                                            Nodo conds = (Nodo) cond;
                                                                            condicion.addHijo(conds);

                                                                            ArrayList arregloBody = (ArrayList) body;
                                                                            if(arregloBody != null){
                                                                                for(int i = 0; i < arregloBody.size(); i++){
                                                                                    Nodo temp = ((Nodo)arregloBody.get(i));
                                                                                    cuerpo.addHijo(temp);
                                                                                }
                                                                            }
                                                                            nodo.addHijo(condicion);
                                                                            nodo.addHijo(cuerpo);
                                                                            ArrayList arregloNodos = new ArrayList();
                                                                            arregloNodos.add(nodo);
                                                                            ArrayList arregloElse = (ArrayList) elseIf;
                                                                            if(arregloElse != null){
                                                                                for(int i = 0; i < arregloElse.size(); i++){
                                                                                    Nodo temp = ((Nodo)arregloElse.get(i));
                                                                                    arregloNodos.add(temp);
                                                                                }
                                                                            }
                                                                            RESULT = arregloNodos;
                                                                        } else {
                                                                            Nodo nodo = new Nodo("if", "");
                                                                            Nodo cuerpo = new Nodo("cuerpo", "");
                                                                            Nodo condicion = new Nodo("condicion", "");

                                                                            Nodo conds = (Nodo) cond;
                                                                            condicion.addHijo(conds);

                                                                            ArrayList arregloBody = (ArrayList) body;
                                                                            if(arregloBody != null){
                                                                                for(int i = 0; i < arregloBody.size(); i++){
                                                                                    Nodo temp = ((Nodo)arregloBody.get(i));
                                                                                    cuerpo.addHijo(temp);
                                                                                }
                                                                            }
                                                                            nodo.addHijo(condicion);
                                                                            nodo.addHijo(cuerpo);
                                                                            ArrayList arregloNodos = new ArrayList();
                                                                            arregloNodos.add(nodo);
                                                                            RESULT = arregloNodos; } :}
    | error LPAR conditionalExpr RPAR LKEY body:body RKEY else {: System.out.println("\u001B[31m" + "Expected if."); :}
    | IF error conditionalExpr RPAR LKEY body:body RKEY else {: System.out.println("\u001B[31m" + "Expected '('."); :}
    /* | IF LPAR conditionalExpr error LKEY body:body RKEY else {: System.out.println("\u001B[31m" + "Expected ')'."); :}
    | IF LPAR conditionalExpr RPAR error body:body RKEY else {: System.out.println("\u001B[31m" + "Expected '{'."); :}
    | IF LPAR conditionalExpr RPAR LKEY body:body error else {: System.out.println("\u001B[31m" + "Expected '}'."); :} */ ;

else ::= else ELSE ifSinElse:ifSinElse {:RESULT = ifSinElse; :}
    | ;

ifSinElse ::= IF LPAR conditionalExpr RPAR LKEY body:body RKEY {:Nodo nodo = new Nodo("else if", "");
                                                            ArrayList arregloBody = (ArrayList) body;
                                                            if(arregloBody != null){
                                                                for(int i = 0; i < arregloBody.size(); i++){
                                                                    Nodo temp = ((Nodo)arregloBody.get(i));
                                                                    nodo.addHijo(temp);
                                                                }
                                                            }
                                                            ArrayList arregloNodos = new ArrayList();
                                                            arregloNodos.add(nodo);
                                                            RESULT = arregloNodos;:}
    | error LPAR conditionalExpr RPAR LKEY body:body RKEY {: System.out.println("\u001B[31m" + "Expected if."); :}
    | IF error conditionalExpr RPAR LKEY body:body RKEY {: System.out.println("\u001B[31m" + "Expected '('."); :}
    | IF LPAR conditionalExpr error LKEY body:body RKEY {: System.out.println("\u001B[31m" + "Expected ')'."); :}
    | IF LPAR conditionalExpr RPAR error body:body RKEY {: System.out.println("\u001B[31m" + "Expected '{'."); :}
    | IF LPAR conditionalExpr RPAR LKEY body:body error {: System.out.println("\u001B[31m" + "Expected '}'."); :};

/*------------------- While GRAMATICA -----------------------*/
while ::= WHILE LPAR conditionalExpr:cond RPAR LKEY body:body RKEY {: Nodo nodo = new Nodo("while", "");
                                                                    Nodo condicion = new Nodo("condicion", "");
                                                                    Nodo cuerpo = new Nodo("cuerpo", "");
                                                                    ArrayList arregloBody = (ArrayList) body;
                                                                    if(arregloBody != null){
                                                                        for(int i = 0; i < arregloBody.size(); i++){
                                                                            Nodo temp = ((Nodo)arregloBody.get(i));
                                                                            cuerpo.addHijo(temp);
                                                                        }
                                                                    }
                                                                    Nodo conds = (Nodo) cond;
                                                                    condicion.addHijo(conds);

                                                                    nodo.addHijo(condicion);
                                                                    nodo.addHijo(cuerpo);
                                                                    ArrayList arregloNodos = new ArrayList();
                                                                    arregloNodos.add(nodo);
                                                                    RESULT = arregloNodos; :}
    | WHILE error conditionalExpr RPAR LKEY body:body RKEY {: System.out.println("\u001B[31m" + "Expected '('."); :}
    | WHILE LPAR conditionalExpr error LKEY body:body RKEY {: System.out.println("\u001B[31m" + "Expected ')'."); :}
    | WHILE LPAR conditionalExpr RPAR error body:body RKEY {: System.out.println("\u001B[31m" + "Expected '{'."); :}
    | WHILE LPAR conditionalExpr RPAR LKEY body:body error {: System.out.println("\u001B[31m" + "Expected '}'."); :};

/*------------------- Do While GRAMATICA -----------------------*/
doWhile ::= DO LKEY {: this.parser.ambito+=".dowhile"; this.parser.profundidad++; :} body:body {: this.parser.quitarAmbito(); :} RKEY WHILE LPAR conditionalExpr:cond RPAR DASH {: Nodo nodo = new Nodo("do while", "");
                                                                        Nodo condicion = new Nodo("condicion", "");
                                                                        Nodo cuerpo = new Nodo("cuerpo", "");
                                                                        ArrayList arregloBody = (ArrayList) body;
                                                                        if(arregloBody != null){
                                                                            for(int i = 0; i < arregloBody.size(); i++){
                                                                                Nodo temp = ((Nodo)arregloBody.get(i));
                                                                                cuerpo.addHijo(temp);
                                                                            }
                                                                        }
                                                                        Nodo conds = (Nodo) cond;
                                                                        condicion.addHijo(conds);

                                                                        nodo.addHijo(condicion);
                                                                        nodo.addHijo(cuerpo);
                                                                        ArrayList arregloNodos = new ArrayList();
                                                                        arregloNodos.add(nodo);
                                                                        RESULT = arregloNodos; :}
    | error LKEY body:body RKEY WHILE LPAR conditionalExpr RPAR DASH {: System.out.println("\u001B[31m" + "Expected do."); :}
    | DO error body:body RKEY WHILE LPAR conditionalExpr RPAR DASH {: System.out.println("\u001B[31m" + "Expected '{'."); :}
    /* | DO LKEY body:body error WHILE LPAR conditionalExpr RPAR DASH {: System.out.println("\u001B[31m" + "Expected '}'."); :}
    | DO LKEY body:body RKEY WHILE error conditionalExpr RPAR DASH {: System.out.println("\u001B[31m" + "Expected '('."); :}
    | DO LKEY body:body RKEY WHILE LPAR conditionalExpr error DASH {: System.out.println("\u001B[31m" + "Expected ')'."); :}
    | DO LKEY body:body RKEY WHILE LPAR conditionalExpr RPAR error {: System.out.println("\u001B[31m" + "Expected '-'."); :} */;

/*------------------- For GRAMATICA -----------------------*/
for ::= FOR  LPAR declaracionFor:decFor SEMICOLON conditionalExpr:cond SEMICOLON ID autoAssign RPAR LKEY body:body RKEY {: Nodo nodo = new Nodo("for", "");
                                                                                                            Nodo condicion = new Nodo("condicion", "");
                                                                                                            Nodo cuerpo = new Nodo("cuerpo", "");
                                                                                                            Nodo declaracionFor = new Nodo("declaracionFor", "");
                                                                                                            ArrayList arregloBody = (ArrayList) body;
                                                                                                            if(arregloBody != null){
                                                                                                                for(int i = 0; i < arregloBody.size(); i++){
                                                                                                                    Nodo temp = ((Nodo)arregloBody.get(i));
                                                                                                                    cuerpo.addHijo(temp);
                                                                                                                }
                                                                                                            }
                                                                                                            Nodo conds = (Nodo) cond;
                                                                                                            condicion.addHijo(conds);

                                                                                                            ArrayList arregloDecFor = (ArrayList) decFor;
                                                                                                            if(arregloDecFor != null){
                                                                                                                for(int i = 0; i < arregloDecFor.size(); i++){
                                                                                                                    Nodo temp = ((Nodo)arregloDecFor.get(i));
                                                                                                                    declaracionFor.addHijo(temp);
                                                                                                                }
                                                                                                            }
                                                                                                            
                                                                                                            nodo.addHijo(declaracionFor);
                                                                                                            nodo.addHijo(condicion);
                                                                                                            nodo.addHijo(cuerpo);
                                                                                                            ArrayList arregloNodos = new ArrayList();
                                                                                                            arregloNodos.add(nodo);
                                                                                                            RESULT = arregloNodos; :}
    /* | error LPAR declaracionFor SEMICOLON conditionalExpr SEMICOLON ID autoAssign RPAR LKEY body:body RKEY {: System.out.println("\u001B[31m" + "Expected for."); :}
    | FOR error declaracionFor SEMICOLON conditionalExpr SEMICOLON ID autoAssign RPAR LKEY body:body RKEY {: System.out.println("\u001B[31m" + "Expected '('."); :}
    | FOR LPAR declaracionFor error conditionalExpr SEMICOLON ID autoAssign RPAR LKEY body:body RKEY {: System.out.println("\u001B[31m" + "Expected ';'."); :}
    | FOR LPAR declaracionFor SEMICOLON conditionalExpr SEMICOLON error autoAssign RPAR LKEY body:body RKEY {: System.out.println("\u001B[31m" + "Expected an id."); :}
    | FOR LPAR declaracionFor SEMICOLON conditionalExpr SEMICOLON ID autoAssign error LKEY body:body RKEY {: System.out.println("\u001B[31m" + "Expected ')'."); :}
    | FOR LPAR declaracionFor SEMICOLON conditionalExpr SEMICOLON ID autoAssign RPAR error body:body RKEY {: System.out.println("\u001B[31m" + "Expected '{'."); :}
    | FOR LPAR declaracionFor SEMICOLON conditionalExpr SEMICOLON ID autoAssign RPAR LKEY body:body error {: System.out.println("\u001B[31m" + "Expected '}'."); :} */ ;

autoAssign ::= ADDFOR
    | MINUSFOR
    | MULTFOR
    | error {: System.out.println("\u001B[31m" + "Unexpected character."); :};

declaracionFor ::= declaracionFor:array COMMA instanciacionIntegerFor:node {:
                                                                                ArrayList arreglo = (ArrayList)array;
                                                                                Nodo nodo = (Nodo)node;
                                                                                arreglo.add(nodo);
                                                                                RESULT=arreglo;
                                                                            :}
    | INT instanciacionIntegerFor:node {:   
                                            ArrayList array = new ArrayList();
                                            Nodo nodo = (Nodo)node;
                                            array.add(nodo);
                                            RESULT=array;
                                        :}
    | {: ArrayList array = new ArrayList(); RESULT=array; :};

instanciacionIntegerFor ::= ID:id ASSIGN INTEGER:inte  {: Nodo nodo = new Nodo(id.toString(), inte.toString()); RESULT=nodo; :}
    | error ASSIGN INTEGER  {: System.out.println("\u001B[31m" + "Expected an id."); :}
    | ID error INTEGER  {: System.out.println("\u001B[31m" + "Expected '='."); :}
    | ID ASSIGN error  {: System.out.println("\u001B[31m" + "Expected a number."); :};

/*------------------- Switch GRAMATICA -----------------------*/


switch ::= SWITCH LPAR ID RPAR LKEY caseExist:caseE default RKEY {: Nodo nodo = new Nodo("switch", "");
                                                                ArrayList arregloNodos = new ArrayList();
                                                                ArrayList arregloCase = (ArrayList) caseE;
                                                                if(arregloCase != null) {
                                                                    for(int i = 0; i < arregloCase.size(); i++){
                                                                        Nodo temp = ((Nodo)arregloCase.get(i));
                                                                        nodo.addHijo(temp);
                                                                    }
                                                                }
                                                                arregloNodos.add(nodo);
                                                                RESULT = arregloNodos; :};

caseExist ::= case:caseE {: RESULT = caseE; :}
    | ;

case ::= case:cases declaracionCase:currCase {: if(cases != null){
                                                    ArrayList arregloNodos = (ArrayList) cases;
                                                    ArrayList arregloCommand = (ArrayList) currCase;
                                                    Nodo caseE = (Nodo)arregloCommand.get(0);
                                                    arregloNodos.add( caseE );
                                                    RESULT = arregloNodos;
                                                 } else {
                                                    ArrayList arregloCommand = (ArrayList) currCase;
                                                    Nodo caseE = (Nodo)arregloCommand.get(0);
                                                    RESULT = currCase;}:}
    | declaracionCase:dec {: RESULT = dec; :} ;

declaracionCase ::= CASE varCase:vc  COLON body:body caseBreak {: Nodo nodo = new Nodo("case","");
                                                        ArrayList nodos = new ArrayList();
                                                        ArrayList arregloNodos = (ArrayList) body;
                                                        if(arregloNodos != null){
                                                            for(int i = 0; i < arregloNodos.size(); i++){
                                                                Nodo temp = ((Nodo)arregloNodos.get(i));
                                                                nodo.addHijo(temp);
                                                            } 
                                                        }
                                                        nodos.add(nodo);
                                                        RESULT = nodos; :};

varCase ::= INTEGER {::}
    | SIMCOM LETTER SIMCOM;

caseBreak ::= BREAK DASH {::}
    | ;

default ::= DEFAULT COLON body caseBreak {::}
    | ;

/*------------------- BODY -----------------------*/
/*------------------- BODY -----------------------*/
body ::= body:b declaracion:a {: if(b != null){
                                ArrayList arregloNodos = (ArrayList) b;
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo declaracionVar = (Nodo)arregloCommand.get(0);
                                arregloNodos.add( declaracionVar );
                                RESULT = arregloNodos;
                             } else {
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo declaracionVar = (Nodo)arregloCommand.get(0);
                                RESULT = a;} :}
    | body:b if:a {: if(b != null){
                        ArrayList arregloNodos = (ArrayList) b;
                        ArrayList arregloCommand = (ArrayList) a;
                        for(int i = 0; i < arregloCommand.size(); i++){
                            Nodo temp = (Nodo)arregloCommand.get(i);
                            arregloNodos.add( temp );
                        }
                        RESULT = arregloNodos;
                     } else {
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo ifVar = (Nodo)arregloCommand.get(0);
                        RESULT = a;} :}
    | body:b {: this.parser.ambito+=".while"; this.parser.profundidad++; :} while:a {: this.parser.quitarAmbito();
                    if(b != null){
                        ArrayList arregloNodos = (ArrayList) b;
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo whileVar = (Nodo)arregloCommand.get(0);
                        arregloNodos.add( whileVar );
                        RESULT = arregloNodos;
                     } else {
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo whileVar = (Nodo)arregloCommand.get(0);
                        RESULT = a;} :}
    | body:b doWhile:a {: if(b != null){
                            ArrayList arregloNodos = (ArrayList) b;
                            ArrayList arregloCommand = (ArrayList) a;
                            Nodo doWhile = (Nodo)arregloCommand.get(0);
                            arregloNodos.add( doWhile );
                            RESULT = arregloNodos;
                         } else {
                            ArrayList arregloCommand = (ArrayList) a;
                            Nodo doWhile = (Nodo)arregloCommand.get(0);
                            RESULT = a;} :}
    | body:b {: this.parser.ambito+=".for"; this.parser.profundidad++; :} for:a {: this.parser.quitarAmbito();
                    if(b != null){
                        ArrayList arregloNodos = (ArrayList) b;
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo forVar = (Nodo)arregloCommand.get(0);
                        arregloNodos.add( forVar );
                        RESULT = arregloNodos;
                    } else {
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo forVar = (Nodo)arregloCommand.get(0);
                        RESULT = a;} :}
    | body:b {: this.parser.ambito+=".switch"; this.parser.profundidad++; :} switch:a {: this.parser.quitarAmbito();
                    if(b != null){
                        ArrayList arregloNodos = (ArrayList) b;
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo switchVar = (Nodo)arregloCommand.get(0);
                        arregloNodos.add( switchVar );
                        RESULT = arregloNodos;
                     } else {
                        ArrayList arregloCommand = (ArrayList) a;
                        Nodo switchVar = (Nodo)arregloCommand.get(0);
                        RESULT = a;} :}
    | body:b func:a {: if(b != null){
                                ArrayList arregloNodos = (ArrayList) b;
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo func = (Nodo)arregloCommand.get(0);
                                arregloNodos.add( func );
                                RESULT = arregloNodos;
                             } else {
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo func = (Nodo)arregloCommand.get(0);
                                RESULT = a;} :}
    | body:b entry:a {: if(b != null){
                                ArrayList arregloNodos = (ArrayList) b;
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo entrada = (Nodo)arregloCommand.get(0);
                                arregloNodos.add( entrada );
                                RESULT = arregloNodos;
                             } else {
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo entrada = (Nodo)arregloCommand.get(0);
                                RESULT = a;} :}
    | body:b salida:a {: if(b != null){
                                ArrayList arregloNodos = (ArrayList) b;
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo salida = (Nodo)arregloCommand.get(0);
                                arregloNodos.add( salida );
                                RESULT = arregloNodos;
                             } else {
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo salida = (Nodo)arregloCommand.get(0);
                                RESULT = a;} :}
    | body:b assign_var:a {: if(b != null){
                                ArrayList arregloNodos = (ArrayList) b;
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo assign_var = (Nodo)arregloCommand.get(0);
                                arregloNodos.add( assign_var );
                                RESULT = arregloNodos;
                             } else {
                                ArrayList arregloCommand = (ArrayList) a;
                                Nodo assign_var = (Nodo)arregloCommand.get(0);
                                RESULT = a;} :}    
    |   {:
            ArrayList arreglo = new ArrayList();
            RESULT = arreglo;
        :};

/*------------------- Declaracion de funciones -----------------------*/
dec_function ::= FUNCTION ID:nombre {: this.parser.ambito+="."+nombre.toString(); this.parser.profundidad=0; :} ARROW LPAR parameters:params RPAR {: esMetodo = true; :} LKEY body:body RETURN varRet:ret DASH RKEY DASH {: Nodo nodo = new Nodo("funcion", nombre.toString());
                            String tipoRetorno = "";
                            if(this.parser.isNumeric(ret.toString()))
                                tipoRetorno = "int";
                            else if(ret.toString().length() > 0)
                                tipoRetorno = this.parser.buscarTipo(ret.toString());
                            else
                                tipoRetorno = "Variable de retorno no ha sido declarada";
                            
                            String tipoFunc = "";
                            String parametrosFunc = "";
                            ArrayList arregloParams = (ArrayList)params;
                            for(int i = 0; i < arregloParams.size(); i++){
                                parametrosFunc+=((String)arregloParams.get(i));
                                if(i != arregloParams.size()-1)
                                    parametrosFunc+=" x ";
                            }
                            this.parser.quitarAmbito();
                            tipoFunc+=parametrosFunc+ " -> " + tipoRetorno;
                            Tabla nuevaVar = new Tabla(nombre.toString(), tipoFunc, this.parser.ambito, this.parser.profundidad, 0, 0);
                            this.parser.tabla.add( nuevaVar );
                            
                            ArrayList arregloNodos = (ArrayList) body;
                            for(int i = 0; i < arregloNodos.size(); i++){
                                Nodo temp = ((Nodo)arregloNodos.get(i));
                                nodo.addHijo(temp);
                            }
                            Nodo nodoRet = new Nodo("return", ret.toString());
                            nodo.addHijo(nodoRet);
                            Nodo fin = new Nodo("finFunc", nombre.toString());
                            nodo.addHijo(fin);
                            ArrayList arregloFuncion = new ArrayList();
                            arregloFuncion.add(nodo);
                            esMetodo = false;
                            RESULT = arregloFuncion; :};

func ::= ID:id LPAR ids:ids RPAR        {:  ArrayList arreglo = new ArrayList();
                                            Nodo func = new Nodo("callFunc",id.toString());
                                            arreglo.add(func);
                                            ArrayList idsArray = (ArrayList)ids;
                                            String variables = "";
                                            for (int i = 0; i < idsArray.size(); i++) {
                                                variables+=idsArray.get(i)+" ";
                                            }
                                            String llamado = id.toString()+"("+variables+")";
                                            String s = llamado.replaceAll(" ","");
                                            RESULT = s; 
                                                :}
    | ID error ID LPAR ids RPAR DASH           {: System.out.println("\u001B[31m" + "Expected '=>'"); :}
    | ID ARROW ID error ids RPAR DASH          {: System.out.println("\u001B[31m" + "Expected '('"); :}
    | ID ARROW ID LPAR ids error DASH          {: System.out.println("\u001B[31m" + "Expected ')'"); :}
    | ID ARROW ID LPAR ids RPAR error          {: System.out.println("\u001B[31m" + "Expected - (dash) at end of line"); :}

;


dec_main ::= MAIN ARROW LPAR {: this.parser.ambito+=".main"; this.parser.profundidad=0; :} parameters:params RPAR {: esMetodo = true; :} LKEY body:body RETURN varRet:ret DASH RKEY {: Nodo nodo = new Nodo("main", "");
                                                                                    String tipoRetorno = "";
                                                                                    if(this.parser.isNumeric(ret.toString()))
                                                                                        tipoRetorno = "int";
                                                                                    else if(ret.toString().length() > 0)
                                                                                        tipoRetorno = this.parser.buscarTipo(ret.toString());
                                                                                    else
                                                                                        tipoRetorno = "Variable de retorno no ha sido declarada";

                                                                                    String tipoFunc = "";
                                                                                    String parametrosFunc = "";
                                                                                    ArrayList arregloParams = (ArrayList)params;
                                                                                    for(int i = 0; i < arregloParams.size(); i++){
                                                                                        parametrosFunc+=((String)arregloParams.get(i));
                                                                                        if(i != arregloParams.size()-1)
                                                                                            parametrosFunc+=" x ";
                                                                                    }
                                                                                    this.parser.quitarAmbito();
                                                                                    tipoFunc+=parametrosFunc+ " -> " + tipoRetorno;
                                                                                    Tabla nuevaVar = new Tabla("main", tipoFunc, this.parser.ambito, this.parser.profundidad, 0, 0);
                                                                                    this.parser.tabla.add( nuevaVar );
                                                                                    ArrayList arregloNodos = (ArrayList) body;
                                                                                    for(int i = 0; i < arregloNodos.size(); i++){
                                                                                        Nodo temp = ((Nodo)arregloNodos.get(i));
                                                                                        nodo.addHijo(temp);
                                                                                    }
                                                                                    Nodo nodoRet = new Nodo("return", ret.toString());
                                                                                    nodo.addHijo(nodoRet);
                                                                                    ArrayList arregloFuncion = new ArrayList();
                                                                                    arregloFuncion.add(nodo);
                                                                                    esMetodo = false;
                                                                                    RESULT = arregloFuncion;:}
    /*| MAIN error LPAR parameters RPAR LKEY body RETURN varRet DASH RKEY       {: System.out.println("\u001B[31m" + "Expected '=>'"); :}
    | MAIN ARROW error parameters RPAR LKEY body RETURN varRet DASH RKEY      {: System.out.println("\u001B[31m" + "Expected '('"); :}
    | MAIN ARROW LPAR parameters error LKEY body RETURN varRet DASH RKEY      {: System.out.println("\u001B[31m" + "Expected ')'"); :}
    | MAIN ARROW LPAR parameters RPAR error body RETURN varRet DASH RKEY      {: System.out.println("\u001B[31m" + "Expected '{'"); :}
    | MAIN ARROW LPAR parameters RPAR LKEY body error varRet DASH RKEY        {: System.out.println("\u001B[31m" + "Missing return statement"); :}
    | MAIN ARROW LPAR parameters RPAR LKEY body RETURN varRet error RKEY      {: System.out.println("\u001B[31m" + "Expected - (dash) at end of line"); :}
    | MAIN ARROW LPAR parameters RPAR LKEY body RETURN varRet DASH error      {: System.out.println("\u001B[31m" + "Expected ')'"); :}*/
;
 
parameters ::= parameters:params COMMA params_type:param ID:id  {:ArrayList arregloParams = (ArrayList)params;
                                                arregloParams.add(param.toString());
                                                RESULT = arregloParams;
                                                Tabla nuevaVar = new Tabla((String)id, param.toString(), this.parser.ambito , 0, 0, 1);
                                                this.parser.tabla.add( nuevaVar ); :}
    | params_type:param ID:id    {:ArrayList arregloParams = new ArrayList();
                                arregloParams.add(param.toString());
                                RESULT = arregloParams;
                                Tabla nuevaVar = new Tabla((String)id, param.toString(), this.parser.ambito , 0, 0, 1);
                                this.parser.tabla.add( nuevaVar ); :};

ids ::= moreIds:ids          {:ArrayList idsArray = (ArrayList)ids;
                                
                                RESULT = idsArray; :}
    | {:ArrayList idsArray = new ArrayList(); RESULT = idsArray; :};

moreIds ::= moreIds:ids COMMA types:id     {: ArrayList idsArray = (ArrayList)ids;
                                            idsArray.add("," + id.toString());
                                            RESULT = idsArray; :}
    | types:id     {: ArrayList ids = new ArrayList();
                    ids.add(id.toString());
                    RESULT = ids; 
                :};

types ::= ID:id   {: RESULT = id.toString(); :}
    | INTEGER:id   {: RESULT = id.toString(); :}
    | TRUE      {: RESULT = "true"; :}
    | FALSE     {: RESULT = "false"; :};


params_type ::= INT    {: RESULT = "int"; :}
    | INTPTR    {: RESULT = "int*"; :}
    | CHAR      {: RESULT = "char"; :}
    | CHARPTR   {: RESULT = "char*"; :}
    | BOOL      {: RESULT = "bool"; :}
    | BOOLPTR   {: RESULT = "bool*"; :}
    | STRING    {: RESULT = "string"; :}
    | error            {: System.out.println("\u001B[31m" + "Expected type"); :};

varRet ::= ID:id   {: RESULT = id.toString(); :}
    | INTEGER:id   {: RESULT = id.toString(); :}
    | TRUE      {: RESULT = "true"; :}
    | FALSE     {: RESULT = "false"; :}
    | error          {: System.out.println("\u001B[31m" + "Expected return variable"); :};


/* --------------------- Operaciones Aritmeticas ---------------------------*/
assign_var ::= ID:id ASSIGN arithmetic_exp:ae DASH {:   String sArit = id.toString() + "=" + ae;
                                                        ArrayList arreglo = new ArrayList();
                                                        Nodo op_aritmetica= new Nodo("aritmetica",sArit);
                                                        arreglo.add(op_aritmetica);
                                                        RESULT = arreglo; :}
;

arithmetic_exp ::= term:term                           {: RESULT = term; :} 
                                      
            |arithmetic_exp:se1 ADD_OP:pl term:term     {:  String add = se1.toString() + "+" + term.toString();
                                                            RESULT = add; :}
            |arithmetic_exp:se1 MINUS_OP:min term:term  {:  String sub = se1.toString() + "-" + term.toString();
                                                            RESULT = sub; :};

term ::= factor:fact                         {: RESULT = fact.toString();
                                    :}                                                        
         |term:term MULT_OP:tim factor:fact  {:  String mult = term.toString() + "*" + fact.toString();
                                                 
                                                RESULT = mult; :}

         |term:term DIV_OP:div factor:fact  {:  String d = term.toString() + "/" + fact.toString();
                                                RESULT = d; :};

factor ::=  func:f                              {: RESULT = f.toString(); :}
    | INTEGER:id                  {: RESULT = id.toString(); :}
    | ID:id               {:   /*if( this.parser.buscarTipo(id.toString()).length() == 0 ){
                                                System.out.println("\u001B[31m" + "Assigned variable "+ id.toString() +" does not exist.");
                                                RESULT = "Error - "+id.toString();
                                            }
                                            else*/
                                                RESULT = id.toString(); :}
    | TRUE:id                          {: RESULT = id.toString(); :}
    | FALSE:id                         {: RESULT = id.toString(); :}
    | LPAR arithmetic_exp:ae RPAR       {: RESULT = ae.toString(); :} ;                                                       

    
/* -------------------- Lectura y Escritura ---------------------------*/
entry ::= READ LPAR ID:id RPAR DASH     {:  ArrayList arreglo = new ArrayList();
                                            Nodo entrada = new Nodo("entrada",id.toString());
                                            arreglo.add(entrada);
                                            RESULT = arreglo; :}

    | READ error ID RPAR DASH           {: System.out.println("\u001B[31m" + "Expected '('"); :}
    | READ LPAR error RPAR DASH         {: System.out.println("\u001B[31m" + "Expected in-variable"); :}
    | READ LPAR ID error DASH           {: System.out.println("\u001B[31m" + "Expected ')'"); :}
    | READ LPAR ID RPAR error           {: System.out.println("\u001B[31m" + "Expected - (dash) at end of line"); :}
;

salida ::= PRINT LPAR content_print:c RPAR DASH    {: ArrayList arreglo = new ArrayList();
                                                    Nodo salida = new Nodo("salida",c.toString());
                                                    arreglo.add(salida);
                                                    RESULT = arreglo; :}
                                                
    | PRINT error content_print RPAR DASH           {: System.out.println("\u001B[31m" + "Expected '('"); :}
    | PRINT LPAR content_print error DASH           {: System.out.println("\u001B[31m" + "Expected ')'"); :}
    | PRINT LPAR content_print RPAR error            {: System.out.println("\u001B[31m" + "Expected - (dash) at end of line"); :}
;


content_print ::= id_text:a more_content:b {: String s = a + "|" + b;
                                                RESULT = s; 
                                           :};

more_content ::= ADD_OP id_text:a more_content:b    {: String s = a + "|" + b;
                                                        RESULT = s;                                                      
                                                    :}
    |                                               {: RESULT = ""; :};

id_text ::= ID:id       {: RESULT = id.toString();  :}

    | TEXT:id           {: RESULT = id.toString();  :}
    | error             {: System.out.println("\u001B[31m" + "Expected printing content"); :};

content_printASIG ::= id_textASIG:a more_contentASIG:b {: String s = a + "|" + b;
                                                RESULT = s; 
                                           :};

more_contentASIG ::= ADD_OP id_textASIG:a more_contentASIG:b    {: String s = a + "|" + b;
                                                        RESULT = s;                                                      
                                                    :}
    |                                               {: RESULT = ""; :};

id_textASIG ::= ID:id       {: RESULT = id.toString();  :}
    | TEXT:id           {: RESULT = id.toString();  :}
    | INTEGER:id           {: RESULT = id.toString();  :}
    | error             {: System.out.println("\u001B[31m" + "Expected printing content"); :};